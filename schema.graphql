type ActivityLineItem {
  description: String!
  createdAt: DateTime!
}

type ActivityLineItemEdge {
  cursor: String!
  node: ActivityLineItem!
}

type ActivityLineItemConnection {
  edges: [ActivityLineItemEdge]
  pageInfo: PageInfo!
}

type Alert {
  text: String!
  type: AlertType!
  id: String!
}

interface Alertable {
  alerts: [Alert!]!
}

enum AlertType {
  SUCCESS
  WARN
  ERROR
}

scalar Color

input CreateGithubSessionInput {
  clientMutationId: String
  githubAvatarUrl: String!
  githubUsername: String!
  name: String!
  primaryEmail: String!
  serverSecret: String!
}

input CreateGoogleSessionInput {
  clientMutationId: String
  googleAvatarUrl: String!
  googleProfileId: String!
  name: String!
  primaryEmail: String!
  serverSecret: String!
}

type CreateSessionPayload implements Alertable {
  alerts: [Alert!]!
  userEdge: UserEdge
  sessionEdge: SessionEdge
}

scalar DateTime

input DeleteAccountInput {
  clientMutationId: String
  userId: ID!
}

type DeleteAccountPayload implements Alertable {
  alerts: [Alert!]!
  clientMutationId: String
  deletedUserId: ID!
}

input DeleteLinkInput {
  clientMutationId: String
  linkId: ID!
}

type DeleteLinkPayload {
  clientMutationId: String
  deletedLinkId: ID!
}

input DeleteSessionInput {
  clientMutationId: String
  sessionId: ID!
}

type DeleteSessionPayload {
  clientMutationId: String
  deletedSessionId: ID!
}

input DeleteTopicInput {
  clientMutationId: String
  topicId: ID!
}

type DeleteTopicPayload {
  clientMutationId: String
  deletedTopicId: ID
}

input DeleteTopicTimeRangeInput {
  clientMutationId: String
  topicId: ID!
}

type DeleteTopicTimeRangePayload {
  clientMutationId: String
  deletedTimeRangeId: ID
  topic: Topic!
}

type Link implements ResourceIdentifiable & Namespaceable {
  availableParentTopics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  createdAt: DateTime!
  id: ID!
  loading: Boolean!
  newlyAdded: Boolean!
  organization: Organization!
  parentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  repository: Repository!
  resourcePath: String!
  sha1: String!
  title: String!
  updatedAt: DateTime!
  url: String!
  viewerReview: LinkReview
}

type LinkEdge {
  cursor: String!
  node: Link!
}

type LinkConnection {
  edges: [LinkEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

enum LocaleIdentifier {
  ar
  de
  el
  en
  es
  fa
  fi
  fr
  hi
  it
  ja
  ji
  ko
  la
  nl
  no
  pt
  ru
  sv
  tr
  uk
  zh
}

type LinkReview {
  reviewedAt: DateTime
  user: User!
}

type Mutation {
  createGithubSession(input: CreateGithubSessionInput!): CreateSessionPayload
  createGoogleSession(input: CreateGoogleSessionInput!): CreateSessionPayload
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload
  deleteLink(input: DeleteLinkInput!): DeleteLinkPayload
  deleteSession(input: DeleteSessionInput!): DeleteSessionPayload
  deleteTopic(input: DeleteTopicInput!): DeleteTopicPayload
  deleteTopicTimeRange(input: DeleteTopicTimeRangeInput!): DeleteTopicTimeRangePayload
  reviewLink(input: ReviewLinkInput!): ReviewLinkPayload
  selectRepository(input: SelectRepositoryInput!): SelectRepositoryPayload
  updateLinkTopics(input: UpdateLinkTopicsInput!): UpdateLinkTopicsPayload
  updateSynonyms(input: UpdateSynonymsInput!): UpdateSynonymsPayload
  updateTopic(input: UpdateTopicInput!): UpdateTopicPayload
  updateTopicParentTopics(input: UpdateTopicParentTopicsInput!): UpdateTopicParentTopicsPayload
  upsertLink(input: UpsertLinkInput!): UpsertLinkPayload
  upsertTopic(input: UpsertTopicInput!): UpsertTopicPayload
  upsertTopicTimeRange(input: UpsertTopicTimeRangeInput!): UpsertTopicTimeRangePayload
}

interface Namespaceable {
  organization: Organization!
}

type Organization implements ResourceIdentifiable {
  createdAt: DateTime!
  defaultRepository: Repository!
  id: ID
  login: String!
  name: String!
  public: Boolean!
  resourcePath: String!
  updatedAt: DateTime!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type QueryInfo {
  topics: TopicConnection!
  stringTokens: [String!]!
}

enum TimeRangePrefixFormat {
  NONE
  START_YEAR
  START_YEAR_MONTH
}

type Query {
  # Workaround for Relay Modern weirdness
  alerts: [Alert!]!
  fakeError: String
  view(
    viewerId: ID!
    currentOrganizationLogin: String!,
    currentRepositoryName: String,
    repositoryIds: [ID!],
    searchString: String,
  ): View!
}

input ReorderSynonymsInput {
  clientMutationId: String
  synonymIds: [ID!]!
  topicId: ID!
}

type ReorderSynonymsPayload {
  clientMutationId: String
}

type Repository {
  displayColor: Color!
  displayName: String!
  fullName: String!
  id: ID
  isPrivate: Boolean!
  name: String!
  organization: Organization!
  owner: User!
  rootTopic: Topic!
}

type RepositoryConnection {
  edges: [RepositoryEdge]
}

type RepositoryEdge {
  cursor: String!
  node: Repository!
  isSelected: Boolean!
}

interface ResourceIdentifiable {
  resourcePath: String!
}

input ReviewLinkInput {
  clientMutationId: String
  linkId: ID!
  reviewed: Boolean!
}

type ReviewLinkPayload {
  link: Link!
}

union SearchResultItem = Topic | Link

type SearchResultItemEdge {
  node: SearchResultItem!
}

type SearchResultItemConnection {
  edges: [SearchResultItemEdge]
}

input SelectRepositoryInput {
  clientMutationId: String
  repositoryId: ID
}

type SelectRepositoryPayload {
  repository: Repository
  viewer: User!
}

type Synonym {
  locale: LocaleIdentifier!
  name: String!
}

type Topic implements ResourceIdentifiable & Namespaceable {
  activity(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): ActivityLineItemConnection!
  availableParentTopics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  childTopics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  createdAt: DateTime!
  description: String
  displayName(
    timeRange: Boolean,
  ): String!
  id: ID!
  links(
    first: Int,
    after: String,
    last: Int,
    before: String,
    searchString: String,
    reviewed: Boolean,
    descendants: Boolean,
  ): LinkConnection!
  loading: Boolean!
  name: String!
  newlyAdded: Boolean!
  organization: Organization!
  parentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  repository: Repository!
  resourcePath: String!
  search(
    searchString: String!,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): SearchResultItemConnection!
  synonyms: [Synonym!]!
  timeRange: TimeRange
  updatedAt: DateTime!
  viewerCanDeleteSynonyms: Boolean!
  viewerCanUpdate: Boolean!
}

type TimeRange {
  startsAt: DateTime!
  endsAt: DateTime
  prefixFormat: TimeRangePrefixFormat!
}

type TopicEdge {
  cursor: String!
  node: Topic!
}

type TimeRangeEdge {
  cursor: String!
  node: TimeRange!
}

type TopicConnection {
  edges: [TopicEdge]
  pageInfo: PageInfo!
}

type User {
  avatarUrl: String!
  createdAt: DateTime!
  defaultRepository: Repository
  id: ID
  isGuest: Boolean!
  name: String!
  primaryEmail: String!
  repositories(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): RepositoryConnection!
  selectedRepository: Repository
  updatedAt: DateTime!
}

type UserEdge {
  cursor: String!
  node: User!
}

type Session {
  id: ID!
}

type SessionEdge {
  cursor: String!
  node: Session!
}

input SynonymInput {
  name: String!
  locale: String!
}

input UpdateSynonymsInput {
  clientMutationId: String
  synonyms: [SynonymInput!]!
  topicId: ID!
}

type UpdateSynonymsPayload {
  alerts: [Alert!]!
  clientMutationId: String
  topic: Topic
}

input UpdateTopicInput {
  clientMutationId: String
  description: String
  id: ID!
  name: String!
  topicIds: [ID!]
}

type UpdateTopicPayload {
  alerts: [Alert!]!
  topic: Topic!
}

input UpdateLinkTopicsInput {
  clientMutationId: String
  linkId: ID!
  parentTopicIds: [ID!]
}

type UpdateLinkTopicsPayload {
  link: Link!
}

input UpdateTopicParentTopicsInput {
  clientMutationId: String
  topicId: ID!
  parentTopicIds: [ID!]
}

type UpdateTopicParentTopicsPayload implements Alertable {
  alerts: [Alert!]!
  topic: Topic!
}

input UpsertLinkInput {
  addParentTopicIds: [String!]
  clientMutationId: String
  organizationLogin: String!
  repositoryName: String!
  title: String
  url: String!
}

type UpsertLinkPayload implements Alertable {
  alerts: [Alert!]!
  linkEdge: LinkEdge
}

input UpsertTopicInput {
  clientMutationId: String
  description: String
  name: String!
  organizationLogin: String!
  repositoryName: String!
  topicIds: [String!]
}

input UpsertTopicTimeRangeInput {
  clientMutationId: String
  topicId: ID!
  startsAt: DateTime!
  endsAt: DateTime
  prefixFormat: TimeRangePrefixFormat!
}

type UpsertTopicPayload implements Alertable {
  alerts: [Alert!]!
  topicEdge: TopicEdge
}

type UpsertTopicTimeRangePayload implements Alertable {
  alerts: [Alert!]!
  timeRangeEdge: TimeRangeEdge
  topic: Topic!
}

type View {
  activity(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): ActivityLineItemConnection!
  currentRepository: Repository
  defaultOrganization: Organization!
  link(id: ID!): Link
  linkCount: Int!
  links(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String,
    reviewed: Boolean,
  ): LinkConnection!
  queryInfo: QueryInfo!
  searchString: String
  topic(id: ID!): Topic
  topicCount: Int!
  topicGraph: String
  topics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  viewer: User!
}
