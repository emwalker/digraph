// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserLinkReview is an object representing the database table.
type UserLinkReview struct {
	UserID     string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	LinkID     string    `boil:"link_id" json:"link_id" toml:"link_id" yaml:"link_id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ReviewedAt null.Time `boil:"reviewed_at" json:"reviewed_at,omitempty" toml:"reviewed_at" yaml:"reviewed_at,omitempty"`

	R *userLinkReviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLinkReviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLinkReviewColumns = struct {
	UserID     string
	LinkID     string
	CreatedAt  string
	UpdatedAt  string
	ReviewedAt string
}{
	UserID:     "user_id",
	LinkID:     "link_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	ReviewedAt: "reviewed_at",
}

var UserLinkReviewTableColumns = struct {
	UserID     string
	LinkID     string
	CreatedAt  string
	UpdatedAt  string
	ReviewedAt string
}{
	UserID:     "user_link_reviews.user_id",
	LinkID:     "user_link_reviews.link_id",
	CreatedAt:  "user_link_reviews.created_at",
	UpdatedAt:  "user_link_reviews.updated_at",
	ReviewedAt: "user_link_reviews.reviewed_at",
}

// Generated where

var UserLinkReviewWhere = struct {
	UserID     whereHelperstring
	LinkID     whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	ReviewedAt whereHelpernull_Time
}{
	UserID:     whereHelperstring{field: "\"user_link_reviews\".\"user_id\""},
	LinkID:     whereHelperstring{field: "\"user_link_reviews\".\"link_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"user_link_reviews\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"user_link_reviews\".\"updated_at\""},
	ReviewedAt: whereHelpernull_Time{field: "\"user_link_reviews\".\"reviewed_at\""},
}

// UserLinkReviewRels is where relationship names are stored.
var UserLinkReviewRels = struct {
	Link string
	User string
}{
	Link: "Link",
	User: "User",
}

// userLinkReviewR is where relationships are stored.
type userLinkReviewR struct {
	Link *Link `boil:"Link" json:"Link" toml:"Link" yaml:"Link"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userLinkReviewR) NewStruct() *userLinkReviewR {
	return &userLinkReviewR{}
}

// userLinkReviewL is where Load methods for each relationship are stored.
type userLinkReviewL struct{}

var (
	userLinkReviewAllColumns            = []string{"user_id", "link_id", "created_at", "updated_at", "reviewed_at"}
	userLinkReviewColumnsWithoutDefault = []string{"user_id", "link_id"}
	userLinkReviewColumnsWithDefault    = []string{"created_at", "updated_at", "reviewed_at"}
	userLinkReviewPrimaryKeyColumns     = []string{"user_id", "link_id"}
	userLinkReviewGeneratedColumns      = []string{}
)

type (
	// UserLinkReviewSlice is an alias for a slice of pointers to UserLinkReview.
	// This should almost always be used instead of []UserLinkReview.
	UserLinkReviewSlice []*UserLinkReview

	userLinkReviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLinkReviewType                 = reflect.TypeOf(&UserLinkReview{})
	userLinkReviewMapping              = queries.MakeStructMapping(userLinkReviewType)
	userLinkReviewPrimaryKeyMapping, _ = queries.BindMapping(userLinkReviewType, userLinkReviewMapping, userLinkReviewPrimaryKeyColumns)
	userLinkReviewInsertCacheMut       sync.RWMutex
	userLinkReviewInsertCache          = make(map[string]insertCache)
	userLinkReviewUpdateCacheMut       sync.RWMutex
	userLinkReviewUpdateCache          = make(map[string]updateCache)
	userLinkReviewUpsertCacheMut       sync.RWMutex
	userLinkReviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userLinkReview record from the query.
func (q userLinkReviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserLinkReview, error) {
	o := &UserLinkReview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_link_reviews")
	}

	return o, nil
}

// All returns all UserLinkReview records from the query.
func (q userLinkReviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserLinkReviewSlice, error) {
	var o []*UserLinkReview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserLinkReview slice")
	}

	return o, nil
}

// Count returns the count of all UserLinkReview records in the query.
func (q userLinkReviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_link_reviews rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userLinkReviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_link_reviews exists")
	}

	return count > 0, nil
}

// Link pointed to by the foreign key.
func (o *UserLinkReview) Link(mods ...qm.QueryMod) linkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LinkID),
	}

	queryMods = append(queryMods, mods...)

	return Links(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserLinkReview) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadLink allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLinkReviewL) LoadLink(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLinkReview interface{}, mods queries.Applicator) error {
	var slice []*UserLinkReview
	var object *UserLinkReview

	if singular {
		object = maybeUserLinkReview.(*UserLinkReview)
	} else {
		slice = *maybeUserLinkReview.(*[]*UserLinkReview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userLinkReviewR{}
		}
		args = append(args, object.LinkID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLinkReviewR{}
			}

			for _, a := range args {
				if a == obj.LinkID {
					continue Outer
				}
			}

			args = append(args, obj.LinkID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`links`),
		qm.WhereIn(`links.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Link")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Link")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Link = foreign
		if foreign.R == nil {
			foreign.R = &linkR{}
		}
		foreign.R.UserLinkReviews = append(foreign.R.UserLinkReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LinkID == foreign.ID {
				local.R.Link = foreign
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.UserLinkReviews = append(foreign.R.UserLinkReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLinkReviewL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLinkReview interface{}, mods queries.Applicator) error {
	var slice []*UserLinkReview
	var object *UserLinkReview

	if singular {
		object = maybeUserLinkReview.(*UserLinkReview)
	} else {
		slice = *maybeUserLinkReview.(*[]*UserLinkReview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userLinkReviewR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLinkReviewR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserLinkReviews = append(foreign.R.UserLinkReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserLinkReviews = append(foreign.R.UserLinkReviews, local)
				break
			}
		}
	}

	return nil
}

// SetLink of the userLinkReview to the related item.
// Sets o.R.Link to related.
// Adds o to related.R.UserLinkReviews.
func (o *UserLinkReview) SetLink(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Link) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_link_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"link_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLinkReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.LinkID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LinkID = related.ID
	if o.R == nil {
		o.R = &userLinkReviewR{
			Link: related,
		}
	} else {
		o.R.Link = related
	}

	if related.R == nil {
		related.R = &linkR{
			UserLinkReviews: UserLinkReviewSlice{o},
		}
	} else {
		related.R.UserLinkReviews = append(related.R.UserLinkReviews, o)
	}

	return nil
}

// SetUser of the userLinkReview to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserLinkReviews.
func (o *UserLinkReview) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_link_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLinkReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.LinkID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userLinkReviewR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserLinkReviews: UserLinkReviewSlice{o},
		}
	} else {
		related.R.UserLinkReviews = append(related.R.UserLinkReviews, o)
	}

	return nil
}

// UserLinkReviews retrieves all the records using an executor.
func UserLinkReviews(mods ...qm.QueryMod) userLinkReviewQuery {
	mods = append(mods, qm.From("\"user_link_reviews\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_link_reviews\".*"})
	}

	return userLinkReviewQuery{q}
}

// FindUserLinkReview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLinkReview(ctx context.Context, exec boil.ContextExecutor, userID string, linkID string, selectCols ...string) (*UserLinkReview, error) {
	userLinkReviewObj := &UserLinkReview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_link_reviews\" where \"user_id\"=$1 AND \"link_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, linkID)

	err := q.Bind(ctx, exec, userLinkReviewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_link_reviews")
	}

	return userLinkReviewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserLinkReview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_link_reviews provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userLinkReviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userLinkReviewInsertCacheMut.RLock()
	cache, cached := userLinkReviewInsertCache[key]
	userLinkReviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userLinkReviewAllColumns,
			userLinkReviewColumnsWithDefault,
			userLinkReviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userLinkReviewType, userLinkReviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLinkReviewType, userLinkReviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_link_reviews\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_link_reviews\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_link_reviews")
	}

	if !cached {
		userLinkReviewInsertCacheMut.Lock()
		userLinkReviewInsertCache[key] = cache
		userLinkReviewInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserLinkReview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserLinkReview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	userLinkReviewUpdateCacheMut.RLock()
	cache, cached := userLinkReviewUpdateCache[key]
	userLinkReviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userLinkReviewAllColumns,
			userLinkReviewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_link_reviews, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_link_reviews\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userLinkReviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLinkReviewType, userLinkReviewMapping, append(wl, userLinkReviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_link_reviews row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_link_reviews")
	}

	if !cached {
		userLinkReviewUpdateCacheMut.Lock()
		userLinkReviewUpdateCache[key] = cache
		userLinkReviewUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userLinkReviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_link_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_link_reviews")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLinkReviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_link_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userLinkReviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userLinkReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userLinkReview")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserLinkReview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_link_reviews provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(userLinkReviewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLinkReviewUpsertCacheMut.RLock()
	cache, cached := userLinkReviewUpsertCache[key]
	userLinkReviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userLinkReviewAllColumns,
			userLinkReviewColumnsWithDefault,
			userLinkReviewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userLinkReviewAllColumns,
			userLinkReviewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_link_reviews, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userLinkReviewPrimaryKeyColumns))
			copy(conflict, userLinkReviewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_link_reviews\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userLinkReviewType, userLinkReviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLinkReviewType, userLinkReviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_link_reviews")
	}

	if !cached {
		userLinkReviewUpsertCacheMut.Lock()
		userLinkReviewUpsertCache[key] = cache
		userLinkReviewUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserLinkReview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLinkReview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserLinkReview provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLinkReviewPrimaryKeyMapping)
	sql := "DELETE FROM \"user_link_reviews\" WHERE \"user_id\"=$1 AND \"link_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_link_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_link_reviews")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userLinkReviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userLinkReviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_link_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_link_reviews")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLinkReviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_link_reviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLinkReviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userLinkReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_link_reviews")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLinkReview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserLinkReview(ctx, exec, o.UserID, o.LinkID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLinkReviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserLinkReviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_link_reviews\".* FROM \"user_link_reviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLinkReviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserLinkReviewSlice")
	}

	*o = slice

	return nil
}

// UserLinkReviewExists checks if the UserLinkReview row exists.
func UserLinkReviewExists(ctx context.Context, exec boil.ContextExecutor, userID string, linkID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_link_reviews\" where \"user_id\"=$1 AND \"link_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, linkID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, linkID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_link_reviews exists")
	}

	return exists, nil
}
