// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoogleAccount is an object representing the database table.
type GoogleAccount struct {
	ID           string `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ProfileID    string `boil:"profile_id" json:"profile_id" toml:"profile_id" yaml:"profile_id"`
	Name         string `boil:"name" json:"name" toml:"name" yaml:"name"`
	PrimaryEmail string `boil:"primary_email" json:"primary_email" toml:"primary_email" yaml:"primary_email"`
	AvatarURL    string `boil:"avatar_url" json:"avatar_url" toml:"avatar_url" yaml:"avatar_url"`

	R *googleAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L googleAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoogleAccountColumns = struct {
	ID           string
	UserID       string
	ProfileID    string
	Name         string
	PrimaryEmail string
	AvatarURL    string
}{
	ID:           "id",
	UserID:       "user_id",
	ProfileID:    "profile_id",
	Name:         "name",
	PrimaryEmail: "primary_email",
	AvatarURL:    "avatar_url",
}

var GoogleAccountTableColumns = struct {
	ID           string
	UserID       string
	ProfileID    string
	Name         string
	PrimaryEmail string
	AvatarURL    string
}{
	ID:           "google_accounts.id",
	UserID:       "google_accounts.user_id",
	ProfileID:    "google_accounts.profile_id",
	Name:         "google_accounts.name",
	PrimaryEmail: "google_accounts.primary_email",
	AvatarURL:    "google_accounts.avatar_url",
}

// Generated where

var GoogleAccountWhere = struct {
	ID           whereHelperstring
	UserID       whereHelperstring
	ProfileID    whereHelperstring
	Name         whereHelperstring
	PrimaryEmail whereHelperstring
	AvatarURL    whereHelperstring
}{
	ID:           whereHelperstring{field: "\"google_accounts\".\"id\""},
	UserID:       whereHelperstring{field: "\"google_accounts\".\"user_id\""},
	ProfileID:    whereHelperstring{field: "\"google_accounts\".\"profile_id\""},
	Name:         whereHelperstring{field: "\"google_accounts\".\"name\""},
	PrimaryEmail: whereHelperstring{field: "\"google_accounts\".\"primary_email\""},
	AvatarURL:    whereHelperstring{field: "\"google_accounts\".\"avatar_url\""},
}

// GoogleAccountRels is where relationship names are stored.
var GoogleAccountRels = struct {
	User string
}{
	User: "User",
}

// googleAccountR is where relationships are stored.
type googleAccountR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*googleAccountR) NewStruct() *googleAccountR {
	return &googleAccountR{}
}

func (r *googleAccountR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// googleAccountL is where Load methods for each relationship are stored.
type googleAccountL struct{}

var (
	googleAccountAllColumns            = []string{"id", "user_id", "profile_id", "name", "primary_email", "avatar_url"}
	googleAccountColumnsWithoutDefault = []string{"user_id", "profile_id", "name", "primary_email", "avatar_url"}
	googleAccountColumnsWithDefault    = []string{"id"}
	googleAccountPrimaryKeyColumns     = []string{"id"}
	googleAccountGeneratedColumns      = []string{}
)

type (
	// GoogleAccountSlice is an alias for a slice of pointers to GoogleAccount.
	// This should almost always be used instead of []GoogleAccount.
	GoogleAccountSlice []*GoogleAccount

	googleAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	googleAccountType                 = reflect.TypeOf(&GoogleAccount{})
	googleAccountMapping              = queries.MakeStructMapping(googleAccountType)
	googleAccountPrimaryKeyMapping, _ = queries.BindMapping(googleAccountType, googleAccountMapping, googleAccountPrimaryKeyColumns)
	googleAccountInsertCacheMut       sync.RWMutex
	googleAccountInsertCache          = make(map[string]insertCache)
	googleAccountUpdateCacheMut       sync.RWMutex
	googleAccountUpdateCache          = make(map[string]updateCache)
	googleAccountUpsertCacheMut       sync.RWMutex
	googleAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single googleAccount record from the query.
func (q googleAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoogleAccount, error) {
	o := &GoogleAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for google_accounts")
	}

	return o, nil
}

// All returns all GoogleAccount records from the query.
func (q googleAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoogleAccountSlice, error) {
	var o []*GoogleAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GoogleAccount slice")
	}

	return o, nil
}

// Count returns the count of all GoogleAccount records in the query.
func (q googleAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count google_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q googleAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if google_accounts exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *GoogleAccount) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (googleAccountL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoogleAccount interface{}, mods queries.Applicator) error {
	var slice []*GoogleAccount
	var object *GoogleAccount

	if singular {
		object = maybeGoogleAccount.(*GoogleAccount)
	} else {
		slice = *maybeGoogleAccount.(*[]*GoogleAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &googleAccountR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googleAccountR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.GoogleAccounts = append(foreign.R.GoogleAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.GoogleAccounts = append(foreign.R.GoogleAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the googleAccount to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GoogleAccounts.
func (o *GoogleAccount) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"google_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, googleAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &googleAccountR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			GoogleAccounts: GoogleAccountSlice{o},
		}
	} else {
		related.R.GoogleAccounts = append(related.R.GoogleAccounts, o)
	}

	return nil
}

// GoogleAccounts retrieves all the records using an executor.
func GoogleAccounts(mods ...qm.QueryMod) googleAccountQuery {
	mods = append(mods, qm.From("\"google_accounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"google_accounts\".*"})
	}

	return googleAccountQuery{q}
}

// FindGoogleAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoogleAccount(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GoogleAccount, error) {
	googleAccountObj := &GoogleAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"google_accounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, googleAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from google_accounts")
	}

	return googleAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoogleAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no google_accounts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(googleAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	googleAccountInsertCacheMut.RLock()
	cache, cached := googleAccountInsertCache[key]
	googleAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			googleAccountAllColumns,
			googleAccountColumnsWithDefault,
			googleAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(googleAccountType, googleAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(googleAccountType, googleAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"google_accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"google_accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into google_accounts")
	}

	if !cached {
		googleAccountInsertCacheMut.Lock()
		googleAccountInsertCache[key] = cache
		googleAccountInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GoogleAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoogleAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	googleAccountUpdateCacheMut.RLock()
	cache, cached := googleAccountUpdateCache[key]
	googleAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			googleAccountAllColumns,
			googleAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update google_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"google_accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, googleAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(googleAccountType, googleAccountMapping, append(wl, googleAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update google_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for google_accounts")
	}

	if !cached {
		googleAccountUpdateCacheMut.Lock()
		googleAccountUpdateCache[key] = cache
		googleAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q googleAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for google_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for google_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoogleAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"google_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, googleAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in googleAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all googleAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoogleAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no google_accounts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(googleAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	googleAccountUpsertCacheMut.RLock()
	cache, cached := googleAccountUpsertCache[key]
	googleAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			googleAccountAllColumns,
			googleAccountColumnsWithDefault,
			googleAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			googleAccountAllColumns,
			googleAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert google_accounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(googleAccountPrimaryKeyColumns))
			copy(conflict, googleAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"google_accounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(googleAccountType, googleAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(googleAccountType, googleAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert google_accounts")
	}

	if !cached {
		googleAccountUpsertCacheMut.Lock()
		googleAccountUpsertCache[key] = cache
		googleAccountUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GoogleAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoogleAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GoogleAccount provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), googleAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"google_accounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from google_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for google_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q googleAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no googleAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from google_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for google_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoogleAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"google_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, googleAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from googleAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for google_accounts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoogleAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoogleAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoogleAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoogleAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"google_accounts\".* FROM \"google_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, googleAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoogleAccountSlice")
	}

	*o = slice

	return nil
}

// GoogleAccountExists checks if the GoogleAccount row exists.
func GoogleAccountExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"google_accounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if google_accounts exists")
	}

	return exists, nil
}
