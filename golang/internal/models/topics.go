// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Topic is an object representing the database table.
type Topic struct {
	OrganizationID string      `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description    null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	RepositoryID   string      `boil:"repository_id" json:"repository_id" toml:"repository_id" yaml:"repository_id"`
	Root           bool        `boil:"root" json:"root" toml:"root" yaml:"root"`
	Synonyms       types.JSON  `boil:"synonyms" json:"synonyms" toml:"synonyms" yaml:"synonyms"`
	TimerangeID    null.String `boil:"timerange_id" json:"timerange_id,omitempty" toml:"timerange_id" yaml:"timerange_id,omitempty"`

	R *topicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L topicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TopicColumns = struct {
	OrganizationID string
	ID             string
	Name           string
	Description    string
	CreatedAt      string
	UpdatedAt      string
	RepositoryID   string
	Root           string
	Synonyms       string
	TimerangeID    string
}{
	OrganizationID: "organization_id",
	ID:             "id",
	Name:           "name",
	Description:    "description",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	RepositoryID:   "repository_id",
	Root:           "root",
	Synonyms:       "synonyms",
	TimerangeID:    "timerange_id",
}

var TopicTableColumns = struct {
	OrganizationID string
	ID             string
	Name           string
	Description    string
	CreatedAt      string
	UpdatedAt      string
	RepositoryID   string
	Root           string
	Synonyms       string
	TimerangeID    string
}{
	OrganizationID: "topics.organization_id",
	ID:             "topics.id",
	Name:           "topics.name",
	Description:    "topics.description",
	CreatedAt:      "topics.created_at",
	UpdatedAt:      "topics.updated_at",
	RepositoryID:   "topics.repository_id",
	Root:           "topics.root",
	Synonyms:       "topics.synonyms",
	TimerangeID:    "topics.timerange_id",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TopicWhere = struct {
	OrganizationID whereHelperstring
	ID             whereHelperstring
	Name           whereHelperstring
	Description    whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	RepositoryID   whereHelperstring
	Root           whereHelperbool
	Synonyms       whereHelpertypes_JSON
	TimerangeID    whereHelpernull_String
}{
	OrganizationID: whereHelperstring{field: "\"topics\".\"organization_id\""},
	ID:             whereHelperstring{field: "\"topics\".\"id\""},
	Name:           whereHelperstring{field: "\"topics\".\"name\""},
	Description:    whereHelpernull_String{field: "\"topics\".\"description\""},
	CreatedAt:      whereHelpertime_Time{field: "\"topics\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"topics\".\"updated_at\""},
	RepositoryID:   whereHelperstring{field: "\"topics\".\"repository_id\""},
	Root:           whereHelperbool{field: "\"topics\".\"root\""},
	Synonyms:       whereHelpertypes_JSON{field: "\"topics\".\"synonyms\""},
	TimerangeID:    whereHelpernull_String{field: "\"topics\".\"timerange_id\""},
}

// TopicRels is where relationship names are stored.
var TopicRels = struct {
	Organization                  string
	Repository                    string
	Timerange                     string
	ChildLinks                    string
	ParentLinkTransitiveClosures  string
	ParentTopics                  string
	ChildTopics                   string
	ChildTopicTransitiveClosures  string
	ParentTopicTransitiveClosures string
	UserLinkTopics                string
}{
	Organization:                  "Organization",
	Repository:                    "Repository",
	Timerange:                     "Timerange",
	ChildLinks:                    "ChildLinks",
	ParentLinkTransitiveClosures:  "ParentLinkTransitiveClosures",
	ParentTopics:                  "ParentTopics",
	ChildTopics:                   "ChildTopics",
	ChildTopicTransitiveClosures:  "ChildTopicTransitiveClosures",
	ParentTopicTransitiveClosures: "ParentTopicTransitiveClosures",
	UserLinkTopics:                "UserLinkTopics",
}

// topicR is where relationships are stored.
type topicR struct {
	Organization                  *Organization               `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	Repository                    *Repository                 `boil:"Repository" json:"Repository" toml:"Repository" yaml:"Repository"`
	Timerange                     *Timerange                  `boil:"Timerange" json:"Timerange" toml:"Timerange" yaml:"Timerange"`
	ChildLinks                    LinkSlice                   `boil:"ChildLinks" json:"ChildLinks" toml:"ChildLinks" yaml:"ChildLinks"`
	ParentLinkTransitiveClosures  LinkTransitiveClosureSlice  `boil:"ParentLinkTransitiveClosures" json:"ParentLinkTransitiveClosures" toml:"ParentLinkTransitiveClosures" yaml:"ParentLinkTransitiveClosures"`
	ParentTopics                  TopicSlice                  `boil:"ParentTopics" json:"ParentTopics" toml:"ParentTopics" yaml:"ParentTopics"`
	ChildTopics                   TopicSlice                  `boil:"ChildTopics" json:"ChildTopics" toml:"ChildTopics" yaml:"ChildTopics"`
	ChildTopicTransitiveClosures  TopicTransitiveClosureSlice `boil:"ChildTopicTransitiveClosures" json:"ChildTopicTransitiveClosures" toml:"ChildTopicTransitiveClosures" yaml:"ChildTopicTransitiveClosures"`
	ParentTopicTransitiveClosures TopicTransitiveClosureSlice `boil:"ParentTopicTransitiveClosures" json:"ParentTopicTransitiveClosures" toml:"ParentTopicTransitiveClosures" yaml:"ParentTopicTransitiveClosures"`
	UserLinkTopics                UserLinkTopicSlice          `boil:"UserLinkTopics" json:"UserLinkTopics" toml:"UserLinkTopics" yaml:"UserLinkTopics"`
}

// NewStruct creates a new relationship struct
func (*topicR) NewStruct() *topicR {
	return &topicR{}
}

func (r *topicR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *topicR) GetRepository() *Repository {
	if r == nil {
		return nil
	}
	return r.Repository
}

func (r *topicR) GetTimerange() *Timerange {
	if r == nil {
		return nil
	}
	return r.Timerange
}

func (r *topicR) GetChildLinks() LinkSlice {
	if r == nil {
		return nil
	}
	return r.ChildLinks
}

func (r *topicR) GetParentLinkTransitiveClosures() LinkTransitiveClosureSlice {
	if r == nil {
		return nil
	}
	return r.ParentLinkTransitiveClosures
}

func (r *topicR) GetParentTopics() TopicSlice {
	if r == nil {
		return nil
	}
	return r.ParentTopics
}

func (r *topicR) GetChildTopics() TopicSlice {
	if r == nil {
		return nil
	}
	return r.ChildTopics
}

func (r *topicR) GetChildTopicTransitiveClosures() TopicTransitiveClosureSlice {
	if r == nil {
		return nil
	}
	return r.ChildTopicTransitiveClosures
}

func (r *topicR) GetParentTopicTransitiveClosures() TopicTransitiveClosureSlice {
	if r == nil {
		return nil
	}
	return r.ParentTopicTransitiveClosures
}

func (r *topicR) GetUserLinkTopics() UserLinkTopicSlice {
	if r == nil {
		return nil
	}
	return r.UserLinkTopics
}

// topicL is where Load methods for each relationship are stored.
type topicL struct{}

var (
	topicAllColumns            = []string{"organization_id", "id", "name", "description", "created_at", "updated_at", "repository_id", "root", "synonyms", "timerange_id"}
	topicColumnsWithoutDefault = []string{"organization_id", "name", "repository_id"}
	topicColumnsWithDefault    = []string{"id", "description", "created_at", "updated_at", "root", "synonyms", "timerange_id"}
	topicPrimaryKeyColumns     = []string{"id"}
	topicGeneratedColumns      = []string{}
)

type (
	// TopicSlice is an alias for a slice of pointers to Topic.
	// This should almost always be used instead of []Topic.
	TopicSlice []*Topic

	topicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	topicType                 = reflect.TypeOf(&Topic{})
	topicMapping              = queries.MakeStructMapping(topicType)
	topicPrimaryKeyMapping, _ = queries.BindMapping(topicType, topicMapping, topicPrimaryKeyColumns)
	topicInsertCacheMut       sync.RWMutex
	topicInsertCache          = make(map[string]insertCache)
	topicUpdateCacheMut       sync.RWMutex
	topicUpdateCache          = make(map[string]updateCache)
	topicUpsertCacheMut       sync.RWMutex
	topicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single topic record from the query.
func (q topicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Topic, error) {
	o := &Topic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for topics")
	}

	return o, nil
}

// All returns all Topic records from the query.
func (q topicQuery) All(ctx context.Context, exec boil.ContextExecutor) (TopicSlice, error) {
	var o []*Topic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Topic slice")
	}

	return o, nil
}

// Count returns the count of all Topic records in the query.
func (q topicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count topics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q topicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if topics exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *Topic) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// Repository pointed to by the foreign key.
func (o *Topic) Repository(mods ...qm.QueryMod) repositoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RepositoryID),
	}

	queryMods = append(queryMods, mods...)

	return Repositories(queryMods...)
}

// Timerange pointed to by the foreign key.
func (o *Topic) Timerange(mods ...qm.QueryMod) timerangeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TimerangeID),
	}

	queryMods = append(queryMods, mods...)

	return Timeranges(queryMods...)
}

// ChildLinks retrieves all the link's Links with an executor via id column.
func (o *Topic) ChildLinks(mods ...qm.QueryMod) linkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"link_topics\" on \"links\".\"id\" = \"link_topics\".\"child_id\""),
		qm.Where("\"link_topics\".\"parent_id\"=?", o.ID),
	)

	return Links(queryMods...)
}

// ParentLinkTransitiveClosures retrieves all the link_transitive_closure's LinkTransitiveClosures with an executor via parent_id column.
func (o *Topic) ParentLinkTransitiveClosures(mods ...qm.QueryMod) linkTransitiveClosureQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"link_transitive_closure\".\"parent_id\"=?", o.ID),
	)

	return LinkTransitiveClosures(queryMods...)
}

// ParentTopics retrieves all the topic's Topics with an executor via id column.
func (o *Topic) ParentTopics(mods ...qm.QueryMod) topicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"topic_topics\" on \"topics\".\"id\" = \"topic_topics\".\"parent_id\""),
		qm.Where("\"topic_topics\".\"child_id\"=?", o.ID),
	)

	return Topics(queryMods...)
}

// ChildTopics retrieves all the topic's Topics with an executor via id column.
func (o *Topic) ChildTopics(mods ...qm.QueryMod) topicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"topic_topics\" on \"topics\".\"id\" = \"topic_topics\".\"child_id\""),
		qm.Where("\"topic_topics\".\"parent_id\"=?", o.ID),
	)

	return Topics(queryMods...)
}

// ChildTopicTransitiveClosures retrieves all the topic_transitive_closure's TopicTransitiveClosures with an executor via child_id column.
func (o *Topic) ChildTopicTransitiveClosures(mods ...qm.QueryMod) topicTransitiveClosureQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"topic_transitive_closure\".\"child_id\"=?", o.ID),
	)

	return TopicTransitiveClosures(queryMods...)
}

// ParentTopicTransitiveClosures retrieves all the topic_transitive_closure's TopicTransitiveClosures with an executor via parent_id column.
func (o *Topic) ParentTopicTransitiveClosures(mods ...qm.QueryMod) topicTransitiveClosureQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"topic_transitive_closure\".\"parent_id\"=?", o.ID),
	)

	return TopicTransitiveClosures(queryMods...)
}

// UserLinkTopics retrieves all the user_link_topic's UserLinkTopics with an executor.
func (o *Topic) UserLinkTopics(mods ...qm.QueryMod) userLinkTopicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_link_topics\".\"topic_id\"=?", o.ID),
	)

	return UserLinkTopics(queryMods...)
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Topics = append(foreign.R.Topics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Topics = append(foreign.R.Topics, local)
				break
			}
		}
	}

	return nil
}

// LoadRepository allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicL) LoadRepository(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.RepositoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.RepositoryID {
					continue Outer
				}
			}

			args = append(args, obj.RepositoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repositories`),
		qm.WhereIn(`repositories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Repository")
	}

	var resultSlice []*Repository
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Repository")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for repositories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repositories")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Repository = foreign
		if foreign.R == nil {
			foreign.R = &repositoryR{}
		}
		foreign.R.Topics = append(foreign.R.Topics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RepositoryID == foreign.ID {
				local.R.Repository = foreign
				if foreign.R == nil {
					foreign.R = &repositoryR{}
				}
				foreign.R.Topics = append(foreign.R.Topics, local)
				break
			}
		}
	}

	return nil
}

// LoadTimerange allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicL) LoadTimerange(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		if !queries.IsNil(object.TimerangeID) {
			args = append(args, object.TimerangeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimerangeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TimerangeID) {
				args = append(args, obj.TimerangeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`timeranges`),
		qm.WhereIn(`timeranges.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Timerange")
	}

	var resultSlice []*Timerange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Timerange")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for timeranges")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for timeranges")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Timerange = foreign
		if foreign.R == nil {
			foreign.R = &timerangeR{}
		}
		foreign.R.Topics = append(foreign.R.Topics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TimerangeID, foreign.ID) {
				local.R.Timerange = foreign
				if foreign.R == nil {
					foreign.R = &timerangeR{}
				}
				foreign.R.Topics = append(foreign.R.Topics, local)
				break
			}
		}
	}

	return nil
}

// LoadChildLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadChildLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"links\".\"organization_id\", \"links\".\"id\", \"links\".\"url\", \"links\".\"title\", \"links\".\"sha1\", \"links\".\"created_at\", \"links\".\"updated_at\", \"links\".\"repository_id\", \"a\".\"parent_id\""),
		qm.From("\"links\""),
		qm.InnerJoin("\"link_topics\" as \"a\" on \"links\".\"id\" = \"a\".\"child_id\""),
		qm.WhereIn("\"a\".\"parent_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load links")
	}

	var resultSlice []*Link

	var localJoinCols []string
	for results.Next() {
		one := new(Link)
		var localJoinCol string

		err = results.Scan(&one.OrganizationID, &one.ID, &one.URL, &one.Title, &one.Sha1, &one.CreatedAt, &one.UpdatedAt, &one.RepositoryID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for links")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice links")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if singular {
		object.R.ChildLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &linkR{}
			}
			foreign.R.ParentTopics = append(foreign.R.ParentTopics, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ChildLinks = append(local.R.ChildLinks, foreign)
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.ParentTopics = append(foreign.R.ParentTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadParentLinkTransitiveClosures allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadParentLinkTransitiveClosures(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`link_transitive_closure`),
		qm.WhereIn(`link_transitive_closure.parent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load link_transitive_closure")
	}

	var resultSlice []*LinkTransitiveClosure
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice link_transitive_closure")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on link_transitive_closure")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for link_transitive_closure")
	}

	if singular {
		object.R.ParentLinkTransitiveClosures = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &linkTransitiveClosureR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ParentID {
				local.R.ParentLinkTransitiveClosures = append(local.R.ParentLinkTransitiveClosures, foreign)
				if foreign.R == nil {
					foreign.R = &linkTransitiveClosureR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadParentTopics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadParentTopics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"topics\".\"organization_id\", \"topics\".\"id\", \"topics\".\"name\", \"topics\".\"description\", \"topics\".\"created_at\", \"topics\".\"updated_at\", \"topics\".\"repository_id\", \"topics\".\"root\", \"topics\".\"synonyms\", \"topics\".\"timerange_id\", \"a\".\"child_id\""),
		qm.From("\"topics\""),
		qm.InnerJoin("\"topic_topics\" as \"a\" on \"topics\".\"id\" = \"a\".\"parent_id\""),
		qm.WhereIn("\"a\".\"child_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load topics")
	}

	var resultSlice []*Topic

	var localJoinCols []string
	for results.Next() {
		one := new(Topic)
		var localJoinCol string

		err = results.Scan(&one.OrganizationID, &one.ID, &one.Name, &one.Description, &one.CreatedAt, &one.UpdatedAt, &one.RepositoryID, &one.Root, &one.Synonyms, &one.TimerangeID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for topics")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice topics")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if singular {
		object.R.ParentTopics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &topicR{}
			}
			foreign.R.ChildTopics = append(foreign.R.ChildTopics, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ParentTopics = append(local.R.ParentTopics, foreign)
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.ChildTopics = append(foreign.R.ChildTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadChildTopics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadChildTopics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"topics\".\"organization_id\", \"topics\".\"id\", \"topics\".\"name\", \"topics\".\"description\", \"topics\".\"created_at\", \"topics\".\"updated_at\", \"topics\".\"repository_id\", \"topics\".\"root\", \"topics\".\"synonyms\", \"topics\".\"timerange_id\", \"a\".\"parent_id\""),
		qm.From("\"topics\""),
		qm.InnerJoin("\"topic_topics\" as \"a\" on \"topics\".\"id\" = \"a\".\"child_id\""),
		qm.WhereIn("\"a\".\"parent_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load topics")
	}

	var resultSlice []*Topic

	var localJoinCols []string
	for results.Next() {
		one := new(Topic)
		var localJoinCol string

		err = results.Scan(&one.OrganizationID, &one.ID, &one.Name, &one.Description, &one.CreatedAt, &one.UpdatedAt, &one.RepositoryID, &one.Root, &one.Synonyms, &one.TimerangeID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for topics")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice topics")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if singular {
		object.R.ChildTopics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &topicR{}
			}
			foreign.R.ParentTopics = append(foreign.R.ParentTopics, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ChildTopics = append(local.R.ChildTopics, foreign)
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.ParentTopics = append(foreign.R.ParentTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadChildTopicTransitiveClosures allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadChildTopicTransitiveClosures(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`topic_transitive_closure`),
		qm.WhereIn(`topic_transitive_closure.child_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load topic_transitive_closure")
	}

	var resultSlice []*TopicTransitiveClosure
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice topic_transitive_closure")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on topic_transitive_closure")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topic_transitive_closure")
	}

	if singular {
		object.R.ChildTopicTransitiveClosures = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &topicTransitiveClosureR{}
			}
			foreign.R.Child = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChildID {
				local.R.ChildTopicTransitiveClosures = append(local.R.ChildTopicTransitiveClosures, foreign)
				if foreign.R == nil {
					foreign.R = &topicTransitiveClosureR{}
				}
				foreign.R.Child = local
				break
			}
		}
	}

	return nil
}

// LoadParentTopicTransitiveClosures allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadParentTopicTransitiveClosures(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`topic_transitive_closure`),
		qm.WhereIn(`topic_transitive_closure.parent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load topic_transitive_closure")
	}

	var resultSlice []*TopicTransitiveClosure
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice topic_transitive_closure")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on topic_transitive_closure")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topic_transitive_closure")
	}

	if singular {
		object.R.ParentTopicTransitiveClosures = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &topicTransitiveClosureR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ParentID {
				local.R.ParentTopicTransitiveClosures = append(local.R.ParentTopicTransitiveClosures, foreign)
				if foreign.R == nil {
					foreign.R = &topicTransitiveClosureR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadUserLinkTopics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadUserLinkTopics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_link_topics`),
		qm.WhereIn(`user_link_topics.topic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_link_topics")
	}

	var resultSlice []*UserLinkTopic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_link_topics")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_link_topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_link_topics")
	}

	if singular {
		object.R.UserLinkTopics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userLinkTopicR{}
			}
			foreign.R.Topic = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TopicID {
				local.R.UserLinkTopics = append(local.R.UserLinkTopics, foreign)
				if foreign.R == nil {
					foreign.R = &userLinkTopicR{}
				}
				foreign.R.Topic = local
				break
			}
		}
	}

	return nil
}

// SetOrganization of the topic to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Topics.
func (o *Topic) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &topicR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Topics: TopicSlice{o},
		}
	} else {
		related.R.Topics = append(related.R.Topics, o)
	}

	return nil
}

// SetRepository of the topic to the related item.
// Sets o.R.Repository to related.
// Adds o to related.R.Topics.
func (o *Topic) SetRepository(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Repository) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"repository_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RepositoryID = related.ID
	if o.R == nil {
		o.R = &topicR{
			Repository: related,
		}
	} else {
		o.R.Repository = related
	}

	if related.R == nil {
		related.R = &repositoryR{
			Topics: TopicSlice{o},
		}
	} else {
		related.R.Topics = append(related.R.Topics, o)
	}

	return nil
}

// SetTimerange of the topic to the related item.
// Sets o.R.Timerange to related.
// Adds o to related.R.Topics.
func (o *Topic) SetTimerange(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Timerange) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"timerange_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TimerangeID, related.ID)
	if o.R == nil {
		o.R = &topicR{
			Timerange: related,
		}
	} else {
		o.R.Timerange = related
	}

	if related.R == nil {
		related.R = &timerangeR{
			Topics: TopicSlice{o},
		}
	} else {
		related.R.Topics = append(related.R.Topics, o)
	}

	return nil
}

// RemoveTimerange relationship.
// Sets o.R.Timerange to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Topic) RemoveTimerange(ctx context.Context, exec boil.ContextExecutor, related *Timerange) error {
	var err error

	queries.SetScanner(&o.TimerangeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("timerange_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Timerange = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Topics {
		if queries.Equal(o.TimerangeID, ri.TimerangeID) {
			continue
		}

		ln := len(related.R.Topics)
		if ln > 1 && i < ln-1 {
			related.R.Topics[i] = related.R.Topics[ln-1]
		}
		related.R.Topics = related.R.Topics[:ln-1]
		break
	}
	return nil
}

// AddChildLinks adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ChildLinks.
// Sets related.R.ParentTopics appropriately.
func (o *Topic) AddChildLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"link_topics\" (\"parent_id\", \"child_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &topicR{
			ChildLinks: related,
		}
	} else {
		o.R.ChildLinks = append(o.R.ChildLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &linkR{
				ParentTopics: TopicSlice{o},
			}
		} else {
			rel.R.ParentTopics = append(rel.R.ParentTopics, o)
		}
	}
	return nil
}

// SetChildLinks removes all previously related items of the
// topic replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentTopics's ChildLinks accordingly.
// Replaces o.R.ChildLinks with related.
// Sets related.R.ParentTopics's ChildLinks accordingly.
func (o *Topic) SetChildLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	query := "delete from \"link_topics\" where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeChildLinksFromParentTopicsSlice(o, related)
	if o.R != nil {
		o.R.ChildLinks = nil
	}

	return o.AddChildLinks(ctx, exec, insert, related...)
}

// RemoveChildLinks relationships from objects passed in.
// Removes related items from R.ChildLinks (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentTopics.
func (o *Topic) RemoveChildLinks(ctx context.Context, exec boil.ContextExecutor, related ...*Link) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"link_topics\" where \"parent_id\" = $1 and \"child_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeChildLinksFromParentTopicsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChildLinks {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChildLinks)
			if ln > 1 && i < ln-1 {
				o.R.ChildLinks[i] = o.R.ChildLinks[ln-1]
			}
			o.R.ChildLinks = o.R.ChildLinks[:ln-1]
			break
		}
	}

	return nil
}

func removeChildLinksFromParentTopicsSlice(o *Topic, related []*Link) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ParentTopics {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ParentTopics)
			if ln > 1 && i < ln-1 {
				rel.R.ParentTopics[i] = rel.R.ParentTopics[ln-1]
			}
			rel.R.ParentTopics = rel.R.ParentTopics[:ln-1]
			break
		}
	}
}

// AddParentLinkTransitiveClosures adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ParentLinkTransitiveClosures.
// Sets related.R.Parent appropriately.
func (o *Topic) AddParentLinkTransitiveClosures(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LinkTransitiveClosure) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ParentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"link_transitive_closure\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, linkTransitiveClosurePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ParentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &topicR{
			ParentLinkTransitiveClosures: related,
		}
	} else {
		o.R.ParentLinkTransitiveClosures = append(o.R.ParentLinkTransitiveClosures, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &linkTransitiveClosureR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// AddParentTopics adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ParentTopics.
// Sets related.R.ChildTopics appropriately.
func (o *Topic) AddParentTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"topic_topics\" (\"child_id\", \"parent_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &topicR{
			ParentTopics: related,
		}
	} else {
		o.R.ParentTopics = append(o.R.ParentTopics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &topicR{
				ChildTopics: TopicSlice{o},
			}
		} else {
			rel.R.ChildTopics = append(rel.R.ChildTopics, o)
		}
	}
	return nil
}

// SetParentTopics removes all previously related items of the
// topic replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChildTopics's ParentTopics accordingly.
// Replaces o.R.ParentTopics with related.
// Sets related.R.ChildTopics's ParentTopics accordingly.
func (o *Topic) SetParentTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	query := "delete from \"topic_topics\" where \"child_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeParentTopicsFromChildTopicsSlice(o, related)
	if o.R != nil {
		o.R.ParentTopics = nil
	}

	return o.AddParentTopics(ctx, exec, insert, related...)
}

// RemoveParentTopics relationships from objects passed in.
// Removes related items from R.ParentTopics (uses pointer comparison, removal does not keep order)
// Sets related.R.ChildTopics.
func (o *Topic) RemoveParentTopics(ctx context.Context, exec boil.ContextExecutor, related ...*Topic) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"topic_topics\" where \"child_id\" = $1 and \"parent_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeParentTopicsFromChildTopicsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentTopics {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentTopics)
			if ln > 1 && i < ln-1 {
				o.R.ParentTopics[i] = o.R.ParentTopics[ln-1]
			}
			o.R.ParentTopics = o.R.ParentTopics[:ln-1]
			break
		}
	}

	return nil
}

func removeParentTopicsFromChildTopicsSlice(o *Topic, related []*Topic) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ChildTopics {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ChildTopics)
			if ln > 1 && i < ln-1 {
				rel.R.ChildTopics[i] = rel.R.ChildTopics[ln-1]
			}
			rel.R.ChildTopics = rel.R.ChildTopics[:ln-1]
			break
		}
	}
}

// AddChildTopics adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ChildTopics.
// Sets related.R.ParentTopics appropriately.
func (o *Topic) AddChildTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"topic_topics\" (\"parent_id\", \"child_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &topicR{
			ChildTopics: related,
		}
	} else {
		o.R.ChildTopics = append(o.R.ChildTopics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &topicR{
				ParentTopics: TopicSlice{o},
			}
		} else {
			rel.R.ParentTopics = append(rel.R.ParentTopics, o)
		}
	}
	return nil
}

// SetChildTopics removes all previously related items of the
// topic replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentTopics's ChildTopics accordingly.
// Replaces o.R.ChildTopics with related.
// Sets related.R.ParentTopics's ChildTopics accordingly.
func (o *Topic) SetChildTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	query := "delete from \"topic_topics\" where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeChildTopicsFromParentTopicsSlice(o, related)
	if o.R != nil {
		o.R.ChildTopics = nil
	}

	return o.AddChildTopics(ctx, exec, insert, related...)
}

// RemoveChildTopics relationships from objects passed in.
// Removes related items from R.ChildTopics (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentTopics.
func (o *Topic) RemoveChildTopics(ctx context.Context, exec boil.ContextExecutor, related ...*Topic) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"topic_topics\" where \"parent_id\" = $1 and \"child_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeChildTopicsFromParentTopicsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChildTopics {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChildTopics)
			if ln > 1 && i < ln-1 {
				o.R.ChildTopics[i] = o.R.ChildTopics[ln-1]
			}
			o.R.ChildTopics = o.R.ChildTopics[:ln-1]
			break
		}
	}

	return nil
}

func removeChildTopicsFromParentTopicsSlice(o *Topic, related []*Topic) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ParentTopics {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ParentTopics)
			if ln > 1 && i < ln-1 {
				rel.R.ParentTopics[i] = rel.R.ParentTopics[ln-1]
			}
			rel.R.ParentTopics = rel.R.ParentTopics[:ln-1]
			break
		}
	}
}

// AddChildTopicTransitiveClosures adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ChildTopicTransitiveClosures.
// Sets related.R.Child appropriately.
func (o *Topic) AddChildTopicTransitiveClosures(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TopicTransitiveClosure) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChildID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"topic_transitive_closure\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"child_id"}),
				strmangle.WhereClause("\"", "\"", 2, topicTransitiveClosurePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChildID = o.ID
		}
	}

	if o.R == nil {
		o.R = &topicR{
			ChildTopicTransitiveClosures: related,
		}
	} else {
		o.R.ChildTopicTransitiveClosures = append(o.R.ChildTopicTransitiveClosures, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &topicTransitiveClosureR{
				Child: o,
			}
		} else {
			rel.R.Child = o
		}
	}
	return nil
}

// AddParentTopicTransitiveClosures adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ParentTopicTransitiveClosures.
// Sets related.R.Parent appropriately.
func (o *Topic) AddParentTopicTransitiveClosures(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TopicTransitiveClosure) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ParentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"topic_transitive_closure\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, topicTransitiveClosurePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ParentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &topicR{
			ParentTopicTransitiveClosures: related,
		}
	} else {
		o.R.ParentTopicTransitiveClosures = append(o.R.ParentTopicTransitiveClosures, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &topicTransitiveClosureR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// AddUserLinkTopics adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.UserLinkTopics.
// Sets related.R.Topic appropriately.
func (o *Topic) AddUserLinkTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserLinkTopic) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TopicID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_link_topics\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"topic_id"}),
				strmangle.WhereClause("\"", "\"", 2, userLinkTopicPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TopicID = o.ID
		}
	}

	if o.R == nil {
		o.R = &topicR{
			UserLinkTopics: related,
		}
	} else {
		o.R.UserLinkTopics = append(o.R.UserLinkTopics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userLinkTopicR{
				Topic: o,
			}
		} else {
			rel.R.Topic = o
		}
	}
	return nil
}

// Topics retrieves all the records using an executor.
func Topics(mods ...qm.QueryMod) topicQuery {
	mods = append(mods, qm.From("\"topics\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"topics\".*"})
	}

	return topicQuery{q}
}

// FindTopic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTopic(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Topic, error) {
	topicObj := &Topic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"topics\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, topicObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from topics")
	}

	return topicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Topic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no topics provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(topicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	topicInsertCacheMut.RLock()
	cache, cached := topicInsertCache[key]
	topicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			topicAllColumns,
			topicColumnsWithDefault,
			topicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(topicType, topicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(topicType, topicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"topics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"topics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into topics")
	}

	if !cached {
		topicInsertCacheMut.Lock()
		topicInsertCache[key] = cache
		topicInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Topic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Topic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	topicUpdateCacheMut.RLock()
	cache, cached := topicUpdateCache[key]
	topicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			topicAllColumns,
			topicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update topics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"topics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, topicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(topicType, topicMapping, append(wl, topicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update topics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for topics")
	}

	if !cached {
		topicUpdateCacheMut.Lock()
		topicUpdateCache[key] = cache
		topicUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q topicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for topics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TopicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, topicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in topic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all topic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Topic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no topics provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(topicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	topicUpsertCacheMut.RLock()
	cache, cached := topicUpsertCache[key]
	topicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			topicAllColumns,
			topicColumnsWithDefault,
			topicColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			topicAllColumns,
			topicPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert topics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(topicPrimaryKeyColumns))
			copy(conflict, topicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"topics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(topicType, topicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(topicType, topicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert topics")
	}

	if !cached {
		topicUpsertCacheMut.Lock()
		topicUpsertCache[key] = cache
		topicUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Topic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Topic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Topic provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), topicPrimaryKeyMapping)
	sql := "DELETE FROM \"topics\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for topics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q topicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no topicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for topics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TopicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for topics")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Topic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTopic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TopicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TopicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"topics\".* FROM \"topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TopicSlice")
	}

	*o = slice

	return nil
}

// TopicExists checks if the Topic row exists.
func TopicExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"topics\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if topics exists")
	}

	return exists, nil
}
