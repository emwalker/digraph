// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTimeranges(t *testing.T) {
	t.Parallel()

	query := Timeranges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTimerangesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimerangesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Timeranges().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimerangesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TimerangeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimerangesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TimerangeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Timerange exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TimerangeExists to return true, but got false.")
	}
}

func testTimerangesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	timerangeFound, err := FindTimerange(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if timerangeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTimerangesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Timeranges().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTimerangesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Timeranges().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTimerangesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timerangeOne := &Timerange{}
	timerangeTwo := &Timerange{}
	if err = randomize.Struct(seed, timerangeOne, timerangeDBTypes, false, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}
	if err = randomize.Struct(seed, timerangeTwo, timerangeDBTypes, false, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = timerangeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = timerangeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Timeranges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTimerangesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	timerangeOne := &Timerange{}
	timerangeTwo := &Timerange{}
	if err = randomize.Struct(seed, timerangeOne, timerangeDBTypes, false, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}
	if err = randomize.Struct(seed, timerangeTwo, timerangeDBTypes, false, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = timerangeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = timerangeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTimerangesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimerangesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(timerangeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimerangeToManyTopics(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Timerange
	var b, c Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, topicDBTypes, false, topicColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, topicDBTypes, false, topicColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TimerangeID, a.ID)
	queries.Assign(&c.TimerangeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Topics().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TimerangeID, b.TimerangeID) {
			bFound = true
		}
		if queries.Equal(v.TimerangeID, c.TimerangeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TimerangeSlice{&a}
	if err = a.L.LoadTopics(ctx, tx, false, (*[]*Timerange)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Topics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Topics = nil
	if err = a.L.LoadTopics(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Topics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTimerangeToManyAddOpTopics(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Timerange
	var b, c, d, e Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, timerangeDBTypes, false, strmangle.SetComplement(timerangePrimaryKeyColumns, timerangeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Topic{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Topic{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTopics(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TimerangeID) {
			t.Error("foreign key was wrong value", a.ID, first.TimerangeID)
		}
		if !queries.Equal(a.ID, second.TimerangeID) {
			t.Error("foreign key was wrong value", a.ID, second.TimerangeID)
		}

		if first.R.Timerange != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Timerange != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Topics[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Topics[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Topics().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTimerangeToManySetOpTopics(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Timerange
	var b, c, d, e Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, timerangeDBTypes, false, strmangle.SetComplement(timerangePrimaryKeyColumns, timerangeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Topic{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTopics(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Topics().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTopics(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Topics().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TimerangeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TimerangeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TimerangeID) {
		t.Error("foreign key was wrong value", a.ID, d.TimerangeID)
	}
	if !queries.Equal(a.ID, e.TimerangeID) {
		t.Error("foreign key was wrong value", a.ID, e.TimerangeID)
	}

	if b.R.Timerange != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Timerange != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Timerange != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Timerange != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Topics[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Topics[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTimerangeToManyRemoveOpTopics(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Timerange
	var b, c, d, e Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, timerangeDBTypes, false, strmangle.SetComplement(timerangePrimaryKeyColumns, timerangeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Topic{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTopics(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Topics().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTopics(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Topics().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TimerangeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TimerangeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Timerange != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Timerange != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Timerange != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Timerange != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Topics) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Topics[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Topics[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTimerangesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTimerangesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TimerangeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTimerangesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Timeranges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	timerangeDBTypes = map[string]string{`ID`: `uuid`, `StartsAt`: `timestamp with time zone`, `FinishesAt`: `timestamp with time zone`, `PrefixFormat`: `character varying`}
	_                = bytes.MinRead
)

func testTimerangesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(timerangePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(timerangeAllColumns) == len(timerangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTimerangesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(timerangeAllColumns) == len(timerangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Timerange{}
	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, timerangeDBTypes, true, timerangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(timerangeAllColumns, timerangePrimaryKeyColumns) {
		fields = timerangeAllColumns
	} else {
		fields = strmangle.SetComplement(
			timerangeAllColumns,
			timerangePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TimerangeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTimerangesUpsert(t *testing.T) {
	t.Parallel()

	if len(timerangeAllColumns) == len(timerangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Timerange{}
	if err = randomize.Struct(seed, &o, timerangeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Timerange: %s", err)
	}

	count, err := Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, timerangeDBTypes, false, timerangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timerange struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Timerange: %s", err)
	}

	count, err = Timeranges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
