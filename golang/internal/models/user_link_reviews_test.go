// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserLinkReviews(t *testing.T) {
	t.Parallel()

	query := UserLinkReviews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserLinkReviewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinkReviewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserLinkReviews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinkReviewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserLinkReviewSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinkReviewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserLinkReviewExists(ctx, tx, o.UserID, o.LinkID)
	if err != nil {
		t.Errorf("Unable to check if UserLinkReview exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserLinkReviewExists to return true, but got false.")
	}
}

func testUserLinkReviewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userLinkReviewFound, err := FindUserLinkReview(ctx, tx, o.UserID, o.LinkID)
	if err != nil {
		t.Error(err)
	}

	if userLinkReviewFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserLinkReviewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserLinkReviews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserLinkReviewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserLinkReviews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserLinkReviewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLinkReviewOne := &UserLinkReview{}
	userLinkReviewTwo := &UserLinkReview{}
	if err = randomize.Struct(seed, userLinkReviewOne, userLinkReviewDBTypes, false, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}
	if err = randomize.Struct(seed, userLinkReviewTwo, userLinkReviewDBTypes, false, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userLinkReviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userLinkReviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserLinkReviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserLinkReviewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userLinkReviewOne := &UserLinkReview{}
	userLinkReviewTwo := &UserLinkReview{}
	if err = randomize.Struct(seed, userLinkReviewOne, userLinkReviewDBTypes, false, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}
	if err = randomize.Struct(seed, userLinkReviewTwo, userLinkReviewDBTypes, false, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userLinkReviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userLinkReviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testUserLinkReviewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserLinkReviewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userLinkReviewColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserLinkReviewToOneLinkUsingLink(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserLinkReview
	var foreign Link

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userLinkReviewDBTypes, false, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, linkDBTypes, false, linkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Link struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LinkID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Link().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserLinkReviewSlice{&local}
	if err = local.L.LoadLink(ctx, tx, false, (*[]*UserLinkReview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Link == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Link = nil
	if err = local.L.LoadLink(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Link == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserLinkReviewToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserLinkReview
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userLinkReviewDBTypes, false, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserLinkReviewSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserLinkReview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserLinkReviewToOneSetOpLinkUsingLink(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserLinkReview
	var b, c Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userLinkReviewDBTypes, false, strmangle.SetComplement(userLinkReviewPrimaryKeyColumns, userLinkReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Link{&b, &c} {
		err = a.SetLink(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Link != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserLinkReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LinkID != x.ID {
			t.Error("foreign key was wrong value", a.LinkID)
		}

		if exists, err := UserLinkReviewExists(ctx, tx, a.UserID, a.LinkID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUserLinkReviewToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserLinkReview
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userLinkReviewDBTypes, false, strmangle.SetComplement(userLinkReviewPrimaryKeyColumns, userLinkReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserLinkReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserLinkReviewExists(ctx, tx, a.UserID, a.LinkID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserLinkReviewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserLinkReviewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserLinkReviewSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserLinkReviewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserLinkReviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userLinkReviewDBTypes = map[string]string{`UserID`: `uuid`, `LinkID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ReviewedAt`: `timestamp with time zone`}
	_                     = bytes.MinRead
)

func testUserLinkReviewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userLinkReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userLinkReviewAllColumns) == len(userLinkReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserLinkReviewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userLinkReviewAllColumns) == len(userLinkReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkReview{}
	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userLinkReviewDBTypes, true, userLinkReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userLinkReviewAllColumns, userLinkReviewPrimaryKeyColumns) {
		fields = userLinkReviewAllColumns
	} else {
		fields = strmangle.SetComplement(
			userLinkReviewAllColumns,
			userLinkReviewPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserLinkReviewSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserLinkReviewsUpsert(t *testing.T) {
	t.Parallel()

	if len(userLinkReviewAllColumns) == len(userLinkReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserLinkReview{}
	if err = randomize.Struct(seed, &o, userLinkReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserLinkReview: %s", err)
	}

	count, err := UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userLinkReviewDBTypes, false, userLinkReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLinkReview struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserLinkReview: %s", err)
	}

	count, err = UserLinkReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
