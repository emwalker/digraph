// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Alertable interface {
	IsAlertable()
}

type Namespaceable interface {
	IsNamespaceable()
}

type ResourceIdentifiable interface {
	IsResourceIdentifiable()
}

type SearchResultItem interface {
	IsSearchResultItem()
}

type ActivityLineItem struct {
	Description string `json:"description"`
	CreatedAt   string `json:"createdAt"`
}

type ActivityLineItemConnection struct {
	Edges    []*ActivityLineItemEdge `json:"edges"`
	PageInfo *PageInfo               `json:"pageInfo"`
}

type ActivityLineItemEdge struct {
	Cursor string            `json:"cursor"`
	Node   *ActivityLineItem `json:"node"`
}

type Alert struct {
	Text string    `json:"text"`
	Type AlertType `json:"type"`
	ID   string    `json:"id"`
}

type CreateGithubSessionInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	GithubAvatarURL  string  `json:"githubAvatarUrl"`
	GithubUsername   string  `json:"githubUsername"`
	Name             string  `json:"name"`
	PrimaryEmail     string  `json:"primaryEmail"`
	ServerSecret     string  `json:"serverSecret"`
}

type CreateGoogleSessionInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	GoogleAvatarURL  string  `json:"googleAvatarUrl"`
	GoogleProfileID  string  `json:"googleProfileId"`
	Name             string  `json:"name"`
	PrimaryEmail     string  `json:"primaryEmail"`
	ServerSecret     string  `json:"serverSecret"`
}

type CreateSessionPayload struct {
	Alerts      []*Alert     `json:"alerts"`
	UserEdge    *UserEdge    `json:"userEdge"`
	SessionEdge *SessionEdge `json:"sessionEdge"`
}

func (CreateSessionPayload) IsAlertable() {}

type DeleteAccountInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	UserID           string  `json:"userId"`
}

type DeleteAccountPayload struct {
	Alerts           []*Alert `json:"alerts"`
	ClientMutationID *string  `json:"clientMutationId"`
	DeletedUserID    string   `json:"deletedUserId"`
}

func (DeleteAccountPayload) IsAlertable() {}

type DeleteLinkInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	LinkID           string  `json:"linkId"`
}

type DeleteLinkPayload struct {
	ClientMutationID *string `json:"clientMutationId"`
	DeletedLinkID    string  `json:"deletedLinkId"`
}

type DeleteSessionInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	SessionID        string  `json:"sessionId"`
}

type DeleteSessionPayload struct {
	ClientMutationID *string `json:"clientMutationId"`
	DeletedSessionID string  `json:"deletedSessionId"`
}

type DeleteTopicInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	TopicID          string  `json:"topicId"`
}

type DeleteTopicPayload struct {
	ClientMutationID *string `json:"clientMutationId"`
	DeletedTopicID   string  `json:"deletedTopicId"`
}

type DeleteTopicTimeRangeInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	TopicID          string  `json:"topicId"`
}

type DeleteTopicTimeRangePayload struct {
	ClientMutationID   *string     `json:"clientMutationId"`
	DeletedTimeRangeID *string     `json:"deletedTimeRangeId"`
	Topic              *TopicValue `json:"topic"`
}

type LinkConnection struct {
	Edges      []*LinkEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type LinkEdge struct {
	Cursor string     `json:"cursor"`
	Node   *LinkValue `json:"node"`
}

type LinkReview struct {
	ReviewedAt *string `json:"reviewedAt"`
	User       *User   `json:"user"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type QueryInfo struct {
	Topics       *TopicConnection `json:"topics"`
	StringTokens []string         `json:"stringTokens"`
}

type ReorderSynonymsInput struct {
	ClientMutationID *string  `json:"clientMutationId"`
	SynonymIds       []string `json:"synonymIds"`
	TopicID          string   `json:"topicId"`
}

type ReorderSynonymsPayload struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type RepositoryConnection struct {
	Edges []*RepositoryEdge `json:"edges"`
}

type RepositoryEdge struct {
	Cursor     string      `json:"cursor"`
	Node       *Repository `json:"node"`
	IsSelected bool        `json:"isSelected"`
}

type ReviewLinkInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	LinkID           string  `json:"linkId"`
	Reviewed         bool    `json:"reviewed"`
}

type ReviewLinkPayload struct {
	Link *LinkValue `json:"link"`
}

type SearchResultItemConnection struct {
	Edges []*SearchResultItemEdge `json:"edges"`
}

type SearchResultItemEdge struct {
	Node SearchResultItem `json:"node"`
}

type SelectRepositoryInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	RepositoryID     *string `json:"repositoryId"`
}

type SelectRepositoryPayload struct {
	Repository *Repository `json:"repository"`
	Viewer     *User       `json:"viewer"`
}

type SessionEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Session `json:"node"`
}

type SynonymInput struct {
	Name   string `json:"name"`
	Locale string `json:"locale"`
}

type TimeRange struct {
	StartsAt     string                `json:"startsAt"`
	EndsAt       *string               `json:"endsAt"`
	PrefixFormat TimeRangePrefixFormat `json:"prefixFormat"`
}

type TimeRangeEdge struct {
	Cursor string     `json:"cursor"`
	Node   *TimeRange `json:"node"`
}

type TopicConnection struct {
	Edges    []*TopicEdge `json:"edges"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type TopicEdge struct {
	Cursor string      `json:"cursor"`
	Node   *TopicValue `json:"node"`
}

type UpdateLinkTopicsInput struct {
	ClientMutationID *string  `json:"clientMutationId"`
	LinkID           string   `json:"linkId"`
	ParentTopicIds   []string `json:"parentTopicIds"`
}

type UpdateLinkTopicsPayload struct {
	Link *LinkValue `json:"link"`
}

type UpdateSynonymsInput struct {
	ClientMutationID *string         `json:"clientMutationId"`
	Synonyms         []*SynonymInput `json:"synonyms"`
	TopicID          string          `json:"topicId"`
}

type UpdateSynonymsPayload struct {
	Alerts           []*Alert    `json:"alerts"`
	ClientMutationID *string     `json:"clientMutationId"`
	Topic            *TopicValue `json:"topic"`
}

type UpdateTopicInput struct {
	ClientMutationID *string  `json:"clientMutationId"`
	Description      *string  `json:"description"`
	ID               string   `json:"id"`
	Name             string   `json:"name"`
	TopicIds         []string `json:"topicIds"`
}

type UpdateTopicParentTopicsInput struct {
	ClientMutationID *string  `json:"clientMutationId"`
	TopicID          string   `json:"topicId"`
	ParentTopicIds   []string `json:"parentTopicIds"`
}

type UpdateTopicParentTopicsPayload struct {
	Alerts []*Alert    `json:"alerts"`
	Topic  *TopicValue `json:"topic"`
}

func (UpdateTopicParentTopicsPayload) IsAlertable() {}

type UpdateTopicPayload struct {
	Alerts []*Alert    `json:"alerts"`
	Topic  *TopicValue `json:"topic"`
}

type UpsertLinkInput struct {
	AddParentTopicIds []string `json:"addParentTopicIds"`
	ClientMutationID  *string  `json:"clientMutationId"`
	OrganizationLogin string   `json:"organizationLogin"`
	RepositoryName    string   `json:"repositoryName"`
	Title             *string  `json:"title"`
	URL               string   `json:"url"`
}

type UpsertLinkPayload struct {
	Alerts   []*Alert  `json:"alerts"`
	LinkEdge *LinkEdge `json:"linkEdge"`
}

func (UpsertLinkPayload) IsAlertable() {}

type UpsertTopicInput struct {
	ClientMutationID  *string  `json:"clientMutationId"`
	Description       *string  `json:"description"`
	Name              string   `json:"name"`
	OrganizationLogin string   `json:"organizationLogin"`
	RepositoryName    string   `json:"repositoryName"`
	TopicIds          []string `json:"topicIds"`
}

type UpsertTopicPayload struct {
	Alerts    []*Alert   `json:"alerts"`
	TopicEdge *TopicEdge `json:"topicEdge"`
}

func (UpsertTopicPayload) IsAlertable() {}

type UpsertTopicTimeRangeInput struct {
	ClientMutationID *string               `json:"clientMutationId"`
	TopicID          string                `json:"topicId"`
	StartsAt         string                `json:"startsAt"`
	EndsAt           *string               `json:"endsAt"`
	PrefixFormat     TimeRangePrefixFormat `json:"prefixFormat"`
}

type UpsertTopicTimeRangePayload struct {
	Alerts        []*Alert       `json:"alerts"`
	TimeRangeEdge *TimeRangeEdge `json:"timeRangeEdge"`
	Topic         *TopicValue    `json:"topic"`
}

func (UpsertTopicTimeRangePayload) IsAlertable() {}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type AlertType string

const (
	AlertTypeSuccess AlertType = "SUCCESS"
	AlertTypeWarn    AlertType = "WARN"
	AlertTypeError   AlertType = "ERROR"
)

var AllAlertType = []AlertType{
	AlertTypeSuccess,
	AlertTypeWarn,
	AlertTypeError,
}

func (e AlertType) IsValid() bool {
	switch e {
	case AlertTypeSuccess, AlertTypeWarn, AlertTypeError:
		return true
	}
	return false
}

func (e AlertType) String() string {
	return string(e)
}

func (e *AlertType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlertType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlertType", str)
	}
	return nil
}

func (e AlertType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocaleIdentifier string

const (
	LocaleIdentifierAr LocaleIdentifier = "ar"
	LocaleIdentifierDe LocaleIdentifier = "de"
	LocaleIdentifierEl LocaleIdentifier = "el"
	LocaleIdentifierEn LocaleIdentifier = "en"
	LocaleIdentifierEs LocaleIdentifier = "es"
	LocaleIdentifierFa LocaleIdentifier = "fa"
	LocaleIdentifierFi LocaleIdentifier = "fi"
	LocaleIdentifierFr LocaleIdentifier = "fr"
	LocaleIdentifierHi LocaleIdentifier = "hi"
	LocaleIdentifierIt LocaleIdentifier = "it"
	LocaleIdentifierJa LocaleIdentifier = "ja"
	LocaleIdentifierJi LocaleIdentifier = "ji"
	LocaleIdentifierKo LocaleIdentifier = "ko"
	LocaleIdentifierLa LocaleIdentifier = "la"
	LocaleIdentifierNl LocaleIdentifier = "nl"
	LocaleIdentifierNo LocaleIdentifier = "no"
	LocaleIdentifierPt LocaleIdentifier = "pt"
	LocaleIdentifierRu LocaleIdentifier = "ru"
	LocaleIdentifierSv LocaleIdentifier = "sv"
	LocaleIdentifierTr LocaleIdentifier = "tr"
	LocaleIdentifierUk LocaleIdentifier = "uk"
	LocaleIdentifierZh LocaleIdentifier = "zh"
)

var AllLocaleIdentifier = []LocaleIdentifier{
	LocaleIdentifierAr,
	LocaleIdentifierDe,
	LocaleIdentifierEl,
	LocaleIdentifierEn,
	LocaleIdentifierEs,
	LocaleIdentifierFa,
	LocaleIdentifierFi,
	LocaleIdentifierFr,
	LocaleIdentifierHi,
	LocaleIdentifierIt,
	LocaleIdentifierJa,
	LocaleIdentifierJi,
	LocaleIdentifierKo,
	LocaleIdentifierLa,
	LocaleIdentifierNl,
	LocaleIdentifierNo,
	LocaleIdentifierPt,
	LocaleIdentifierRu,
	LocaleIdentifierSv,
	LocaleIdentifierTr,
	LocaleIdentifierUk,
	LocaleIdentifierZh,
}

func (e LocaleIdentifier) IsValid() bool {
	switch e {
	case LocaleIdentifierAr, LocaleIdentifierDe, LocaleIdentifierEl, LocaleIdentifierEn, LocaleIdentifierEs, LocaleIdentifierFa, LocaleIdentifierFi, LocaleIdentifierFr, LocaleIdentifierHi, LocaleIdentifierIt, LocaleIdentifierJa, LocaleIdentifierJi, LocaleIdentifierKo, LocaleIdentifierLa, LocaleIdentifierNl, LocaleIdentifierNo, LocaleIdentifierPt, LocaleIdentifierRu, LocaleIdentifierSv, LocaleIdentifierTr, LocaleIdentifierUk, LocaleIdentifierZh:
		return true
	}
	return false
}

func (e LocaleIdentifier) String() string {
	return string(e)
}

func (e *LocaleIdentifier) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocaleIdentifier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocaleIdentifier", str)
	}
	return nil
}

func (e LocaleIdentifier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimeRangePrefixFormat string

const (
	TimeRangePrefixFormatNone           TimeRangePrefixFormat = "NONE"
	TimeRangePrefixFormatStartYear      TimeRangePrefixFormat = "START_YEAR"
	TimeRangePrefixFormatStartYearMonth TimeRangePrefixFormat = "START_YEAR_MONTH"
)

var AllTimeRangePrefixFormat = []TimeRangePrefixFormat{
	TimeRangePrefixFormatNone,
	TimeRangePrefixFormatStartYear,
	TimeRangePrefixFormatStartYearMonth,
}

func (e TimeRangePrefixFormat) IsValid() bool {
	switch e {
	case TimeRangePrefixFormatNone, TimeRangePrefixFormatStartYear, TimeRangePrefixFormatStartYearMonth:
		return true
	}
	return false
}

func (e TimeRangePrefixFormat) String() string {
	return string(e)
}

func (e *TimeRangePrefixFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimeRangePrefixFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimeRangePrefixFormat", str)
	}
	return nil
}

func (e TimeRangePrefixFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
