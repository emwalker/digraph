// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTopicTransitiveClosures(t *testing.T) {
	t.Parallel()

	query := TopicTransitiveClosures()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTopicTransitiveClosuresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopicTransitiveClosuresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TopicTransitiveClosures().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopicTransitiveClosuresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopicTransitiveClosureSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopicTransitiveClosuresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TopicTransitiveClosureExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TopicTransitiveClosure exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TopicTransitiveClosureExists to return true, but got false.")
	}
}

func testTopicTransitiveClosuresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	topicTransitiveClosureFound, err := FindTopicTransitiveClosure(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if topicTransitiveClosureFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTopicTransitiveClosuresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TopicTransitiveClosures().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTopicTransitiveClosuresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TopicTransitiveClosures().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTopicTransitiveClosuresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	topicTransitiveClosureOne := &TopicTransitiveClosure{}
	topicTransitiveClosureTwo := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, topicTransitiveClosureOne, topicTransitiveClosureDBTypes, false, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}
	if err = randomize.Struct(seed, topicTransitiveClosureTwo, topicTransitiveClosureDBTypes, false, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topicTransitiveClosureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topicTransitiveClosureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopicTransitiveClosures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTopicTransitiveClosuresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	topicTransitiveClosureOne := &TopicTransitiveClosure{}
	topicTransitiveClosureTwo := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, topicTransitiveClosureOne, topicTransitiveClosureDBTypes, false, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}
	if err = randomize.Struct(seed, topicTransitiveClosureTwo, topicTransitiveClosureDBTypes, false, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topicTransitiveClosureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topicTransitiveClosureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTopicTransitiveClosuresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopicTransitiveClosuresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(topicTransitiveClosureColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopicTransitiveClosureToOneTopicUsingChild(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TopicTransitiveClosure
	var foreign Topic

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, topicTransitiveClosureDBTypes, false, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, topicDBTypes, false, topicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Topic struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChildID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Child().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TopicTransitiveClosureSlice{&local}
	if err = local.L.LoadChild(ctx, tx, false, (*[]*TopicTransitiveClosure)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Child == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Child = nil
	if err = local.L.LoadChild(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Child == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTopicTransitiveClosureToOneTopicUsingParent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TopicTransitiveClosure
	var foreign Topic

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, topicTransitiveClosureDBTypes, false, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, topicDBTypes, false, topicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Topic struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ParentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Parent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TopicTransitiveClosureSlice{&local}
	if err = local.L.LoadParent(ctx, tx, false, (*[]*TopicTransitiveClosure)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Parent = nil
	if err = local.L.LoadParent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTopicTransitiveClosureToOneSetOpTopicUsingChild(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TopicTransitiveClosure
	var b, c Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, topicTransitiveClosureDBTypes, false, strmangle.SetComplement(topicTransitiveClosurePrimaryKeyColumns, topicTransitiveClosureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Topic{&b, &c} {
		err = a.SetChild(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Child != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChildTopicTransitiveClosures[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChildID != x.ID {
			t.Error("foreign key was wrong value", a.ChildID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChildID))
		reflect.Indirect(reflect.ValueOf(&a.ChildID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChildID != x.ID {
			t.Error("foreign key was wrong value", a.ChildID, x.ID)
		}
	}
}
func testTopicTransitiveClosureToOneSetOpTopicUsingParent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TopicTransitiveClosure
	var b, c Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, topicTransitiveClosureDBTypes, false, strmangle.SetComplement(topicTransitiveClosurePrimaryKeyColumns, topicTransitiveClosureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Topic{&b, &c} {
		err = a.SetParent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Parent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentTopicTransitiveClosures[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ParentID != x.ID {
			t.Error("foreign key was wrong value", a.ParentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentID))
		reflect.Indirect(reflect.ValueOf(&a.ParentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ParentID != x.ID {
			t.Error("foreign key was wrong value", a.ParentID, x.ID)
		}
	}
}

func testTopicTransitiveClosuresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopicTransitiveClosuresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopicTransitiveClosureSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopicTransitiveClosuresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopicTransitiveClosures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	topicTransitiveClosureDBTypes = map[string]string{`ID`: `integer`, `ParentID`: `uuid`, `ChildID`: `uuid`}
	_                             = bytes.MinRead
)

func testTopicTransitiveClosuresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(topicTransitiveClosurePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(topicTransitiveClosureAllColumns) == len(topicTransitiveClosurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTopicTransitiveClosuresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(topicTransitiveClosureAllColumns) == len(topicTransitiveClosurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopicTransitiveClosure{}
	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topicTransitiveClosureDBTypes, true, topicTransitiveClosurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(topicTransitiveClosureAllColumns, topicTransitiveClosurePrimaryKeyColumns) {
		fields = topicTransitiveClosureAllColumns
	} else {
		fields = strmangle.SetComplement(
			topicTransitiveClosureAllColumns,
			topicTransitiveClosurePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TopicTransitiveClosureSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTopicTransitiveClosuresUpsert(t *testing.T) {
	t.Parallel()

	if len(topicTransitiveClosureAllColumns) == len(topicTransitiveClosurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TopicTransitiveClosure{}
	if err = randomize.Struct(seed, &o, topicTransitiveClosureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopicTransitiveClosure: %s", err)
	}

	count, err := TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, topicTransitiveClosureDBTypes, false, topicTransitiveClosurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopicTransitiveClosure struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopicTransitiveClosure: %s", err)
	}

	count, err = TopicTransitiveClosures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
