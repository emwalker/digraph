// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Link() LinkResolver
	Mutation() MutationResolver
	Organization() OrganizationResolver
	Query() QueryResolver
	Repository() RepositoryResolver
	Synonym() SynonymResolver
	Topic() TopicResolver
	User() UserResolver
	View() ViewResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ActivityLineItem struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
	}

	ActivityLineItemConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ActivityLineItemEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Alert struct {
		ID   func(childComplexity int) int
		Text func(childComplexity int) int
		Type func(childComplexity int) int
	}

	CreateSessionPayload struct {
		Alerts      func(childComplexity int) int
		SessionEdge func(childComplexity int) int
		UserEdge    func(childComplexity int) int
	}

	DeleteAccountPayload struct {
		Alerts           func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
		DeletedUserID    func(childComplexity int) int
	}

	DeleteLinkPayload struct {
		ClientMutationID func(childComplexity int) int
		DeletedLinkID    func(childComplexity int) int
	}

	DeleteSessionPayload struct {
		ClientMutationID func(childComplexity int) int
		DeletedSessionID func(childComplexity int) int
	}

	DeleteTopicPayload struct {
		ClientMutationID func(childComplexity int) int
		DeletedTopicID   func(childComplexity int) int
	}

	DeleteTopicTimeRangePayload struct {
		ClientMutationID   func(childComplexity int) int
		DeletedTimeRangeID func(childComplexity int) int
		Topic              func(childComplexity int) int
	}

	Link struct {
		AvailableParentTopics func(childComplexity int, searchString *string, first *int, after *string, last *int, before *string) int
		CreatedAt             func(childComplexity int) int
		ID                    func(childComplexity int) int
		Loading               func(childComplexity int) int
		NewlyAdded            func(childComplexity int) int
		Organization          func(childComplexity int) int
		ParentTopics          func(childComplexity int, first *int, after *string, last *int, before *string) int
		Repository            func(childComplexity int) int
		ResourcePath          func(childComplexity int) int
		Sha1                  func(childComplexity int) int
		Title                 func(childComplexity int) int
		URL                   func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		ViewerReview          func(childComplexity int) int
	}

	LinkConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LinkEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LinkReview struct {
		ReviewedAt func(childComplexity int) int
		User       func(childComplexity int) int
	}

	Mutation struct {
		CreateGithubSession     func(childComplexity int, input CreateGithubSessionInput) int
		CreateGoogleSession     func(childComplexity int, input CreateGoogleSessionInput) int
		DeleteAccount           func(childComplexity int, input DeleteAccountInput) int
		DeleteLink              func(childComplexity int, input DeleteLinkInput) int
		DeleteSession           func(childComplexity int, input DeleteSessionInput) int
		DeleteTopic             func(childComplexity int, input DeleteTopicInput) int
		DeleteTopicTimeRange    func(childComplexity int, input DeleteTopicTimeRangeInput) int
		ReviewLink              func(childComplexity int, input ReviewLinkInput) int
		SelectRepository        func(childComplexity int, input SelectRepositoryInput) int
		UpdateLinkTopics        func(childComplexity int, input UpdateLinkTopicsInput) int
		UpdateSynonyms          func(childComplexity int, input UpdateSynonymsInput) int
		UpdateTopic             func(childComplexity int, input UpdateTopicInput) int
		UpdateTopicParentTopics func(childComplexity int, input UpdateTopicParentTopicsInput) int
		UpsertLink              func(childComplexity int, input UpsertLinkInput) int
		UpsertTopic             func(childComplexity int, input UpsertTopicInput) int
		UpsertTopicTimeRange    func(childComplexity int, input UpsertTopicTimeRangeInput) int
	}

	Organization struct {
		CreatedAt         func(childComplexity int) int
		DefaultRepository func(childComplexity int) int
		ID                func(childComplexity int) int
		Login             func(childComplexity int) int
		Name              func(childComplexity int) int
		Public            func(childComplexity int) int
		ResourcePath      func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		Alerts    func(childComplexity int) int
		FakeError func(childComplexity int) int
		View      func(childComplexity int, viewerID string, currentOrganizationLogin string, currentRepositoryName *string, repositoryIds []string, searchString *string) int
	}

	QueryInfo struct {
		StringTokens func(childComplexity int) int
		Topics       func(childComplexity int) int
	}

	ReorderSynonymsPayload struct {
		ClientMutationID func(childComplexity int) int
	}

	Repository struct {
		DisplayColor func(childComplexity int) int
		DisplayName  func(childComplexity int) int
		FullName     func(childComplexity int) int
		ID           func(childComplexity int) int
		IsPrivate    func(childComplexity int) int
		Name         func(childComplexity int) int
		Organization func(childComplexity int) int
		Owner        func(childComplexity int) int
		RootTopic    func(childComplexity int) int
	}

	RepositoryConnection struct {
		Edges func(childComplexity int) int
	}

	RepositoryEdge struct {
		Cursor     func(childComplexity int) int
		IsSelected func(childComplexity int) int
		Node       func(childComplexity int) int
	}

	ReviewLinkPayload struct {
		Link func(childComplexity int) int
	}

	SearchResultItemConnection struct {
		Edges func(childComplexity int) int
	}

	SearchResultItemEdge struct {
		Node func(childComplexity int) int
	}

	SelectRepositoryPayload struct {
		Repository func(childComplexity int) int
		Viewer     func(childComplexity int) int
	}

	Session struct {
		ID func(childComplexity int) int
	}

	SessionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Synonym struct {
		Locale func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	TimeRange struct {
		EndsAt       func(childComplexity int) int
		PrefixFormat func(childComplexity int) int
		StartsAt     func(childComplexity int) int
	}

	TimeRangeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Topic struct {
		Activity                func(childComplexity int, first *int, after *string, last *int, before *string) int
		AvailableParentTopics   func(childComplexity int, searchString *string, first *int, after *string, last *int, before *string) int
		ChildTopics             func(childComplexity int, searchString *string, first *int, after *string, last *int, before *string) int
		CreatedAt               func(childComplexity int) int
		Description             func(childComplexity int) int
		DisplayName             func(childComplexity int, timeRange *bool) int
		ID                      func(childComplexity int) int
		Links                   func(childComplexity int, first *int, after *string, last *int, before *string, searchString *string, reviewed *bool, descendants *bool) int
		Loading                 func(childComplexity int) int
		Name                    func(childComplexity int) int
		NewlyAdded              func(childComplexity int) int
		Organization            func(childComplexity int) int
		ParentTopics            func(childComplexity int, first *int, after *string, last *int, before *string) int
		Repository              func(childComplexity int) int
		ResourcePath            func(childComplexity int) int
		Search                  func(childComplexity int, searchString string, first *int, after *string, last *int, before *string) int
		Synonyms                func(childComplexity int) int
		TimeRange               func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		ViewerCanDeleteSynonyms func(childComplexity int) int
		ViewerCanUpdate         func(childComplexity int) int
	}

	TopicConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TopicEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UpdateLinkTopicsPayload struct {
		Link func(childComplexity int) int
	}

	UpdateSynonymsPayload struct {
		Alerts           func(childComplexity int) int
		ClientMutationID func(childComplexity int) int
		Topic            func(childComplexity int) int
	}

	UpdateTopicParentTopicsPayload struct {
		Alerts func(childComplexity int) int
		Topic  func(childComplexity int) int
	}

	UpdateTopicPayload struct {
		Alerts func(childComplexity int) int
		Topic  func(childComplexity int) int
	}

	UpsertLinkPayload struct {
		Alerts   func(childComplexity int) int
		LinkEdge func(childComplexity int) int
	}

	UpsertTopicPayload struct {
		Alerts    func(childComplexity int) int
		TopicEdge func(childComplexity int) int
	}

	UpsertTopicTimeRangePayload struct {
		Alerts        func(childComplexity int) int
		TimeRangeEdge func(childComplexity int) int
		Topic         func(childComplexity int) int
	}

	User struct {
		AvatarURL          func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DefaultRepository  func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsGuest            func(childComplexity int) int
		Name               func(childComplexity int) int
		PrimaryEmail       func(childComplexity int) int
		Repositories       func(childComplexity int, first *int, after *string, last *int, before *string) int
		SelectedRepository func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	View struct {
		Activity            func(childComplexity int, first *int, after *string, last *int, before *string) int
		CurrentRepository   func(childComplexity int) int
		DefaultOrganization func(childComplexity int) int
		Link                func(childComplexity int, id string) int
		LinkCount           func(childComplexity int) int
		Links               func(childComplexity int, searchString *string, first *int, after *string, last *int, before *string, reviewed *bool) int
		QueryInfo           func(childComplexity int) int
		SearchString        func(childComplexity int) int
		Topic               func(childComplexity int, id string) int
		TopicCount          func(childComplexity int) int
		TopicGraph          func(childComplexity int) int
		Topics              func(childComplexity int, searchString *string, first *int, after *string, last *int, before *string) int
		Viewer              func(childComplexity int) int
	}
}

type LinkResolver interface {
	AvailableParentTopics(ctx context.Context, obj *LinkValue, searchString *string, first *int, after *string, last *int, before *string) (*TopicConnection, error)
	CreatedAt(ctx context.Context, obj *LinkValue) (string, error)

	Loading(ctx context.Context, obj *LinkValue) (bool, error)

	Organization(ctx context.Context, obj *LinkValue) (*Organization, error)
	ParentTopics(ctx context.Context, obj *LinkValue, first *int, after *string, last *int, before *string) (*TopicConnection, error)
	Repository(ctx context.Context, obj *LinkValue) (*Repository, error)
	ResourcePath(ctx context.Context, obj *LinkValue) (string, error)

	UpdatedAt(ctx context.Context, obj *LinkValue) (string, error)

	ViewerReview(ctx context.Context, obj *LinkValue) (*LinkReview, error)
}
type MutationResolver interface {
	CreateGithubSession(ctx context.Context, input CreateGithubSessionInput) (*CreateSessionPayload, error)
	CreateGoogleSession(ctx context.Context, input CreateGoogleSessionInput) (*CreateSessionPayload, error)
	DeleteAccount(ctx context.Context, input DeleteAccountInput) (*DeleteAccountPayload, error)
	DeleteLink(ctx context.Context, input DeleteLinkInput) (*DeleteLinkPayload, error)
	DeleteSession(ctx context.Context, input DeleteSessionInput) (*DeleteSessionPayload, error)
	DeleteTopic(ctx context.Context, input DeleteTopicInput) (*DeleteTopicPayload, error)
	DeleteTopicTimeRange(ctx context.Context, input DeleteTopicTimeRangeInput) (*DeleteTopicTimeRangePayload, error)
	ReviewLink(ctx context.Context, input ReviewLinkInput) (*ReviewLinkPayload, error)
	SelectRepository(ctx context.Context, input SelectRepositoryInput) (*SelectRepositoryPayload, error)
	UpdateLinkTopics(ctx context.Context, input UpdateLinkTopicsInput) (*UpdateLinkTopicsPayload, error)
	UpdateSynonyms(ctx context.Context, input UpdateSynonymsInput) (*UpdateSynonymsPayload, error)
	UpdateTopic(ctx context.Context, input UpdateTopicInput) (*UpdateTopicPayload, error)
	UpdateTopicParentTopics(ctx context.Context, input UpdateTopicParentTopicsInput) (*UpdateTopicParentTopicsPayload, error)
	UpsertLink(ctx context.Context, input UpsertLinkInput) (*UpsertLinkPayload, error)
	UpsertTopic(ctx context.Context, input UpsertTopicInput) (*UpsertTopicPayload, error)
	UpsertTopicTimeRange(ctx context.Context, input UpsertTopicTimeRangeInput) (*UpsertTopicTimeRangePayload, error)
}
type OrganizationResolver interface {
	CreatedAt(ctx context.Context, obj *Organization) (string, error)
	DefaultRepository(ctx context.Context, obj *Organization) (*Repository, error)

	ResourcePath(ctx context.Context, obj *Organization) (string, error)
	UpdatedAt(ctx context.Context, obj *Organization) (string, error)
}
type QueryResolver interface {
	Alerts(ctx context.Context) ([]*Alert, error)
	FakeError(ctx context.Context) (*string, error)
	View(ctx context.Context, viewerID string, currentOrganizationLogin string, currentRepositoryName *string, repositoryIds []string, searchString *string) (*View, error)
}
type RepositoryResolver interface {
	DisplayName(ctx context.Context, obj *Repository) (string, error)
	FullName(ctx context.Context, obj *Repository) (string, error)

	Organization(ctx context.Context, obj *Repository) (*Organization, error)
	Owner(ctx context.Context, obj *Repository) (*User, error)
	RootTopic(ctx context.Context, obj *Repository) (*TopicValue, error)
}
type SynonymResolver interface {
	Locale(ctx context.Context, obj *Synonym) (LocaleIdentifier, error)
}
type TopicResolver interface {
	Activity(ctx context.Context, obj *TopicValue, first *int, after *string, last *int, before *string) (*ActivityLineItemConnection, error)
	AvailableParentTopics(ctx context.Context, obj *TopicValue, searchString *string, first *int, after *string, last *int, before *string) (*TopicConnection, error)
	ChildTopics(ctx context.Context, obj *TopicValue, searchString *string, first *int, after *string, last *int, before *string) (*TopicConnection, error)
	CreatedAt(ctx context.Context, obj *TopicValue) (string, error)
	Description(ctx context.Context, obj *TopicValue) (*string, error)
	DisplayName(ctx context.Context, obj *TopicValue, timeRange *bool) (string, error)

	Links(ctx context.Context, obj *TopicValue, first *int, after *string, last *int, before *string, searchString *string, reviewed *bool, descendants *bool) (*LinkConnection, error)
	Loading(ctx context.Context, obj *TopicValue) (bool, error)

	Organization(ctx context.Context, obj *TopicValue) (*Organization, error)
	ParentTopics(ctx context.Context, obj *TopicValue, first *int, after *string, last *int, before *string) (*TopicConnection, error)
	Repository(ctx context.Context, obj *TopicValue) (*Repository, error)
	ResourcePath(ctx context.Context, obj *TopicValue) (string, error)
	Search(ctx context.Context, obj *TopicValue, searchString string, first *int, after *string, last *int, before *string) (*SearchResultItemConnection, error)
	Synonyms(ctx context.Context, obj *TopicValue) ([]*Synonym, error)
	TimeRange(ctx context.Context, obj *TopicValue) (*TimeRange, error)
	UpdatedAt(ctx context.Context, obj *TopicValue) (string, error)
	ViewerCanDeleteSynonyms(ctx context.Context, obj *TopicValue) (bool, error)
	ViewerCanUpdate(ctx context.Context, obj *TopicValue) (bool, error)
}
type UserResolver interface {
	AvatarURL(ctx context.Context, obj *User) (string, error)
	CreatedAt(ctx context.Context, obj *User) (string, error)
	DefaultRepository(ctx context.Context, obj *User) (*Repository, error)

	Repositories(ctx context.Context, obj *User, first *int, after *string, last *int, before *string) (*RepositoryConnection, error)
	SelectedRepository(ctx context.Context, obj *User) (*Repository, error)
	UpdatedAt(ctx context.Context, obj *User) (string, error)
}
type ViewResolver interface {
	Activity(ctx context.Context, obj *View, first *int, after *string, last *int, before *string) (*ActivityLineItemConnection, error)

	DefaultOrganization(ctx context.Context, obj *View) (*Organization, error)
	Link(ctx context.Context, obj *View, id string) (*LinkValue, error)
	LinkCount(ctx context.Context, obj *View) (int, error)
	Links(ctx context.Context, obj *View, searchString *string, first *int, after *string, last *int, before *string, reviewed *bool) (*LinkConnection, error)
	QueryInfo(ctx context.Context, obj *View) (*QueryInfo, error)

	Topic(ctx context.Context, obj *View, id string) (*TopicValue, error)
	TopicCount(ctx context.Context, obj *View) (int, error)
	TopicGraph(ctx context.Context, obj *View) (*string, error)
	Topics(ctx context.Context, obj *View, searchString *string, first *int, after *string, last *int, before *string) (*TopicConnection, error)
	Viewer(ctx context.Context, obj *View) (*User, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ActivityLineItem.createdAt":
		if e.complexity.ActivityLineItem.CreatedAt == nil {
			break
		}

		return e.complexity.ActivityLineItem.CreatedAt(childComplexity), true

	case "ActivityLineItem.description":
		if e.complexity.ActivityLineItem.Description == nil {
			break
		}

		return e.complexity.ActivityLineItem.Description(childComplexity), true

	case "ActivityLineItemConnection.edges":
		if e.complexity.ActivityLineItemConnection.Edges == nil {
			break
		}

		return e.complexity.ActivityLineItemConnection.Edges(childComplexity), true

	case "ActivityLineItemConnection.pageInfo":
		if e.complexity.ActivityLineItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.ActivityLineItemConnection.PageInfo(childComplexity), true

	case "ActivityLineItemEdge.cursor":
		if e.complexity.ActivityLineItemEdge.Cursor == nil {
			break
		}

		return e.complexity.ActivityLineItemEdge.Cursor(childComplexity), true

	case "ActivityLineItemEdge.node":
		if e.complexity.ActivityLineItemEdge.Node == nil {
			break
		}

		return e.complexity.ActivityLineItemEdge.Node(childComplexity), true

	case "Alert.id":
		if e.complexity.Alert.ID == nil {
			break
		}

		return e.complexity.Alert.ID(childComplexity), true

	case "Alert.text":
		if e.complexity.Alert.Text == nil {
			break
		}

		return e.complexity.Alert.Text(childComplexity), true

	case "Alert.type":
		if e.complexity.Alert.Type == nil {
			break
		}

		return e.complexity.Alert.Type(childComplexity), true

	case "CreateSessionPayload.alerts":
		if e.complexity.CreateSessionPayload.Alerts == nil {
			break
		}

		return e.complexity.CreateSessionPayload.Alerts(childComplexity), true

	case "CreateSessionPayload.sessionEdge":
		if e.complexity.CreateSessionPayload.SessionEdge == nil {
			break
		}

		return e.complexity.CreateSessionPayload.SessionEdge(childComplexity), true

	case "CreateSessionPayload.userEdge":
		if e.complexity.CreateSessionPayload.UserEdge == nil {
			break
		}

		return e.complexity.CreateSessionPayload.UserEdge(childComplexity), true

	case "DeleteAccountPayload.alerts":
		if e.complexity.DeleteAccountPayload.Alerts == nil {
			break
		}

		return e.complexity.DeleteAccountPayload.Alerts(childComplexity), true

	case "DeleteAccountPayload.clientMutationId":
		if e.complexity.DeleteAccountPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.DeleteAccountPayload.ClientMutationID(childComplexity), true

	case "DeleteAccountPayload.deletedUserId":
		if e.complexity.DeleteAccountPayload.DeletedUserID == nil {
			break
		}

		return e.complexity.DeleteAccountPayload.DeletedUserID(childComplexity), true

	case "DeleteLinkPayload.clientMutationId":
		if e.complexity.DeleteLinkPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.DeleteLinkPayload.ClientMutationID(childComplexity), true

	case "DeleteLinkPayload.deletedLinkId":
		if e.complexity.DeleteLinkPayload.DeletedLinkID == nil {
			break
		}

		return e.complexity.DeleteLinkPayload.DeletedLinkID(childComplexity), true

	case "DeleteSessionPayload.clientMutationId":
		if e.complexity.DeleteSessionPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.DeleteSessionPayload.ClientMutationID(childComplexity), true

	case "DeleteSessionPayload.deletedSessionId":
		if e.complexity.DeleteSessionPayload.DeletedSessionID == nil {
			break
		}

		return e.complexity.DeleteSessionPayload.DeletedSessionID(childComplexity), true

	case "DeleteTopicPayload.clientMutationId":
		if e.complexity.DeleteTopicPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.DeleteTopicPayload.ClientMutationID(childComplexity), true

	case "DeleteTopicPayload.deletedTopicId":
		if e.complexity.DeleteTopicPayload.DeletedTopicID == nil {
			break
		}

		return e.complexity.DeleteTopicPayload.DeletedTopicID(childComplexity), true

	case "DeleteTopicTimeRangePayload.clientMutationId":
		if e.complexity.DeleteTopicTimeRangePayload.ClientMutationID == nil {
			break
		}

		return e.complexity.DeleteTopicTimeRangePayload.ClientMutationID(childComplexity), true

	case "DeleteTopicTimeRangePayload.deletedTimeRangeId":
		if e.complexity.DeleteTopicTimeRangePayload.DeletedTimeRangeID == nil {
			break
		}

		return e.complexity.DeleteTopicTimeRangePayload.DeletedTimeRangeID(childComplexity), true

	case "DeleteTopicTimeRangePayload.topic":
		if e.complexity.DeleteTopicTimeRangePayload.Topic == nil {
			break
		}

		return e.complexity.DeleteTopicTimeRangePayload.Topic(childComplexity), true

	case "Link.availableParentTopics":
		if e.complexity.Link.AvailableParentTopics == nil {
			break
		}

		args, err := ec.field_Link_availableParentTopics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Link.AvailableParentTopics(childComplexity, args["searchString"].(*string), args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "Link.createdAt":
		if e.complexity.Link.CreatedAt == nil {
			break
		}

		return e.complexity.Link.CreatedAt(childComplexity), true

	case "Link.id":
		if e.complexity.Link.ID == nil {
			break
		}

		return e.complexity.Link.ID(childComplexity), true

	case "Link.loading":
		if e.complexity.Link.Loading == nil {
			break
		}

		return e.complexity.Link.Loading(childComplexity), true

	case "Link.newlyAdded":
		if e.complexity.Link.NewlyAdded == nil {
			break
		}

		return e.complexity.Link.NewlyAdded(childComplexity), true

	case "Link.organization":
		if e.complexity.Link.Organization == nil {
			break
		}

		return e.complexity.Link.Organization(childComplexity), true

	case "Link.parentTopics":
		if e.complexity.Link.ParentTopics == nil {
			break
		}

		args, err := ec.field_Link_parentTopics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Link.ParentTopics(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "Link.repository":
		if e.complexity.Link.Repository == nil {
			break
		}

		return e.complexity.Link.Repository(childComplexity), true

	case "Link.resourcePath":
		if e.complexity.Link.ResourcePath == nil {
			break
		}

		return e.complexity.Link.ResourcePath(childComplexity), true

	case "Link.sha1":
		if e.complexity.Link.Sha1 == nil {
			break
		}

		return e.complexity.Link.Sha1(childComplexity), true

	case "Link.title":
		if e.complexity.Link.Title == nil {
			break
		}

		return e.complexity.Link.Title(childComplexity), true

	case "Link.url":
		if e.complexity.Link.URL == nil {
			break
		}

		return e.complexity.Link.URL(childComplexity), true

	case "Link.updatedAt":
		if e.complexity.Link.UpdatedAt == nil {
			break
		}

		return e.complexity.Link.UpdatedAt(childComplexity), true

	case "Link.viewerReview":
		if e.complexity.Link.ViewerReview == nil {
			break
		}

		return e.complexity.Link.ViewerReview(childComplexity), true

	case "LinkConnection.edges":
		if e.complexity.LinkConnection.Edges == nil {
			break
		}

		return e.complexity.LinkConnection.Edges(childComplexity), true

	case "LinkConnection.pageInfo":
		if e.complexity.LinkConnection.PageInfo == nil {
			break
		}

		return e.complexity.LinkConnection.PageInfo(childComplexity), true

	case "LinkConnection.totalCount":
		if e.complexity.LinkConnection.TotalCount == nil {
			break
		}

		return e.complexity.LinkConnection.TotalCount(childComplexity), true

	case "LinkEdge.cursor":
		if e.complexity.LinkEdge.Cursor == nil {
			break
		}

		return e.complexity.LinkEdge.Cursor(childComplexity), true

	case "LinkEdge.node":
		if e.complexity.LinkEdge.Node == nil {
			break
		}

		return e.complexity.LinkEdge.Node(childComplexity), true

	case "LinkReview.reviewedAt":
		if e.complexity.LinkReview.ReviewedAt == nil {
			break
		}

		return e.complexity.LinkReview.ReviewedAt(childComplexity), true

	case "LinkReview.user":
		if e.complexity.LinkReview.User == nil {
			break
		}

		return e.complexity.LinkReview.User(childComplexity), true

	case "Mutation.createGithubSession":
		if e.complexity.Mutation.CreateGithubSession == nil {
			break
		}

		args, err := ec.field_Mutation_createGithubSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGithubSession(childComplexity, args["input"].(CreateGithubSessionInput)), true

	case "Mutation.createGoogleSession":
		if e.complexity.Mutation.CreateGoogleSession == nil {
			break
		}

		args, err := ec.field_Mutation_createGoogleSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGoogleSession(childComplexity, args["input"].(CreateGoogleSessionInput)), true

	case "Mutation.deleteAccount":
		if e.complexity.Mutation.DeleteAccount == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccount(childComplexity, args["input"].(DeleteAccountInput)), true

	case "Mutation.deleteLink":
		if e.complexity.Mutation.DeleteLink == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLink(childComplexity, args["input"].(DeleteLinkInput)), true

	case "Mutation.deleteSession":
		if e.complexity.Mutation.DeleteSession == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSession(childComplexity, args["input"].(DeleteSessionInput)), true

	case "Mutation.deleteTopic":
		if e.complexity.Mutation.DeleteTopic == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTopic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTopic(childComplexity, args["input"].(DeleteTopicInput)), true

	case "Mutation.deleteTopicTimeRange":
		if e.complexity.Mutation.DeleteTopicTimeRange == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTopicTimeRange_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTopicTimeRange(childComplexity, args["input"].(DeleteTopicTimeRangeInput)), true

	case "Mutation.reviewLink":
		if e.complexity.Mutation.ReviewLink == nil {
			break
		}

		args, err := ec.field_Mutation_reviewLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReviewLink(childComplexity, args["input"].(ReviewLinkInput)), true

	case "Mutation.selectRepository":
		if e.complexity.Mutation.SelectRepository == nil {
			break
		}

		args, err := ec.field_Mutation_selectRepository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SelectRepository(childComplexity, args["input"].(SelectRepositoryInput)), true

	case "Mutation.updateLinkTopics":
		if e.complexity.Mutation.UpdateLinkTopics == nil {
			break
		}

		args, err := ec.field_Mutation_updateLinkTopics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLinkTopics(childComplexity, args["input"].(UpdateLinkTopicsInput)), true

	case "Mutation.updateSynonyms":
		if e.complexity.Mutation.UpdateSynonyms == nil {
			break
		}

		args, err := ec.field_Mutation_updateSynonyms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSynonyms(childComplexity, args["input"].(UpdateSynonymsInput)), true

	case "Mutation.updateTopic":
		if e.complexity.Mutation.UpdateTopic == nil {
			break
		}

		args, err := ec.field_Mutation_updateTopic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTopic(childComplexity, args["input"].(UpdateTopicInput)), true

	case "Mutation.updateTopicParentTopics":
		if e.complexity.Mutation.UpdateTopicParentTopics == nil {
			break
		}

		args, err := ec.field_Mutation_updateTopicParentTopics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTopicParentTopics(childComplexity, args["input"].(UpdateTopicParentTopicsInput)), true

	case "Mutation.upsertLink":
		if e.complexity.Mutation.UpsertLink == nil {
			break
		}

		args, err := ec.field_Mutation_upsertLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertLink(childComplexity, args["input"].(UpsertLinkInput)), true

	case "Mutation.upsertTopic":
		if e.complexity.Mutation.UpsertTopic == nil {
			break
		}

		args, err := ec.field_Mutation_upsertTopic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertTopic(childComplexity, args["input"].(UpsertTopicInput)), true

	case "Mutation.upsertTopicTimeRange":
		if e.complexity.Mutation.UpsertTopicTimeRange == nil {
			break
		}

		args, err := ec.field_Mutation_upsertTopicTimeRange_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertTopicTimeRange(childComplexity, args["input"].(UpsertTopicTimeRangeInput)), true

	case "Organization.createdAt":
		if e.complexity.Organization.CreatedAt == nil {
			break
		}

		return e.complexity.Organization.CreatedAt(childComplexity), true

	case "Organization.defaultRepository":
		if e.complexity.Organization.DefaultRepository == nil {
			break
		}

		return e.complexity.Organization.DefaultRepository(childComplexity), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.login":
		if e.complexity.Organization.Login == nil {
			break
		}

		return e.complexity.Organization.Login(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.public":
		if e.complexity.Organization.Public == nil {
			break
		}

		return e.complexity.Organization.Public(childComplexity), true

	case "Organization.resourcePath":
		if e.complexity.Organization.ResourcePath == nil {
			break
		}

		return e.complexity.Organization.ResourcePath(childComplexity), true

	case "Organization.updatedAt":
		if e.complexity.Organization.UpdatedAt == nil {
			break
		}

		return e.complexity.Organization.UpdatedAt(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.alerts":
		if e.complexity.Query.Alerts == nil {
			break
		}

		return e.complexity.Query.Alerts(childComplexity), true

	case "Query.fakeError":
		if e.complexity.Query.FakeError == nil {
			break
		}

		return e.complexity.Query.FakeError(childComplexity), true

	case "Query.view":
		if e.complexity.Query.View == nil {
			break
		}

		args, err := ec.field_Query_view_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.View(childComplexity, args["viewerId"].(string), args["currentOrganizationLogin"].(string), args["currentRepositoryName"].(*string), args["repositoryIds"].([]string), args["searchString"].(*string)), true

	case "QueryInfo.stringTokens":
		if e.complexity.QueryInfo.StringTokens == nil {
			break
		}

		return e.complexity.QueryInfo.StringTokens(childComplexity), true

	case "QueryInfo.topics":
		if e.complexity.QueryInfo.Topics == nil {
			break
		}

		return e.complexity.QueryInfo.Topics(childComplexity), true

	case "ReorderSynonymsPayload.clientMutationId":
		if e.complexity.ReorderSynonymsPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.ReorderSynonymsPayload.ClientMutationID(childComplexity), true

	case "Repository.displayColor":
		if e.complexity.Repository.DisplayColor == nil {
			break
		}

		return e.complexity.Repository.DisplayColor(childComplexity), true

	case "Repository.displayName":
		if e.complexity.Repository.DisplayName == nil {
			break
		}

		return e.complexity.Repository.DisplayName(childComplexity), true

	case "Repository.fullName":
		if e.complexity.Repository.FullName == nil {
			break
		}

		return e.complexity.Repository.FullName(childComplexity), true

	case "Repository.id":
		if e.complexity.Repository.ID == nil {
			break
		}

		return e.complexity.Repository.ID(childComplexity), true

	case "Repository.isPrivate":
		if e.complexity.Repository.IsPrivate == nil {
			break
		}

		return e.complexity.Repository.IsPrivate(childComplexity), true

	case "Repository.name":
		if e.complexity.Repository.Name == nil {
			break
		}

		return e.complexity.Repository.Name(childComplexity), true

	case "Repository.organization":
		if e.complexity.Repository.Organization == nil {
			break
		}

		return e.complexity.Repository.Organization(childComplexity), true

	case "Repository.owner":
		if e.complexity.Repository.Owner == nil {
			break
		}

		return e.complexity.Repository.Owner(childComplexity), true

	case "Repository.rootTopic":
		if e.complexity.Repository.RootTopic == nil {
			break
		}

		return e.complexity.Repository.RootTopic(childComplexity), true

	case "RepositoryConnection.edges":
		if e.complexity.RepositoryConnection.Edges == nil {
			break
		}

		return e.complexity.RepositoryConnection.Edges(childComplexity), true

	case "RepositoryEdge.cursor":
		if e.complexity.RepositoryEdge.Cursor == nil {
			break
		}

		return e.complexity.RepositoryEdge.Cursor(childComplexity), true

	case "RepositoryEdge.isSelected":
		if e.complexity.RepositoryEdge.IsSelected == nil {
			break
		}

		return e.complexity.RepositoryEdge.IsSelected(childComplexity), true

	case "RepositoryEdge.node":
		if e.complexity.RepositoryEdge.Node == nil {
			break
		}

		return e.complexity.RepositoryEdge.Node(childComplexity), true

	case "ReviewLinkPayload.link":
		if e.complexity.ReviewLinkPayload.Link == nil {
			break
		}

		return e.complexity.ReviewLinkPayload.Link(childComplexity), true

	case "SearchResultItemConnection.edges":
		if e.complexity.SearchResultItemConnection.Edges == nil {
			break
		}

		return e.complexity.SearchResultItemConnection.Edges(childComplexity), true

	case "SearchResultItemEdge.node":
		if e.complexity.SearchResultItemEdge.Node == nil {
			break
		}

		return e.complexity.SearchResultItemEdge.Node(childComplexity), true

	case "SelectRepositoryPayload.repository":
		if e.complexity.SelectRepositoryPayload.Repository == nil {
			break
		}

		return e.complexity.SelectRepositoryPayload.Repository(childComplexity), true

	case "SelectRepositoryPayload.viewer":
		if e.complexity.SelectRepositoryPayload.Viewer == nil {
			break
		}

		return e.complexity.SelectRepositoryPayload.Viewer(childComplexity), true

	case "Session.id":
		if e.complexity.Session.ID == nil {
			break
		}

		return e.complexity.Session.ID(childComplexity), true

	case "SessionEdge.cursor":
		if e.complexity.SessionEdge.Cursor == nil {
			break
		}

		return e.complexity.SessionEdge.Cursor(childComplexity), true

	case "SessionEdge.node":
		if e.complexity.SessionEdge.Node == nil {
			break
		}

		return e.complexity.SessionEdge.Node(childComplexity), true

	case "Synonym.locale":
		if e.complexity.Synonym.Locale == nil {
			break
		}

		return e.complexity.Synonym.Locale(childComplexity), true

	case "Synonym.name":
		if e.complexity.Synonym.Name == nil {
			break
		}

		return e.complexity.Synonym.Name(childComplexity), true

	case "TimeRange.endsAt":
		if e.complexity.TimeRange.EndsAt == nil {
			break
		}

		return e.complexity.TimeRange.EndsAt(childComplexity), true

	case "TimeRange.prefixFormat":
		if e.complexity.TimeRange.PrefixFormat == nil {
			break
		}

		return e.complexity.TimeRange.PrefixFormat(childComplexity), true

	case "TimeRange.startsAt":
		if e.complexity.TimeRange.StartsAt == nil {
			break
		}

		return e.complexity.TimeRange.StartsAt(childComplexity), true

	case "TimeRangeEdge.cursor":
		if e.complexity.TimeRangeEdge.Cursor == nil {
			break
		}

		return e.complexity.TimeRangeEdge.Cursor(childComplexity), true

	case "TimeRangeEdge.node":
		if e.complexity.TimeRangeEdge.Node == nil {
			break
		}

		return e.complexity.TimeRangeEdge.Node(childComplexity), true

	case "Topic.activity":
		if e.complexity.Topic.Activity == nil {
			break
		}

		args, err := ec.field_Topic_activity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.Activity(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "Topic.availableParentTopics":
		if e.complexity.Topic.AvailableParentTopics == nil {
			break
		}

		args, err := ec.field_Topic_availableParentTopics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.AvailableParentTopics(childComplexity, args["searchString"].(*string), args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "Topic.childTopics":
		if e.complexity.Topic.ChildTopics == nil {
			break
		}

		args, err := ec.field_Topic_childTopics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.ChildTopics(childComplexity, args["searchString"].(*string), args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "Topic.createdAt":
		if e.complexity.Topic.CreatedAt == nil {
			break
		}

		return e.complexity.Topic.CreatedAt(childComplexity), true

	case "Topic.description":
		if e.complexity.Topic.Description == nil {
			break
		}

		return e.complexity.Topic.Description(childComplexity), true

	case "Topic.displayName":
		if e.complexity.Topic.DisplayName == nil {
			break
		}

		args, err := ec.field_Topic_displayName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.DisplayName(childComplexity, args["timeRange"].(*bool)), true

	case "Topic.id":
		if e.complexity.Topic.ID == nil {
			break
		}

		return e.complexity.Topic.ID(childComplexity), true

	case "Topic.links":
		if e.complexity.Topic.Links == nil {
			break
		}

		args, err := ec.field_Topic_links_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.Links(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["searchString"].(*string), args["reviewed"].(*bool), args["descendants"].(*bool)), true

	case "Topic.loading":
		if e.complexity.Topic.Loading == nil {
			break
		}

		return e.complexity.Topic.Loading(childComplexity), true

	case "Topic.name":
		if e.complexity.Topic.Name == nil {
			break
		}

		return e.complexity.Topic.Name(childComplexity), true

	case "Topic.newlyAdded":
		if e.complexity.Topic.NewlyAdded == nil {
			break
		}

		return e.complexity.Topic.NewlyAdded(childComplexity), true

	case "Topic.organization":
		if e.complexity.Topic.Organization == nil {
			break
		}

		return e.complexity.Topic.Organization(childComplexity), true

	case "Topic.parentTopics":
		if e.complexity.Topic.ParentTopics == nil {
			break
		}

		args, err := ec.field_Topic_parentTopics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.ParentTopics(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "Topic.repository":
		if e.complexity.Topic.Repository == nil {
			break
		}

		return e.complexity.Topic.Repository(childComplexity), true

	case "Topic.resourcePath":
		if e.complexity.Topic.ResourcePath == nil {
			break
		}

		return e.complexity.Topic.ResourcePath(childComplexity), true

	case "Topic.search":
		if e.complexity.Topic.Search == nil {
			break
		}

		args, err := ec.field_Topic_search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.Search(childComplexity, args["searchString"].(string), args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "Topic.synonyms":
		if e.complexity.Topic.Synonyms == nil {
			break
		}

		return e.complexity.Topic.Synonyms(childComplexity), true

	case "Topic.timeRange":
		if e.complexity.Topic.TimeRange == nil {
			break
		}

		return e.complexity.Topic.TimeRange(childComplexity), true

	case "Topic.updatedAt":
		if e.complexity.Topic.UpdatedAt == nil {
			break
		}

		return e.complexity.Topic.UpdatedAt(childComplexity), true

	case "Topic.viewerCanDeleteSynonyms":
		if e.complexity.Topic.ViewerCanDeleteSynonyms == nil {
			break
		}

		return e.complexity.Topic.ViewerCanDeleteSynonyms(childComplexity), true

	case "Topic.viewerCanUpdate":
		if e.complexity.Topic.ViewerCanUpdate == nil {
			break
		}

		return e.complexity.Topic.ViewerCanUpdate(childComplexity), true

	case "TopicConnection.edges":
		if e.complexity.TopicConnection.Edges == nil {
			break
		}

		return e.complexity.TopicConnection.Edges(childComplexity), true

	case "TopicConnection.pageInfo":
		if e.complexity.TopicConnection.PageInfo == nil {
			break
		}

		return e.complexity.TopicConnection.PageInfo(childComplexity), true

	case "TopicEdge.cursor":
		if e.complexity.TopicEdge.Cursor == nil {
			break
		}

		return e.complexity.TopicEdge.Cursor(childComplexity), true

	case "TopicEdge.node":
		if e.complexity.TopicEdge.Node == nil {
			break
		}

		return e.complexity.TopicEdge.Node(childComplexity), true

	case "UpdateLinkTopicsPayload.link":
		if e.complexity.UpdateLinkTopicsPayload.Link == nil {
			break
		}

		return e.complexity.UpdateLinkTopicsPayload.Link(childComplexity), true

	case "UpdateSynonymsPayload.alerts":
		if e.complexity.UpdateSynonymsPayload.Alerts == nil {
			break
		}

		return e.complexity.UpdateSynonymsPayload.Alerts(childComplexity), true

	case "UpdateSynonymsPayload.clientMutationId":
		if e.complexity.UpdateSynonymsPayload.ClientMutationID == nil {
			break
		}

		return e.complexity.UpdateSynonymsPayload.ClientMutationID(childComplexity), true

	case "UpdateSynonymsPayload.topic":
		if e.complexity.UpdateSynonymsPayload.Topic == nil {
			break
		}

		return e.complexity.UpdateSynonymsPayload.Topic(childComplexity), true

	case "UpdateTopicParentTopicsPayload.alerts":
		if e.complexity.UpdateTopicParentTopicsPayload.Alerts == nil {
			break
		}

		return e.complexity.UpdateTopicParentTopicsPayload.Alerts(childComplexity), true

	case "UpdateTopicParentTopicsPayload.topic":
		if e.complexity.UpdateTopicParentTopicsPayload.Topic == nil {
			break
		}

		return e.complexity.UpdateTopicParentTopicsPayload.Topic(childComplexity), true

	case "UpdateTopicPayload.alerts":
		if e.complexity.UpdateTopicPayload.Alerts == nil {
			break
		}

		return e.complexity.UpdateTopicPayload.Alerts(childComplexity), true

	case "UpdateTopicPayload.topic":
		if e.complexity.UpdateTopicPayload.Topic == nil {
			break
		}

		return e.complexity.UpdateTopicPayload.Topic(childComplexity), true

	case "UpsertLinkPayload.alerts":
		if e.complexity.UpsertLinkPayload.Alerts == nil {
			break
		}

		return e.complexity.UpsertLinkPayload.Alerts(childComplexity), true

	case "UpsertLinkPayload.linkEdge":
		if e.complexity.UpsertLinkPayload.LinkEdge == nil {
			break
		}

		return e.complexity.UpsertLinkPayload.LinkEdge(childComplexity), true

	case "UpsertTopicPayload.alerts":
		if e.complexity.UpsertTopicPayload.Alerts == nil {
			break
		}

		return e.complexity.UpsertTopicPayload.Alerts(childComplexity), true

	case "UpsertTopicPayload.topicEdge":
		if e.complexity.UpsertTopicPayload.TopicEdge == nil {
			break
		}

		return e.complexity.UpsertTopicPayload.TopicEdge(childComplexity), true

	case "UpsertTopicTimeRangePayload.alerts":
		if e.complexity.UpsertTopicTimeRangePayload.Alerts == nil {
			break
		}

		return e.complexity.UpsertTopicTimeRangePayload.Alerts(childComplexity), true

	case "UpsertTopicTimeRangePayload.timeRangeEdge":
		if e.complexity.UpsertTopicTimeRangePayload.TimeRangeEdge == nil {
			break
		}

		return e.complexity.UpsertTopicTimeRangePayload.TimeRangeEdge(childComplexity), true

	case "UpsertTopicTimeRangePayload.topic":
		if e.complexity.UpsertTopicTimeRangePayload.Topic == nil {
			break
		}

		return e.complexity.UpsertTopicTimeRangePayload.Topic(childComplexity), true

	case "User.avatarUrl":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.defaultRepository":
		if e.complexity.User.DefaultRepository == nil {
			break
		}

		return e.complexity.User.DefaultRepository(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isGuest":
		if e.complexity.User.IsGuest == nil {
			break
		}

		return e.complexity.User.IsGuest(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.primaryEmail":
		if e.complexity.User.PrimaryEmail == nil {
			break
		}

		return e.complexity.User.PrimaryEmail(childComplexity), true

	case "User.repositories":
		if e.complexity.User.Repositories == nil {
			break
		}

		args, err := ec.field_User_repositories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Repositories(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "User.selectedRepository":
		if e.complexity.User.SelectedRepository == nil {
			break
		}

		return e.complexity.User.SelectedRepository(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "View.activity":
		if e.complexity.View.Activity == nil {
			break
		}

		args, err := ec.field_View_activity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.View.Activity(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "View.currentRepository":
		if e.complexity.View.CurrentRepository == nil {
			break
		}

		return e.complexity.View.CurrentRepository(childComplexity), true

	case "View.defaultOrganization":
		if e.complexity.View.DefaultOrganization == nil {
			break
		}

		return e.complexity.View.DefaultOrganization(childComplexity), true

	case "View.link":
		if e.complexity.View.Link == nil {
			break
		}

		args, err := ec.field_View_link_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.View.Link(childComplexity, args["id"].(string)), true

	case "View.linkCount":
		if e.complexity.View.LinkCount == nil {
			break
		}

		return e.complexity.View.LinkCount(childComplexity), true

	case "View.links":
		if e.complexity.View.Links == nil {
			break
		}

		args, err := ec.field_View_links_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.View.Links(childComplexity, args["searchString"].(*string), args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["reviewed"].(*bool)), true

	case "View.queryInfo":
		if e.complexity.View.QueryInfo == nil {
			break
		}

		return e.complexity.View.QueryInfo(childComplexity), true

	case "View.searchString":
		if e.complexity.View.SearchString == nil {
			break
		}

		return e.complexity.View.SearchString(childComplexity), true

	case "View.topic":
		if e.complexity.View.Topic == nil {
			break
		}

		args, err := ec.field_View_topic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.View.Topic(childComplexity, args["id"].(string)), true

	case "View.topicCount":
		if e.complexity.View.TopicCount == nil {
			break
		}

		return e.complexity.View.TopicCount(childComplexity), true

	case "View.topicGraph":
		if e.complexity.View.TopicGraph == nil {
			break
		}

		return e.complexity.View.TopicGraph(childComplexity), true

	case "View.topics":
		if e.complexity.View.Topics == nil {
			break
		}

		args, err := ec.field_View_topics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.View.Topics(childComplexity, args["searchString"].(*string), args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string)), true

	case "View.viewer":
		if e.complexity.View.Viewer == nil {
			break
		}

		return e.complexity.View.Viewer(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateGithubSessionInput,
		ec.unmarshalInputCreateGoogleSessionInput,
		ec.unmarshalInputDeleteAccountInput,
		ec.unmarshalInputDeleteLinkInput,
		ec.unmarshalInputDeleteSessionInput,
		ec.unmarshalInputDeleteTopicInput,
		ec.unmarshalInputDeleteTopicTimeRangeInput,
		ec.unmarshalInputReorderSynonymsInput,
		ec.unmarshalInputReviewLinkInput,
		ec.unmarshalInputSelectRepositoryInput,
		ec.unmarshalInputSynonymInput,
		ec.unmarshalInputUpdateLinkTopicsInput,
		ec.unmarshalInputUpdateSynonymsInput,
		ec.unmarshalInputUpdateTopicInput,
		ec.unmarshalInputUpdateTopicParentTopicsInput,
		ec.unmarshalInputUpsertLinkInput,
		ec.unmarshalInputUpsertTopicInput,
		ec.unmarshalInputUpsertTopicTimeRangeInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../schema.graphql", Input: `type ActivityLineItem {
  description: String!
  createdAt: DateTime!
}

type ActivityLineItemEdge {
  cursor: String!
  node: ActivityLineItem!
}

type ActivityLineItemConnection {
  edges: [ActivityLineItemEdge]
  pageInfo: PageInfo!
}

type Alert {
  text: String!
  type: AlertType!
  id: String!
}

interface Alertable {
  alerts: [Alert!]!
}

enum AlertType {
  SUCCESS
  WARN
  ERROR
}

scalar Color

input CreateGithubSessionInput {
  clientMutationId: String
  githubAvatarUrl: String!
  githubUsername: String!
  name: String!
  primaryEmail: String!
  serverSecret: String!
}

input CreateGoogleSessionInput {
  clientMutationId: String
  googleAvatarUrl: String!
  googleProfileId: String!
  name: String!
  primaryEmail: String!
  serverSecret: String!
}

type CreateSessionPayload implements Alertable {
  alerts: [Alert!]!
  userEdge: UserEdge
  sessionEdge: SessionEdge
}

scalar DateTime

input DeleteAccountInput {
  clientMutationId: String
  userId: ID!
}

type DeleteAccountPayload implements Alertable {
  alerts: [Alert!]!
  clientMutationId: String
  deletedUserId: ID!
}

input DeleteLinkInput {
  clientMutationId: String
  linkId: ID!
}

type DeleteLinkPayload {
  clientMutationId: String
  deletedLinkId: ID!
}

input DeleteSessionInput {
  clientMutationId: String
  sessionId: ID!
}

type DeleteSessionPayload {
  clientMutationId: String
  deletedSessionId: ID!
}

input DeleteTopicInput {
  clientMutationId: String
  topicId: ID!
}

type DeleteTopicPayload {
  clientMutationId: String
  deletedTopicId: ID!
}

input DeleteTopicTimeRangeInput {
  clientMutationId: String
  topicId: ID!
}

type DeleteTopicTimeRangePayload {
  clientMutationId: String
  deletedTimeRangeId: ID
  topic: Topic!
}

type Link implements ResourceIdentifiable & Namespaceable {
  availableParentTopics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  createdAt: DateTime!
  id: ID!
  loading: Boolean!
  newlyAdded: Boolean!
  organization: Organization!
  parentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  repository: Repository!
  resourcePath: String!
  sha1: String!
  title: String!
  updatedAt: DateTime!
  url: String!
  viewerReview: LinkReview
}

type LinkEdge {
  cursor: String!
  node: Link!
}

type LinkConnection {
  edges: [LinkEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

enum LocaleIdentifier {
  ar
  de
  el
  en
  es
  fa
  fi
  fr
  hi
  it
  ja
  ji
  ko
  la
  nl
  no
  pt
  ru
  sv
  tr
  uk
  zh
}

type LinkReview {
  reviewedAt: DateTime
  user: User!
}

type Mutation {
  createGithubSession(input: CreateGithubSessionInput!): CreateSessionPayload
  createGoogleSession(input: CreateGoogleSessionInput!): CreateSessionPayload
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload
  deleteLink(input: DeleteLinkInput!): DeleteLinkPayload
  deleteSession(input: DeleteSessionInput!): DeleteSessionPayload
  deleteTopic(input: DeleteTopicInput!): DeleteTopicPayload
  deleteTopicTimeRange(input: DeleteTopicTimeRangeInput!): DeleteTopicTimeRangePayload
  reviewLink(input: ReviewLinkInput!): ReviewLinkPayload
  selectRepository(input: SelectRepositoryInput!): SelectRepositoryPayload
  updateLinkTopics(input: UpdateLinkTopicsInput!): UpdateLinkTopicsPayload
  updateSynonyms(input: UpdateSynonymsInput!): UpdateSynonymsPayload
  updateTopic(input: UpdateTopicInput!): UpdateTopicPayload
  updateTopicParentTopics(input: UpdateTopicParentTopicsInput!): UpdateTopicParentTopicsPayload
  upsertLink(input: UpsertLinkInput!): UpsertLinkPayload
  upsertTopic(input: UpsertTopicInput!): UpsertTopicPayload
  upsertTopicTimeRange(input: UpsertTopicTimeRangeInput!): UpsertTopicTimeRangePayload
}

interface Namespaceable {
  organization: Organization!
}

type Organization implements ResourceIdentifiable {
  createdAt: DateTime!
  defaultRepository: Repository!
  id: ID
  login: String!
  name: String!
  public: Boolean!
  resourcePath: String!
  updatedAt: DateTime!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type QueryInfo {
  topics: TopicConnection!
  stringTokens: [String!]!
}

enum TimeRangePrefixFormat {
  NONE
  START_YEAR
  START_YEAR_MONTH
}

type Query {
  # Workaround for Relay Modern weirdness
  alerts: [Alert!]!
  fakeError: String
  view(
    viewerId: ID!
    currentOrganizationLogin: String!,
    currentRepositoryName: String,
    repositoryIds: [ID!],
    searchString: String,
  ): View!
}

input ReorderSynonymsInput {
  clientMutationId: String
  synonymIds: [ID!]!
  topicId: ID!
}

type ReorderSynonymsPayload {
  clientMutationId: String
}

type Repository {
  displayColor: Color!
  displayName: String!
  fullName: String!
  id: ID
  isPrivate: Boolean!
  name: String!
  organization: Organization!
  owner: User!
  rootTopic: Topic!
}

type RepositoryConnection {
  edges: [RepositoryEdge]
}

type RepositoryEdge {
  cursor: String!
  node: Repository!
  isSelected: Boolean!
}

interface ResourceIdentifiable {
  resourcePath: String!
}

input ReviewLinkInput {
  clientMutationId: String
  linkId: ID!
  reviewed: Boolean!
}

type ReviewLinkPayload {
  link: Link!
}

union SearchResultItem = Topic | Link

type SearchResultItemEdge {
  node: SearchResultItem!
}

type SearchResultItemConnection {
  edges: [SearchResultItemEdge]
}

input SelectRepositoryInput {
  clientMutationId: String
  repositoryId: ID
}

type SelectRepositoryPayload {
  repository: Repository
  viewer: User!
}

type Synonym {
  locale: LocaleIdentifier!
  name: String!
}

type Topic implements ResourceIdentifiable & Namespaceable {
  activity(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): ActivityLineItemConnection!
  availableParentTopics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  childTopics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  createdAt: DateTime!
  description: String
  displayName(
    timeRange: Boolean,
  ): String!
  id: ID!
  links(
    first: Int,
    after: String,
    last: Int,
    before: String,
    searchString: String,
    reviewed: Boolean,
    descendants: Boolean,
  ): LinkConnection!
  loading: Boolean!
  name: String!
  newlyAdded: Boolean!
  organization: Organization!
  parentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  repository: Repository!
  resourcePath: String!
  search(
    searchString: String!,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): SearchResultItemConnection!
  synonyms: [Synonym!]!
  timeRange: TimeRange
  updatedAt: DateTime!
  viewerCanDeleteSynonyms: Boolean!
  viewerCanUpdate: Boolean!
}

type TimeRange {
  startsAt: DateTime!
  endsAt: DateTime
  prefixFormat: TimeRangePrefixFormat!
}

type TopicEdge {
  cursor: String!
  node: Topic!
}

type TimeRangeEdge {
  cursor: String!
  node: TimeRange!
}

type TopicConnection {
  edges: [TopicEdge]
  pageInfo: PageInfo!
}

type User {
  avatarUrl: String!
  createdAt: DateTime!
  defaultRepository: Repository
  id: ID
  isGuest: Boolean!
  name: String!
  primaryEmail: String!
  repositories(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): RepositoryConnection!
  selectedRepository: Repository
  updatedAt: DateTime!
}

type UserEdge {
  cursor: String!
  node: User!
}

type Session {
  id: ID!
}

type SessionEdge {
  cursor: String!
  node: Session!
}

input SynonymInput {
  name: String!
  locale: String!
}

input UpdateSynonymsInput {
  clientMutationId: String
  synonyms: [SynonymInput!]!
  topicId: ID!
}

type UpdateSynonymsPayload {
  alerts: [Alert!]!
  clientMutationId: String
  topic: Topic
}

input UpdateTopicInput {
  clientMutationId: String
  description: String
  id: ID!
  name: String!
  topicIds: [ID!]
}

type UpdateTopicPayload {
  alerts: [Alert!]!
  topic: Topic!
}

input UpdateLinkTopicsInput {
  clientMutationId: String
  linkId: ID!
  parentTopicIds: [ID!]
}

type UpdateLinkTopicsPayload {
  link: Link!
}

input UpdateTopicParentTopicsInput {
  clientMutationId: String
  topicId: ID!
  parentTopicIds: [ID!]
}

type UpdateTopicParentTopicsPayload implements Alertable {
  alerts: [Alert!]!
  topic: Topic!
}

input UpsertLinkInput {
  addParentTopicIds: [String!]
  clientMutationId: String
  organizationLogin: String!
  repositoryName: String!
  title: String
  url: String!
}

type UpsertLinkPayload implements Alertable {
  alerts: [Alert!]!
  linkEdge: LinkEdge
}

input UpsertTopicInput {
  clientMutationId: String
  description: String
  name: String!
  organizationLogin: String!
  repositoryName: String!
  topicIds: [String!]
}

input UpsertTopicTimeRangeInput {
  clientMutationId: String
  topicId: ID!
  startsAt: DateTime!
  endsAt: DateTime
  prefixFormat: TimeRangePrefixFormat!
}

type UpsertTopicPayload implements Alertable {
  alerts: [Alert!]!
  topicEdge: TopicEdge
}

type UpsertTopicTimeRangePayload implements Alertable {
  alerts: [Alert!]!
  timeRangeEdge: TimeRangeEdge
  topic: Topic!
}

type View {
  activity(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): ActivityLineItemConnection!
  currentRepository: Repository
  defaultOrganization: Organization!
  link(id: ID!): Link
  linkCount: Int!
  links(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String,
    reviewed: Boolean,
  ): LinkConnection!
  queryInfo: QueryInfo!
  searchString: String
  topic(id: ID!): Topic
  topicCount: Int!
  topicGraph: String
  topics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  viewer: User!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Link_availableParentTopics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["searchString"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchString"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	return args, nil
}

func (ec *executionContext) field_Link_parentTopics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_createGithubSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateGithubSessionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateGithubSessionInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐCreateGithubSessionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createGoogleSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateGoogleSessionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateGoogleSessionInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐCreateGoogleSessionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteAccountInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteLinkInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteSessionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteSessionInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteSessionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTopicTimeRange_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteTopicTimeRangeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteTopicTimeRangeInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteTopicTimeRangeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTopic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteTopicInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteTopicInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteTopicInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_reviewLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ReviewLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNReviewLinkInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐReviewLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_selectRepository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SelectRepositoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSelectRepositoryInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSelectRepositoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLinkTopics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateLinkTopicsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateLinkTopicsInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateLinkTopicsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSynonyms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateSynonymsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateSynonymsInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateSynonymsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTopicParentTopics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateTopicParentTopicsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateTopicParentTopicsInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateTopicParentTopicsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTopic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateTopicInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateTopicInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateTopicInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpsertLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpsertLinkInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertTopicTimeRange_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpsertTopicTimeRangeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpsertTopicTimeRangeInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertTopicTimeRangeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertTopic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpsertTopicInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpsertTopicInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertTopicInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_view_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["viewerId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("viewerId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["viewerId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["currentOrganizationLogin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentOrganizationLogin"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currentOrganizationLogin"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["currentRepositoryName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentRepositoryName"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currentRepositoryName"] = arg2
	var arg3 []string
	if tmp, ok := rawArgs["repositoryIds"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryIds"))
		arg3, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["repositoryIds"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["searchString"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchString"] = arg4
	return args, nil
}

func (ec *executionContext) field_Topic_activity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Topic_availableParentTopics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["searchString"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchString"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	return args, nil
}

func (ec *executionContext) field_Topic_childTopics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["searchString"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchString"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	return args, nil
}

func (ec *executionContext) field_Topic_displayName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["timeRange"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeRange"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeRange"] = arg0
	return args, nil
}

func (ec *executionContext) field_Topic_links_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["searchString"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchString"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["reviewed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewed"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reviewed"] = arg5
	var arg6 *bool
	if tmp, ok := rawArgs["descendants"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descendants"))
		arg6, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["descendants"] = arg6
	return args, nil
}

func (ec *executionContext) field_Topic_parentTopics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Topic_search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchString"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchString"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	return args, nil
}

func (ec *executionContext) field_User_repositories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_View_activity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_View_link_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_View_links_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["searchString"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchString"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["reviewed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewed"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reviewed"] = arg5
	return args, nil
}

func (ec *executionContext) field_View_topic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_View_topics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["searchString"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchString"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActivityLineItem_description(ctx context.Context, field graphql.CollectedField, obj *ActivityLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityLineItem_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityLineItem_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLineItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *ActivityLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityLineItem_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityLineItem_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLineItemConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ActivityLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityLineItemConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ActivityLineItemEdge)
	fc.Result = res
	return ec.marshalOActivityLineItemEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItemEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityLineItemConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ActivityLineItemEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ActivityLineItemEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityLineItemEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLineItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ActivityLineItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityLineItemConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityLineItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLineItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLineItemEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ActivityLineItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityLineItemEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityLineItemEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLineItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLineItemEdge_node(ctx context.Context, field graphql.CollectedField, obj *ActivityLineItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActivityLineItemEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ActivityLineItem)
	fc.Result = res
	return ec.marshalNActivityLineItem2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActivityLineItemEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLineItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_ActivityLineItem_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActivityLineItem_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_text(ctx context.Context, field graphql.CollectedField, obj *Alert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Alert_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Alert_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_type(ctx context.Context, field graphql.CollectedField, obj *Alert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Alert_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(AlertType)
	fc.Result = res
	return ec.marshalNAlertType2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Alert_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_id(ctx context.Context, field graphql.CollectedField, obj *Alert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Alert_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Alert_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateSessionPayload_alerts(ctx context.Context, field graphql.CollectedField, obj *CreateSessionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateSessionPayload_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateSessionPayload_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateSessionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateSessionPayload_userEdge(ctx context.Context, field graphql.CollectedField, obj *CreateSessionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateSessionPayload_userEdge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEdge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserEdge)
	fc.Result = res
	return ec.marshalOUserEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUserEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateSessionPayload_userEdge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateSessionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_UserEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_UserEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateSessionPayload_sessionEdge(ctx context.Context, field graphql.CollectedField, obj *CreateSessionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateSessionPayload_sessionEdge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SessionEdge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SessionEdge)
	fc.Result = res
	return ec.marshalOSessionEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSessionEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateSessionPayload_sessionEdge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateSessionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_SessionEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_SessionEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SessionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteAccountPayload_alerts(ctx context.Context, field graphql.CollectedField, obj *DeleteAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteAccountPayload_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteAccountPayload_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteAccountPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *DeleteAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteAccountPayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteAccountPayload_clientMutationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteAccountPayload_deletedUserId(ctx context.Context, field graphql.CollectedField, obj *DeleteAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteAccountPayload_deletedUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteAccountPayload_deletedUserId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteLinkPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *DeleteLinkPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteLinkPayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteLinkPayload_clientMutationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteLinkPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteLinkPayload_deletedLinkId(ctx context.Context, field graphql.CollectedField, obj *DeleteLinkPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteLinkPayload_deletedLinkId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedLinkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteLinkPayload_deletedLinkId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteLinkPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteSessionPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *DeleteSessionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteSessionPayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteSessionPayload_clientMutationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteSessionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteSessionPayload_deletedSessionId(ctx context.Context, field graphql.CollectedField, obj *DeleteSessionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteSessionPayload_deletedSessionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedSessionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteSessionPayload_deletedSessionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteSessionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTopicPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *DeleteTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTopicPayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTopicPayload_clientMutationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTopicPayload_deletedTopicId(ctx context.Context, field graphql.CollectedField, obj *DeleteTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTopicPayload_deletedTopicId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedTopicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTopicPayload_deletedTopicId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTopicTimeRangePayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *DeleteTopicTimeRangePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTopicTimeRangePayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTopicTimeRangePayload_clientMutationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTopicTimeRangePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTopicTimeRangePayload_deletedTimeRangeId(ctx context.Context, field graphql.CollectedField, obj *DeleteTopicTimeRangePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTopicTimeRangePayload_deletedTimeRangeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedTimeRangeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTopicTimeRangePayload_deletedTimeRangeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTopicTimeRangePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTopicTimeRangePayload_topic(ctx context.Context, field graphql.CollectedField, obj *DeleteTopicTimeRangePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTopicTimeRangePayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicValue)
	fc.Result = res
	return ec.marshalNTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTopicTimeRangePayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTopicTimeRangePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_Topic_activity(ctx, field)
			case "availableParentTopics":
				return ec.fieldContext_Topic_availableParentTopics(ctx, field)
			case "childTopics":
				return ec.fieldContext_Topic_childTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "displayName":
				return ec.fieldContext_Topic_displayName(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "links":
				return ec.fieldContext_Topic_links(ctx, field)
			case "loading":
				return ec.fieldContext_Topic_loading(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Topic_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Topic_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Topic_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Topic_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Topic_resourcePath(ctx, field)
			case "search":
				return ec.fieldContext_Topic_search(ctx, field)
			case "synonyms":
				return ec.fieldContext_Topic_synonyms(ctx, field)
			case "timeRange":
				return ec.fieldContext_Topic_timeRange(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "viewerCanDeleteSynonyms":
				return ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
			case "viewerCanUpdate":
				return ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_availableParentTopics(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_availableParentTopics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().AvailableParentTopics(rctx, obj, fc.Args["searchString"].(*string), fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicConnection)
	fc.Result = res
	return ec.marshalNTopicConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_availableParentTopics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TopicConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TopicConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Link_availableParentTopics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Link_createdAt(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_id(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_loading(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_loading(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().Loading(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_loading(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_newlyAdded(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_newlyAdded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewlyAdded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_newlyAdded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_organization(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().Organization(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_Organization_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "login":
				return ec.fieldContext_Organization_login(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Organization_resourcePath(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_parentTopics(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_parentTopics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().ParentTopics(rctx, obj, fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicConnection)
	fc.Result = res
	return ec.marshalNTopicConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_parentTopics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TopicConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TopicConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Link_parentTopics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Link_repository(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_repository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().Repository(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Repository)
	fc.Result = res
	return ec.marshalNRepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_repository(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayColor":
				return ec.fieldContext_Repository_displayColor(ctx, field)
			case "displayName":
				return ec.fieldContext_Repository_displayName(ctx, field)
			case "fullName":
				return ec.fieldContext_Repository_fullName(ctx, field)
			case "id":
				return ec.fieldContext_Repository_id(ctx, field)
			case "isPrivate":
				return ec.fieldContext_Repository_isPrivate(ctx, field)
			case "name":
				return ec.fieldContext_Repository_name(ctx, field)
			case "organization":
				return ec.fieldContext_Repository_organization(ctx, field)
			case "owner":
				return ec.fieldContext_Repository_owner(ctx, field)
			case "rootTopic":
				return ec.fieldContext_Repository_rootTopic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Repository", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_resourcePath(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_resourcePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().ResourcePath(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_resourcePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_sha1(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_sha1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sha1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_sha1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_title(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_updatedAt(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_url(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_viewerReview(ctx context.Context, field graphql.CollectedField, obj *LinkValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_viewerReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Link().ViewerReview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*LinkReview)
	fc.Result = res
	return ec.marshalOLinkReview2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkReview(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_viewerReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "reviewedAt":
				return ec.fieldContext_LinkReview_reviewedAt(ctx, field)
			case "user":
				return ec.fieldContext_LinkReview_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LinkReview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkConnection_edges(ctx context.Context, field graphql.CollectedField, obj *LinkConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LinkEdge)
	fc.Result = res
	return ec.marshalOLinkEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_LinkEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_LinkEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LinkEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *LinkConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *LinkConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *LinkEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkEdge_node(ctx context.Context, field graphql.CollectedField, obj *LinkEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LinkValue)
	fc.Result = res
	return ec.marshalNLink2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableParentTopics":
				return ec.fieldContext_Link_availableParentTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Link_createdAt(ctx, field)
			case "id":
				return ec.fieldContext_Link_id(ctx, field)
			case "loading":
				return ec.fieldContext_Link_loading(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Link_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Link_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Link_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Link_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Link_resourcePath(ctx, field)
			case "sha1":
				return ec.fieldContext_Link_sha1(ctx, field)
			case "title":
				return ec.fieldContext_Link_title(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Link_updatedAt(ctx, field)
			case "url":
				return ec.fieldContext_Link_url(ctx, field)
			case "viewerReview":
				return ec.fieldContext_Link_viewerReview(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkReview_reviewedAt(ctx context.Context, field graphql.CollectedField, obj *LinkReview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkReview_reviewedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkReview_reviewedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkReview_user(ctx context.Context, field graphql.CollectedField, obj *LinkReview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkReview_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkReview_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_User_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "isGuest":
				return ec.fieldContext_User_isGuest(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "primaryEmail":
				return ec.fieldContext_User_primaryEmail(ctx, field)
			case "repositories":
				return ec.fieldContext_User_repositories(ctx, field)
			case "selectedRepository":
				return ec.fieldContext_User_selectedRepository(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGithubSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGithubSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGithubSession(rctx, fc.Args["input"].(CreateGithubSessionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CreateSessionPayload)
	fc.Result = res
	return ec.marshalOCreateSessionPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐCreateSessionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGithubSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_CreateSessionPayload_alerts(ctx, field)
			case "userEdge":
				return ec.fieldContext_CreateSessionPayload_userEdge(ctx, field)
			case "sessionEdge":
				return ec.fieldContext_CreateSessionPayload_sessionEdge(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateSessionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGithubSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGoogleSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGoogleSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGoogleSession(rctx, fc.Args["input"].(CreateGoogleSessionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CreateSessionPayload)
	fc.Result = res
	return ec.marshalOCreateSessionPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐCreateSessionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGoogleSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_CreateSessionPayload_alerts(ctx, field)
			case "userEdge":
				return ec.fieldContext_CreateSessionPayload_userEdge(ctx, field)
			case "sessionEdge":
				return ec.fieldContext_CreateSessionPayload_sessionEdge(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateSessionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGoogleSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAccount(rctx, fc.Args["input"].(DeleteAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteAccountPayload)
	fc.Result = res
	return ec.marshalODeleteAccountPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_DeleteAccountPayload_alerts(ctx, field)
			case "clientMutationId":
				return ec.fieldContext_DeleteAccountPayload_clientMutationId(ctx, field)
			case "deletedUserId":
				return ec.fieldContext_DeleteAccountPayload_deletedUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLink(rctx, fc.Args["input"].(DeleteLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteLinkPayload)
	fc.Result = res
	return ec.marshalODeleteLinkPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteLinkPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationId":
				return ec.fieldContext_DeleteLinkPayload_clientMutationId(ctx, field)
			case "deletedLinkId":
				return ec.fieldContext_DeleteLinkPayload_deletedLinkId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteLinkPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSession(rctx, fc.Args["input"].(DeleteSessionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteSessionPayload)
	fc.Result = res
	return ec.marshalODeleteSessionPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteSessionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationId":
				return ec.fieldContext_DeleteSessionPayload_clientMutationId(ctx, field)
			case "deletedSessionId":
				return ec.fieldContext_DeleteSessionPayload_deletedSessionId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteSessionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTopic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTopic(rctx, fc.Args["input"].(DeleteTopicInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteTopicPayload)
	fc.Result = res
	return ec.marshalODeleteTopicPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteTopicPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationId":
				return ec.fieldContext_DeleteTopicPayload_clientMutationId(ctx, field)
			case "deletedTopicId":
				return ec.fieldContext_DeleteTopicPayload_deletedTopicId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteTopicPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTopicTimeRange(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTopicTimeRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTopicTimeRange(rctx, fc.Args["input"].(DeleteTopicTimeRangeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteTopicTimeRangePayload)
	fc.Result = res
	return ec.marshalODeleteTopicTimeRangePayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteTopicTimeRangePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTopicTimeRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientMutationId":
				return ec.fieldContext_DeleteTopicTimeRangePayload_clientMutationId(ctx, field)
			case "deletedTimeRangeId":
				return ec.fieldContext_DeleteTopicTimeRangePayload_deletedTimeRangeId(ctx, field)
			case "topic":
				return ec.fieldContext_DeleteTopicTimeRangePayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteTopicTimeRangePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTopicTimeRange_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reviewLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reviewLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReviewLink(rctx, fc.Args["input"].(ReviewLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ReviewLinkPayload)
	fc.Result = res
	return ec.marshalOReviewLinkPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐReviewLinkPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reviewLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "link":
				return ec.fieldContext_ReviewLinkPayload_link(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReviewLinkPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reviewLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_selectRepository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_selectRepository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SelectRepository(rctx, fc.Args["input"].(SelectRepositoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SelectRepositoryPayload)
	fc.Result = res
	return ec.marshalOSelectRepositoryPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSelectRepositoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_selectRepository(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "repository":
				return ec.fieldContext_SelectRepositoryPayload_repository(ctx, field)
			case "viewer":
				return ec.fieldContext_SelectRepositoryPayload_viewer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SelectRepositoryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_selectRepository_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLinkTopics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLinkTopics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLinkTopics(rctx, fc.Args["input"].(UpdateLinkTopicsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UpdateLinkTopicsPayload)
	fc.Result = res
	return ec.marshalOUpdateLinkTopicsPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateLinkTopicsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLinkTopics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "link":
				return ec.fieldContext_UpdateLinkTopicsPayload_link(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateLinkTopicsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLinkTopics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSynonyms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSynonyms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSynonyms(rctx, fc.Args["input"].(UpdateSynonymsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UpdateSynonymsPayload)
	fc.Result = res
	return ec.marshalOUpdateSynonymsPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateSynonymsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSynonyms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_UpdateSynonymsPayload_alerts(ctx, field)
			case "clientMutationId":
				return ec.fieldContext_UpdateSynonymsPayload_clientMutationId(ctx, field)
			case "topic":
				return ec.fieldContext_UpdateSynonymsPayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSynonymsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSynonyms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTopic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTopic(rctx, fc.Args["input"].(UpdateTopicInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UpdateTopicPayload)
	fc.Result = res
	return ec.marshalOUpdateTopicPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateTopicPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_UpdateTopicPayload_alerts(ctx, field)
			case "topic":
				return ec.fieldContext_UpdateTopicPayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateTopicPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTopicParentTopics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTopicParentTopics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTopicParentTopics(rctx, fc.Args["input"].(UpdateTopicParentTopicsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UpdateTopicParentTopicsPayload)
	fc.Result = res
	return ec.marshalOUpdateTopicParentTopicsPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateTopicParentTopicsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTopicParentTopics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_UpdateTopicParentTopicsPayload_alerts(ctx, field)
			case "topic":
				return ec.fieldContext_UpdateTopicParentTopicsPayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateTopicParentTopicsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTopicParentTopics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_upsertLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_upsertLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertLink(rctx, fc.Args["input"].(UpsertLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UpsertLinkPayload)
	fc.Result = res
	return ec.marshalOUpsertLinkPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertLinkPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_upsertLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_UpsertLinkPayload_alerts(ctx, field)
			case "linkEdge":
				return ec.fieldContext_UpsertLinkPayload_linkEdge(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpsertLinkPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_upsertLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_upsertTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_upsertTopic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertTopic(rctx, fc.Args["input"].(UpsertTopicInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UpsertTopicPayload)
	fc.Result = res
	return ec.marshalOUpsertTopicPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertTopicPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_upsertTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_UpsertTopicPayload_alerts(ctx, field)
			case "topicEdge":
				return ec.fieldContext_UpsertTopicPayload_topicEdge(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpsertTopicPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_upsertTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_upsertTopicTimeRange(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_upsertTopicTimeRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertTopicTimeRange(rctx, fc.Args["input"].(UpsertTopicTimeRangeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UpsertTopicTimeRangePayload)
	fc.Result = res
	return ec.marshalOUpsertTopicTimeRangePayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertTopicTimeRangePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_upsertTopicTimeRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alerts":
				return ec.fieldContext_UpsertTopicTimeRangePayload_alerts(ctx, field)
			case "timeRangeEdge":
				return ec.fieldContext_UpsertTopicTimeRangePayload_timeRangeEdge(ctx, field)
			case "topic":
				return ec.fieldContext_UpsertTopicTimeRangePayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpsertTopicTimeRangePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_upsertTopicTimeRange_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Organization_createdAt(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_defaultRepository(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_defaultRepository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().DefaultRepository(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Repository)
	fc.Result = res
	return ec.marshalNRepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_defaultRepository(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayColor":
				return ec.fieldContext_Repository_displayColor(ctx, field)
			case "displayName":
				return ec.fieldContext_Repository_displayName(ctx, field)
			case "fullName":
				return ec.fieldContext_Repository_fullName(ctx, field)
			case "id":
				return ec.fieldContext_Repository_id(ctx, field)
			case "isPrivate":
				return ec.fieldContext_Repository_isPrivate(ctx, field)
			case "name":
				return ec.fieldContext_Repository_name(ctx, field)
			case "organization":
				return ec.fieldContext_Repository_organization(ctx, field)
			case "owner":
				return ec.fieldContext_Repository_owner(ctx, field)
			case "rootTopic":
				return ec.fieldContext_Repository_rootTopic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Repository", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_id(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_login(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Login, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_name(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_public(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_public(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Public, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_public(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_resourcePath(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_resourcePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().ResourcePath(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_resourcePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_alerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Alerts(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_fakeError(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fakeError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FakeError(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fakeError(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_view(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_view(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().View(rctx, fc.Args["viewerId"].(string), fc.Args["currentOrganizationLogin"].(string), fc.Args["currentRepositoryName"].(*string), fc.Args["repositoryIds"].([]string), fc.Args["searchString"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*View)
	fc.Result = res
	return ec.marshalNView2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐView(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_view(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_View_activity(ctx, field)
			case "currentRepository":
				return ec.fieldContext_View_currentRepository(ctx, field)
			case "defaultOrganization":
				return ec.fieldContext_View_defaultOrganization(ctx, field)
			case "link":
				return ec.fieldContext_View_link(ctx, field)
			case "linkCount":
				return ec.fieldContext_View_linkCount(ctx, field)
			case "links":
				return ec.fieldContext_View_links(ctx, field)
			case "queryInfo":
				return ec.fieldContext_View_queryInfo(ctx, field)
			case "searchString":
				return ec.fieldContext_View_searchString(ctx, field)
			case "topic":
				return ec.fieldContext_View_topic(ctx, field)
			case "topicCount":
				return ec.fieldContext_View_topicCount(ctx, field)
			case "topicGraph":
				return ec.fieldContext_View_topicGraph(ctx, field)
			case "topics":
				return ec.fieldContext_View_topics(ctx, field)
			case "viewer":
				return ec.fieldContext_View_viewer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type View", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_view_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryInfo_topics(ctx context.Context, field graphql.CollectedField, obj *QueryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryInfo_topics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicConnection)
	fc.Result = res
	return ec.marshalNTopicConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryInfo_topics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TopicConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TopicConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryInfo_stringTokens(ctx context.Context, field graphql.CollectedField, obj *QueryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QueryInfo_stringTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringTokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QueryInfo_stringTokens(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReorderSynonymsPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *ReorderSynonymsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReorderSynonymsPayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReorderSynonymsPayload_clientMutationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReorderSynonymsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_displayColor(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_displayColor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayColor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNColor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_displayColor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Color does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_displayName(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().DisplayName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_fullName(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_fullName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().FullName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_fullName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_id(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_isPrivate(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_isPrivate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPrivate(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_isPrivate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_name(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_organization(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().Organization(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_Organization_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "login":
				return ec.fieldContext_Organization_login(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Organization_resourcePath(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_owner(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_User_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "isGuest":
				return ec.fieldContext_User_isGuest(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "primaryEmail":
				return ec.fieldContext_User_primaryEmail(ctx, field)
			case "repositories":
				return ec.fieldContext_User_repositories(ctx, field)
			case "selectedRepository":
				return ec.fieldContext_User_selectedRepository(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Repository_rootTopic(ctx context.Context, field graphql.CollectedField, obj *Repository) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Repository_rootTopic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().RootTopic(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicValue)
	fc.Result = res
	return ec.marshalNTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Repository_rootTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_Topic_activity(ctx, field)
			case "availableParentTopics":
				return ec.fieldContext_Topic_availableParentTopics(ctx, field)
			case "childTopics":
				return ec.fieldContext_Topic_childTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "displayName":
				return ec.fieldContext_Topic_displayName(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "links":
				return ec.fieldContext_Topic_links(ctx, field)
			case "loading":
				return ec.fieldContext_Topic_loading(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Topic_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Topic_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Topic_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Topic_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Topic_resourcePath(ctx, field)
			case "search":
				return ec.fieldContext_Topic_search(ctx, field)
			case "synonyms":
				return ec.fieldContext_Topic_synonyms(ctx, field)
			case "timeRange":
				return ec.fieldContext_Topic_timeRange(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "viewerCanDeleteSynonyms":
				return ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
			case "viewerCanUpdate":
				return ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepositoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RepositoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepositoryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RepositoryEdge)
	fc.Result = res
	return ec.marshalORepositoryEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepositoryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepositoryConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepositoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_RepositoryEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_RepositoryEdge_node(ctx, field)
			case "isSelected":
				return ec.fieldContext_RepositoryEdge_isSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RepositoryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepositoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RepositoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepositoryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepositoryEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepositoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepositoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *RepositoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepositoryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Repository)
	fc.Result = res
	return ec.marshalNRepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepositoryEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepositoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayColor":
				return ec.fieldContext_Repository_displayColor(ctx, field)
			case "displayName":
				return ec.fieldContext_Repository_displayName(ctx, field)
			case "fullName":
				return ec.fieldContext_Repository_fullName(ctx, field)
			case "id":
				return ec.fieldContext_Repository_id(ctx, field)
			case "isPrivate":
				return ec.fieldContext_Repository_isPrivate(ctx, field)
			case "name":
				return ec.fieldContext_Repository_name(ctx, field)
			case "organization":
				return ec.fieldContext_Repository_organization(ctx, field)
			case "owner":
				return ec.fieldContext_Repository_owner(ctx, field)
			case "rootTopic":
				return ec.fieldContext_Repository_rootTopic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Repository", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepositoryEdge_isSelected(ctx context.Context, field graphql.CollectedField, obj *RepositoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepositoryEdge_isSelected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSelected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepositoryEdge_isSelected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepositoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewLinkPayload_link(ctx context.Context, field graphql.CollectedField, obj *ReviewLinkPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewLinkPayload_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LinkValue)
	fc.Result = res
	return ec.marshalNLink2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewLinkPayload_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewLinkPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableParentTopics":
				return ec.fieldContext_Link_availableParentTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Link_createdAt(ctx, field)
			case "id":
				return ec.fieldContext_Link_id(ctx, field)
			case "loading":
				return ec.fieldContext_Link_loading(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Link_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Link_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Link_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Link_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Link_resourcePath(ctx, field)
			case "sha1":
				return ec.fieldContext_Link_sha1(ctx, field)
			case "title":
				return ec.fieldContext_Link_title(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Link_updatedAt(ctx, field)
			case "url":
				return ec.fieldContext_Link_url(ctx, field)
			case "viewerReview":
				return ec.fieldContext_Link_viewerReview(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemConnection_edges(ctx context.Context, field graphql.CollectedField, obj *SearchResultItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*SearchResultItemEdge)
	fc.Result = res
	return ec.marshalOSearchResultItemEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItemEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_SearchResultItemEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchResultItemEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultItemEdge_node(ctx context.Context, field graphql.CollectedField, obj *SearchResultItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultItemEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(SearchResultItem)
	fc.Result = res
	return ec.marshalNSearchResultItem2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultItemEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SearchResultItem does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SelectRepositoryPayload_repository(ctx context.Context, field graphql.CollectedField, obj *SelectRepositoryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SelectRepositoryPayload_repository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SelectRepositoryPayload_repository(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SelectRepositoryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayColor":
				return ec.fieldContext_Repository_displayColor(ctx, field)
			case "displayName":
				return ec.fieldContext_Repository_displayName(ctx, field)
			case "fullName":
				return ec.fieldContext_Repository_fullName(ctx, field)
			case "id":
				return ec.fieldContext_Repository_id(ctx, field)
			case "isPrivate":
				return ec.fieldContext_Repository_isPrivate(ctx, field)
			case "name":
				return ec.fieldContext_Repository_name(ctx, field)
			case "organization":
				return ec.fieldContext_Repository_organization(ctx, field)
			case "owner":
				return ec.fieldContext_Repository_owner(ctx, field)
			case "rootTopic":
				return ec.fieldContext_Repository_rootTopic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Repository", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SelectRepositoryPayload_viewer(ctx context.Context, field graphql.CollectedField, obj *SelectRepositoryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SelectRepositoryPayload_viewer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Viewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SelectRepositoryPayload_viewer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SelectRepositoryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_User_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "isGuest":
				return ec.fieldContext_User_isGuest(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "primaryEmail":
				return ec.fieldContext_User_primaryEmail(ctx, field)
			case "repositories":
				return ec.fieldContext_User_repositories(ctx, field)
			case "selectedRepository":
				return ec.fieldContext_User_selectedRepository(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_id(ctx context.Context, field graphql.CollectedField, obj *Session) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Session_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Session_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *SessionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionEdge_node(ctx context.Context, field graphql.CollectedField, obj *SessionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Session)
	fc.Result = res
	return ec.marshalNSession2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Session_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Synonym_locale(ctx context.Context, field graphql.CollectedField, obj *Synonym) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Synonym_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Synonym().Locale(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(LocaleIdentifier)
	fc.Result = res
	return ec.marshalNLocaleIdentifier2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLocaleIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Synonym_locale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Synonym",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LocaleIdentifier does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Synonym_name(ctx context.Context, field graphql.CollectedField, obj *Synonym) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Synonym_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Synonym_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Synonym",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeRange_startsAt(ctx context.Context, field graphql.CollectedField, obj *TimeRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeRange_startsAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartsAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeRange_startsAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeRange_endsAt(ctx context.Context, field graphql.CollectedField, obj *TimeRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeRange_endsAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndsAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeRange_endsAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeRange_prefixFormat(ctx context.Context, field graphql.CollectedField, obj *TimeRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeRange_prefixFormat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrefixFormat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(TimeRangePrefixFormat)
	fc.Result = res
	return ec.marshalNTimeRangePrefixFormat2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRangePrefixFormat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeRange_prefixFormat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimeRangePrefixFormat does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeRangeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *TimeRangeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeRangeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeRangeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeRangeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeRangeEdge_node(ctx context.Context, field graphql.CollectedField, obj *TimeRangeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeRangeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TimeRange)
	fc.Result = res
	return ec.marshalNTimeRange2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeRangeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeRangeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startsAt":
				return ec.fieldContext_TimeRange_startsAt(ctx, field)
			case "endsAt":
				return ec.fieldContext_TimeRange_endsAt(ctx, field)
			case "prefixFormat":
				return ec.fieldContext_TimeRange_prefixFormat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_activity(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_activity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Activity(rctx, obj, fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ActivityLineItemConnection)
	fc.Result = res
	return ec.marshalNActivityLineItemConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_activity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ActivityLineItemConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ActivityLineItemConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityLineItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_activity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_availableParentTopics(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_availableParentTopics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().AvailableParentTopics(rctx, obj, fc.Args["searchString"].(*string), fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicConnection)
	fc.Result = res
	return ec.marshalNTopicConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_availableParentTopics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TopicConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TopicConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_availableParentTopics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_childTopics(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_childTopics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().ChildTopics(rctx, obj, fc.Args["searchString"].(*string), fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicConnection)
	fc.Result = res
	return ec.marshalNTopicConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_childTopics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TopicConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TopicConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_childTopics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_createdAt(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_description(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Description(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_displayName(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().DisplayName(rctx, obj, fc.Args["timeRange"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_displayName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_id(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_links(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_links(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Links(rctx, obj, fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string), fc.Args["searchString"].(*string), fc.Args["reviewed"].(*bool), fc.Args["descendants"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LinkConnection)
	fc.Result = res
	return ec.marshalNLinkConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_links(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_LinkConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_LinkConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_LinkConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LinkConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_links_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_loading(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_loading(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Loading(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_loading(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_name(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_newlyAdded(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_newlyAdded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewlyAdded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_newlyAdded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_organization(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Organization(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_Organization_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "login":
				return ec.fieldContext_Organization_login(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Organization_resourcePath(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_parentTopics(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_parentTopics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().ParentTopics(rctx, obj, fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicConnection)
	fc.Result = res
	return ec.marshalNTopicConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_parentTopics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TopicConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TopicConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_parentTopics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_repository(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_repository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Repository(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Repository)
	fc.Result = res
	return ec.marshalNRepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_repository(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayColor":
				return ec.fieldContext_Repository_displayColor(ctx, field)
			case "displayName":
				return ec.fieldContext_Repository_displayName(ctx, field)
			case "fullName":
				return ec.fieldContext_Repository_fullName(ctx, field)
			case "id":
				return ec.fieldContext_Repository_id(ctx, field)
			case "isPrivate":
				return ec.fieldContext_Repository_isPrivate(ctx, field)
			case "name":
				return ec.fieldContext_Repository_name(ctx, field)
			case "organization":
				return ec.fieldContext_Repository_organization(ctx, field)
			case "owner":
				return ec.fieldContext_Repository_owner(ctx, field)
			case "rootTopic":
				return ec.fieldContext_Repository_rootTopic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Repository", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_resourcePath(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_resourcePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().ResourcePath(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_resourcePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_search(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_search(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Search(rctx, obj, fc.Args["searchString"].(string), fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SearchResultItemConnection)
	fc.Result = res
	return ec.marshalNSearchResultItemConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_search(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SearchResultItemConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchResultItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_search_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_synonyms(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_synonyms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Synonyms(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Synonym)
	fc.Result = res
	return ec.marshalNSynonym2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSynonymᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_synonyms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "locale":
				return ec.fieldContext_Synonym_locale(ctx, field)
			case "name":
				return ec.fieldContext_Synonym_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Synonym", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_timeRange(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_timeRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().TimeRange(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TimeRange)
	fc.Result = res
	return ec.marshalOTimeRange2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_timeRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startsAt":
				return ec.fieldContext_TimeRange_startsAt(ctx, field)
			case "endsAt":
				return ec.fieldContext_TimeRange_endsAt(ctx, field)
			case "prefixFormat":
				return ec.fieldContext_TimeRange_prefixFormat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_updatedAt(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_viewerCanDeleteSynonyms(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().ViewerCanDeleteSynonyms(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_viewerCanDeleteSynonyms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_viewerCanUpdate(ctx context.Context, field graphql.CollectedField, obj *TopicValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().ViewerCanUpdate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_viewerCanUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicConnection_edges(ctx context.Context, field graphql.CollectedField, obj *TopicConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopicConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*TopicEdge)
	fc.Result = res
	return ec.marshalOTopicEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopicConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TopicEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TopicEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *TopicConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopicConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopicConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *TopicEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopicEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopicEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicEdge_node(ctx context.Context, field graphql.CollectedField, obj *TopicEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopicEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicValue)
	fc.Result = res
	return ec.marshalNTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopicEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_Topic_activity(ctx, field)
			case "availableParentTopics":
				return ec.fieldContext_Topic_availableParentTopics(ctx, field)
			case "childTopics":
				return ec.fieldContext_Topic_childTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "displayName":
				return ec.fieldContext_Topic_displayName(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "links":
				return ec.fieldContext_Topic_links(ctx, field)
			case "loading":
				return ec.fieldContext_Topic_loading(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Topic_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Topic_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Topic_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Topic_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Topic_resourcePath(ctx, field)
			case "search":
				return ec.fieldContext_Topic_search(ctx, field)
			case "synonyms":
				return ec.fieldContext_Topic_synonyms(ctx, field)
			case "timeRange":
				return ec.fieldContext_Topic_timeRange(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "viewerCanDeleteSynonyms":
				return ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
			case "viewerCanUpdate":
				return ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateLinkTopicsPayload_link(ctx context.Context, field graphql.CollectedField, obj *UpdateLinkTopicsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateLinkTopicsPayload_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LinkValue)
	fc.Result = res
	return ec.marshalNLink2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateLinkTopicsPayload_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateLinkTopicsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableParentTopics":
				return ec.fieldContext_Link_availableParentTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Link_createdAt(ctx, field)
			case "id":
				return ec.fieldContext_Link_id(ctx, field)
			case "loading":
				return ec.fieldContext_Link_loading(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Link_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Link_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Link_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Link_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Link_resourcePath(ctx, field)
			case "sha1":
				return ec.fieldContext_Link_sha1(ctx, field)
			case "title":
				return ec.fieldContext_Link_title(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Link_updatedAt(ctx, field)
			case "url":
				return ec.fieldContext_Link_url(ctx, field)
			case "viewerReview":
				return ec.fieldContext_Link_viewerReview(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateSynonymsPayload_alerts(ctx context.Context, field graphql.CollectedField, obj *UpdateSynonymsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateSynonymsPayload_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateSynonymsPayload_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateSynonymsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateSynonymsPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *UpdateSynonymsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateSynonymsPayload_clientMutationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientMutationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateSynonymsPayload_clientMutationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateSynonymsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateSynonymsPayload_topic(ctx context.Context, field graphql.CollectedField, obj *UpdateSynonymsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateSynonymsPayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TopicValue)
	fc.Result = res
	return ec.marshalOTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateSynonymsPayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateSynonymsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_Topic_activity(ctx, field)
			case "availableParentTopics":
				return ec.fieldContext_Topic_availableParentTopics(ctx, field)
			case "childTopics":
				return ec.fieldContext_Topic_childTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "displayName":
				return ec.fieldContext_Topic_displayName(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "links":
				return ec.fieldContext_Topic_links(ctx, field)
			case "loading":
				return ec.fieldContext_Topic_loading(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Topic_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Topic_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Topic_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Topic_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Topic_resourcePath(ctx, field)
			case "search":
				return ec.fieldContext_Topic_search(ctx, field)
			case "synonyms":
				return ec.fieldContext_Topic_synonyms(ctx, field)
			case "timeRange":
				return ec.fieldContext_Topic_timeRange(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "viewerCanDeleteSynonyms":
				return ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
			case "viewerCanUpdate":
				return ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTopicParentTopicsPayload_alerts(ctx context.Context, field graphql.CollectedField, obj *UpdateTopicParentTopicsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTopicParentTopicsPayload_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTopicParentTopicsPayload_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTopicParentTopicsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTopicParentTopicsPayload_topic(ctx context.Context, field graphql.CollectedField, obj *UpdateTopicParentTopicsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTopicParentTopicsPayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicValue)
	fc.Result = res
	return ec.marshalNTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTopicParentTopicsPayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTopicParentTopicsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_Topic_activity(ctx, field)
			case "availableParentTopics":
				return ec.fieldContext_Topic_availableParentTopics(ctx, field)
			case "childTopics":
				return ec.fieldContext_Topic_childTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "displayName":
				return ec.fieldContext_Topic_displayName(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "links":
				return ec.fieldContext_Topic_links(ctx, field)
			case "loading":
				return ec.fieldContext_Topic_loading(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Topic_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Topic_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Topic_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Topic_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Topic_resourcePath(ctx, field)
			case "search":
				return ec.fieldContext_Topic_search(ctx, field)
			case "synonyms":
				return ec.fieldContext_Topic_synonyms(ctx, field)
			case "timeRange":
				return ec.fieldContext_Topic_timeRange(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "viewerCanDeleteSynonyms":
				return ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
			case "viewerCanUpdate":
				return ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTopicPayload_alerts(ctx context.Context, field graphql.CollectedField, obj *UpdateTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTopicPayload_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTopicPayload_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTopicPayload_topic(ctx context.Context, field graphql.CollectedField, obj *UpdateTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTopicPayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicValue)
	fc.Result = res
	return ec.marshalNTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTopicPayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_Topic_activity(ctx, field)
			case "availableParentTopics":
				return ec.fieldContext_Topic_availableParentTopics(ctx, field)
			case "childTopics":
				return ec.fieldContext_Topic_childTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "displayName":
				return ec.fieldContext_Topic_displayName(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "links":
				return ec.fieldContext_Topic_links(ctx, field)
			case "loading":
				return ec.fieldContext_Topic_loading(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Topic_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Topic_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Topic_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Topic_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Topic_resourcePath(ctx, field)
			case "search":
				return ec.fieldContext_Topic_search(ctx, field)
			case "synonyms":
				return ec.fieldContext_Topic_synonyms(ctx, field)
			case "timeRange":
				return ec.fieldContext_Topic_timeRange(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "viewerCanDeleteSynonyms":
				return ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
			case "viewerCanUpdate":
				return ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpsertLinkPayload_alerts(ctx context.Context, field graphql.CollectedField, obj *UpsertLinkPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpsertLinkPayload_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpsertLinkPayload_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpsertLinkPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpsertLinkPayload_linkEdge(ctx context.Context, field graphql.CollectedField, obj *UpsertLinkPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpsertLinkPayload_linkEdge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkEdge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*LinkEdge)
	fc.Result = res
	return ec.marshalOLinkEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpsertLinkPayload_linkEdge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpsertLinkPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_LinkEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_LinkEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LinkEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpsertTopicPayload_alerts(ctx context.Context, field graphql.CollectedField, obj *UpsertTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpsertTopicPayload_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpsertTopicPayload_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpsertTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpsertTopicPayload_topicEdge(ctx context.Context, field graphql.CollectedField, obj *UpsertTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpsertTopicPayload_topicEdge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicEdge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TopicEdge)
	fc.Result = res
	return ec.marshalOTopicEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpsertTopicPayload_topicEdge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpsertTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TopicEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TopicEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpsertTopicTimeRangePayload_alerts(ctx context.Context, field graphql.CollectedField, obj *UpsertTopicTimeRangePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpsertTopicTimeRangePayload_alerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpsertTopicTimeRangePayload_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpsertTopicTimeRangePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Alert_text(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpsertTopicTimeRangePayload_timeRangeEdge(ctx context.Context, field graphql.CollectedField, obj *UpsertTopicTimeRangePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpsertTopicTimeRangePayload_timeRangeEdge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeRangeEdge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TimeRangeEdge)
	fc.Result = res
	return ec.marshalOTimeRangeEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRangeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpsertTopicTimeRangePayload_timeRangeEdge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpsertTopicTimeRangePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TimeRangeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TimeRangeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeRangeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpsertTopicTimeRangePayload_topic(ctx context.Context, field graphql.CollectedField, obj *UpsertTopicTimeRangePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpsertTopicTimeRangePayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicValue)
	fc.Result = res
	return ec.marshalNTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpsertTopicTimeRangePayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpsertTopicTimeRangePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_Topic_activity(ctx, field)
			case "availableParentTopics":
				return ec.fieldContext_Topic_availableParentTopics(ctx, field)
			case "childTopics":
				return ec.fieldContext_Topic_childTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "displayName":
				return ec.fieldContext_Topic_displayName(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "links":
				return ec.fieldContext_Topic_links(ctx, field)
			case "loading":
				return ec.fieldContext_Topic_loading(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Topic_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Topic_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Topic_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Topic_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Topic_resourcePath(ctx, field)
			case "search":
				return ec.fieldContext_Topic_search(ctx, field)
			case "synonyms":
				return ec.fieldContext_Topic_synonyms(ctx, field)
			case "timeRange":
				return ec.fieldContext_Topic_timeRange(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "viewerCanDeleteSynonyms":
				return ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
			case "viewerCanUpdate":
				return ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_avatarUrl(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_avatarUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().AvatarURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_avatarUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_defaultRepository(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_defaultRepository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().DefaultRepository(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_defaultRepository(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayColor":
				return ec.fieldContext_Repository_displayColor(ctx, field)
			case "displayName":
				return ec.fieldContext_Repository_displayName(ctx, field)
			case "fullName":
				return ec.fieldContext_Repository_fullName(ctx, field)
			case "id":
				return ec.fieldContext_Repository_id(ctx, field)
			case "isPrivate":
				return ec.fieldContext_Repository_isPrivate(ctx, field)
			case "name":
				return ec.fieldContext_Repository_name(ctx, field)
			case "organization":
				return ec.fieldContext_Repository_organization(ctx, field)
			case "owner":
				return ec.fieldContext_Repository_owner(ctx, field)
			case "rootTopic":
				return ec.fieldContext_Repository_rootTopic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Repository", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isGuest(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isGuest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGuest(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isGuest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_primaryEmail(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_primaryEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_primaryEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_repositories(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_repositories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Repositories(rctx, obj, fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RepositoryConnection)
	fc.Result = res
	return ec.marshalNRepositoryConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepositoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_repositories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RepositoryConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RepositoryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_repositories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_selectedRepository(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_selectedRepository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().SelectedRepository(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_selectedRepository(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayColor":
				return ec.fieldContext_Repository_displayColor(ctx, field)
			case "displayName":
				return ec.fieldContext_Repository_displayName(ctx, field)
			case "fullName":
				return ec.fieldContext_Repository_fullName(ctx, field)
			case "id":
				return ec.fieldContext_Repository_id(ctx, field)
			case "isPrivate":
				return ec.fieldContext_Repository_isPrivate(ctx, field)
			case "name":
				return ec.fieldContext_Repository_name(ctx, field)
			case "organization":
				return ec.fieldContext_Repository_organization(ctx, field)
			case "owner":
				return ec.fieldContext_Repository_owner(ctx, field)
			case "rootTopic":
				return ec.fieldContext_Repository_rootTopic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Repository", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_node(ctx context.Context, field graphql.CollectedField, obj *UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_User_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "isGuest":
				return ec.fieldContext_User_isGuest(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "primaryEmail":
				return ec.fieldContext_User_primaryEmail(ctx, field)
			case "repositories":
				return ec.fieldContext_User_repositories(ctx, field)
			case "selectedRepository":
				return ec.fieldContext_User_selectedRepository(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _View_activity(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_activity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().Activity(rctx, obj, fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ActivityLineItemConnection)
	fc.Result = res
	return ec.marshalNActivityLineItemConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_activity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ActivityLineItemConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ActivityLineItemConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityLineItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_View_activity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _View_currentRepository(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_currentRepository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentRepository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_currentRepository(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayColor":
				return ec.fieldContext_Repository_displayColor(ctx, field)
			case "displayName":
				return ec.fieldContext_Repository_displayName(ctx, field)
			case "fullName":
				return ec.fieldContext_Repository_fullName(ctx, field)
			case "id":
				return ec.fieldContext_Repository_id(ctx, field)
			case "isPrivate":
				return ec.fieldContext_Repository_isPrivate(ctx, field)
			case "name":
				return ec.fieldContext_Repository_name(ctx, field)
			case "organization":
				return ec.fieldContext_Repository_organization(ctx, field)
			case "owner":
				return ec.fieldContext_Repository_owner(ctx, field)
			case "rootTopic":
				return ec.fieldContext_Repository_rootTopic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Repository", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _View_defaultOrganization(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_defaultOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().DefaultOrganization(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_defaultOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_Organization_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "login":
				return ec.fieldContext_Organization_login(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Organization_resourcePath(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _View_link(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().Link(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*LinkValue)
	fc.Result = res
	return ec.marshalOLink2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "availableParentTopics":
				return ec.fieldContext_Link_availableParentTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Link_createdAt(ctx, field)
			case "id":
				return ec.fieldContext_Link_id(ctx, field)
			case "loading":
				return ec.fieldContext_Link_loading(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Link_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Link_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Link_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Link_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Link_resourcePath(ctx, field)
			case "sha1":
				return ec.fieldContext_Link_sha1(ctx, field)
			case "title":
				return ec.fieldContext_Link_title(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Link_updatedAt(ctx, field)
			case "url":
				return ec.fieldContext_Link_url(ctx, field)
			case "viewerReview":
				return ec.fieldContext_Link_viewerReview(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_View_link_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _View_linkCount(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_linkCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().LinkCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_linkCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _View_links(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_links(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().Links(rctx, obj, fc.Args["searchString"].(*string), fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string), fc.Args["reviewed"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LinkConnection)
	fc.Result = res
	return ec.marshalNLinkConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_links(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_LinkConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_LinkConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_LinkConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LinkConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_View_links_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _View_queryInfo(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_queryInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().QueryInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*QueryInfo)
	fc.Result = res
	return ec.marshalNQueryInfo2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐQueryInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_queryInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "topics":
				return ec.fieldContext_QueryInfo_topics(ctx, field)
			case "stringTokens":
				return ec.fieldContext_QueryInfo_stringTokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QueryInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _View_searchString(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_searchString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SearchString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_searchString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _View_topic(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().Topic(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TopicValue)
	fc.Result = res
	return ec.marshalOTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "activity":
				return ec.fieldContext_Topic_activity(ctx, field)
			case "availableParentTopics":
				return ec.fieldContext_Topic_availableParentTopics(ctx, field)
			case "childTopics":
				return ec.fieldContext_Topic_childTopics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "displayName":
				return ec.fieldContext_Topic_displayName(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "links":
				return ec.fieldContext_Topic_links(ctx, field)
			case "loading":
				return ec.fieldContext_Topic_loading(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "newlyAdded":
				return ec.fieldContext_Topic_newlyAdded(ctx, field)
			case "organization":
				return ec.fieldContext_Topic_organization(ctx, field)
			case "parentTopics":
				return ec.fieldContext_Topic_parentTopics(ctx, field)
			case "repository":
				return ec.fieldContext_Topic_repository(ctx, field)
			case "resourcePath":
				return ec.fieldContext_Topic_resourcePath(ctx, field)
			case "search":
				return ec.fieldContext_Topic_search(ctx, field)
			case "synonyms":
				return ec.fieldContext_Topic_synonyms(ctx, field)
			case "timeRange":
				return ec.fieldContext_Topic_timeRange(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "viewerCanDeleteSynonyms":
				return ec.fieldContext_Topic_viewerCanDeleteSynonyms(ctx, field)
			case "viewerCanUpdate":
				return ec.fieldContext_Topic_viewerCanUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_View_topic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _View_topicCount(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_topicCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().TopicCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_topicCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _View_topicGraph(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_topicGraph(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().TopicGraph(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_topicGraph(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _View_topics(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_topics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().Topics(rctx, obj, fc.Args["searchString"].(*string), fc.Args["first"].(*int), fc.Args["after"].(*string), fc.Args["last"].(*int), fc.Args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*TopicConnection)
	fc.Result = res
	return ec.marshalNTopicConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_topics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TopicConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TopicConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_View_topics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _View_viewer(ctx context.Context, field graphql.CollectedField, obj *View) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_View_viewer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.View().Viewer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_View_viewer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "View",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "defaultRepository":
				return ec.fieldContext_User_defaultRepository(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "isGuest":
				return ec.fieldContext_User_isGuest(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "primaryEmail":
				return ec.fieldContext_User_primaryEmail(ctx, field)
			case "repositories":
				return ec.fieldContext_User_repositories(ctx, field)
			case "selectedRepository":
				return ec.fieldContext_User_selectedRepository(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateGithubSessionInput(ctx context.Context, obj interface{}) (CreateGithubSessionInput, error) {
	var it CreateGithubSessionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "githubAvatarUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("githubAvatarUrl"))
			it.GithubAvatarURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "githubUsername":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("githubUsername"))
			it.GithubUsername, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "primaryEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryEmail"))
			it.PrimaryEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "serverSecret":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serverSecret"))
			it.ServerSecret, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateGoogleSessionInput(ctx context.Context, obj interface{}) (CreateGoogleSessionInput, error) {
	var it CreateGoogleSessionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "googleAvatarUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("googleAvatarUrl"))
			it.GoogleAvatarURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "googleProfileId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("googleProfileId"))
			it.GoogleProfileID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "primaryEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryEmail"))
			it.PrimaryEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "serverSecret":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serverSecret"))
			it.ServerSecret, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteAccountInput(ctx context.Context, obj interface{}) (DeleteAccountInput, error) {
	var it DeleteAccountInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteLinkInput(ctx context.Context, obj interface{}) (DeleteLinkInput, error) {
	var it DeleteLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "linkId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkId"))
			it.LinkID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteSessionInput(ctx context.Context, obj interface{}) (DeleteSessionInput, error) {
	var it DeleteSessionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sessionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionId"))
			it.SessionID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteTopicInput(ctx context.Context, obj interface{}) (DeleteTopicInput, error) {
	var it DeleteTopicInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			it.TopicID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteTopicTimeRangeInput(ctx context.Context, obj interface{}) (DeleteTopicTimeRangeInput, error) {
	var it DeleteTopicTimeRangeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			it.TopicID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReorderSynonymsInput(ctx context.Context, obj interface{}) (ReorderSynonymsInput, error) {
	var it ReorderSynonymsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "synonymIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synonymIds"))
			it.SynonymIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			it.TopicID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReviewLinkInput(ctx context.Context, obj interface{}) (ReviewLinkInput, error) {
	var it ReviewLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "linkId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkId"))
			it.LinkID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewed"))
			it.Reviewed, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSelectRepositoryInput(ctx context.Context, obj interface{}) (SelectRepositoryInput, error) {
	var it SelectRepositoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositoryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryId"))
			it.RepositoryID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSynonymInput(ctx context.Context, obj interface{}) (SynonymInput, error) {
	var it SynonymInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateLinkTopicsInput(ctx context.Context, obj interface{}) (UpdateLinkTopicsInput, error) {
	var it UpdateLinkTopicsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "linkId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkId"))
			it.LinkID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentTopicIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentTopicIds"))
			it.ParentTopicIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSynonymsInput(ctx context.Context, obj interface{}) (UpdateSynonymsInput, error) {
	var it UpdateSynonymsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "synonyms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synonyms"))
			it.Synonyms, err = ec.unmarshalNSynonymInput2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSynonymInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			it.TopicID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicInput(ctx context.Context, obj interface{}) (UpdateTopicInput, error) {
	var it UpdateTopicInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIds"))
			it.TopicIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicParentTopicsInput(ctx context.Context, obj interface{}) (UpdateTopicParentTopicsInput, error) {
	var it UpdateTopicParentTopicsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			it.TopicID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentTopicIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentTopicIds"))
			it.ParentTopicIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpsertLinkInput(ctx context.Context, obj interface{}) (UpsertLinkInput, error) {
	var it UpsertLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "addParentTopicIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addParentTopicIds"))
			it.AddParentTopicIds, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationLogin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationLogin"))
			it.OrganizationLogin, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositoryName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryName"))
			it.RepositoryName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpsertTopicInput(ctx context.Context, obj interface{}) (UpsertTopicInput, error) {
	var it UpsertTopicInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationLogin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationLogin"))
			it.OrganizationLogin, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositoryName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryName"))
			it.RepositoryName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIds"))
			it.TopicIds, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpsertTopicTimeRangeInput(ctx context.Context, obj interface{}) (UpsertTopicTimeRangeInput, error) {
	var it UpsertTopicTimeRangeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			it.TopicID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startsAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startsAt"))
			it.StartsAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "endsAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endsAt"))
			it.EndsAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "prefixFormat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefixFormat"))
			it.PrefixFormat, err = ec.unmarshalNTimeRangePrefixFormat2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRangePrefixFormat(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Alertable(ctx context.Context, sel ast.SelectionSet, obj Alertable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case CreateSessionPayload:
		return ec._CreateSessionPayload(ctx, sel, &obj)
	case *CreateSessionPayload:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateSessionPayload(ctx, sel, obj)
	case DeleteAccountPayload:
		return ec._DeleteAccountPayload(ctx, sel, &obj)
	case *DeleteAccountPayload:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteAccountPayload(ctx, sel, obj)
	case UpdateTopicParentTopicsPayload:
		return ec._UpdateTopicParentTopicsPayload(ctx, sel, &obj)
	case *UpdateTopicParentTopicsPayload:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateTopicParentTopicsPayload(ctx, sel, obj)
	case UpsertLinkPayload:
		return ec._UpsertLinkPayload(ctx, sel, &obj)
	case *UpsertLinkPayload:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpsertLinkPayload(ctx, sel, obj)
	case UpsertTopicPayload:
		return ec._UpsertTopicPayload(ctx, sel, &obj)
	case *UpsertTopicPayload:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpsertTopicPayload(ctx, sel, obj)
	case UpsertTopicTimeRangePayload:
		return ec._UpsertTopicTimeRangePayload(ctx, sel, &obj)
	case *UpsertTopicTimeRangePayload:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpsertTopicTimeRangePayload(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Namespaceable(ctx context.Context, sel ast.SelectionSet, obj Namespaceable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case LinkValue:
		return ec._Link(ctx, sel, &obj)
	case *LinkValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Link(ctx, sel, obj)
	case TopicValue:
		return ec._Topic(ctx, sel, &obj)
	case *TopicValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Topic(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ResourceIdentifiable(ctx context.Context, sel ast.SelectionSet, obj ResourceIdentifiable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case LinkValue:
		return ec._Link(ctx, sel, &obj)
	case *LinkValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Link(ctx, sel, obj)
	case Organization:
		return ec._Organization(ctx, sel, &obj)
	case *Organization:
		if obj == nil {
			return graphql.Null
		}
		return ec._Organization(ctx, sel, obj)
	case TopicValue:
		return ec._Topic(ctx, sel, &obj)
	case *TopicValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Topic(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SearchResultItem(ctx context.Context, sel ast.SelectionSet, obj SearchResultItem) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case TopicValue:
		return ec._Topic(ctx, sel, &obj)
	case *TopicValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Topic(ctx, sel, obj)
	case LinkValue:
		return ec._Link(ctx, sel, &obj)
	case *LinkValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Link(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activityLineItemImplementors = []string{"ActivityLineItem"}

func (ec *executionContext) _ActivityLineItem(ctx context.Context, sel ast.SelectionSet, obj *ActivityLineItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityLineItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityLineItem")
		case "description":

			out.Values[i] = ec._ActivityLineItem_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._ActivityLineItem_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var activityLineItemConnectionImplementors = []string{"ActivityLineItemConnection"}

func (ec *executionContext) _ActivityLineItemConnection(ctx context.Context, sel ast.SelectionSet, obj *ActivityLineItemConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityLineItemConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityLineItemConnection")
		case "edges":

			out.Values[i] = ec._ActivityLineItemConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._ActivityLineItemConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var activityLineItemEdgeImplementors = []string{"ActivityLineItemEdge"}

func (ec *executionContext) _ActivityLineItemEdge(ctx context.Context, sel ast.SelectionSet, obj *ActivityLineItemEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityLineItemEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityLineItemEdge")
		case "cursor":

			out.Values[i] = ec._ActivityLineItemEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._ActivityLineItemEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alertImplementors = []string{"Alert"}

func (ec *executionContext) _Alert(ctx context.Context, sel ast.SelectionSet, obj *Alert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alertImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Alert")
		case "text":

			out.Values[i] = ec._Alert_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Alert_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._Alert_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createSessionPayloadImplementors = []string{"CreateSessionPayload", "Alertable"}

func (ec *executionContext) _CreateSessionPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateSessionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createSessionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateSessionPayload")
		case "alerts":

			out.Values[i] = ec._CreateSessionPayload_alerts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userEdge":

			out.Values[i] = ec._CreateSessionPayload_userEdge(ctx, field, obj)

		case "sessionEdge":

			out.Values[i] = ec._CreateSessionPayload_sessionEdge(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteAccountPayloadImplementors = []string{"DeleteAccountPayload", "Alertable"}

func (ec *executionContext) _DeleteAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteAccountPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteAccountPayload")
		case "alerts":

			out.Values[i] = ec._DeleteAccountPayload_alerts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientMutationId":

			out.Values[i] = ec._DeleteAccountPayload_clientMutationId(ctx, field, obj)

		case "deletedUserId":

			out.Values[i] = ec._DeleteAccountPayload_deletedUserId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteLinkPayloadImplementors = []string{"DeleteLinkPayload"}

func (ec *executionContext) _DeleteLinkPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteLinkPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteLinkPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteLinkPayload")
		case "clientMutationId":

			out.Values[i] = ec._DeleteLinkPayload_clientMutationId(ctx, field, obj)

		case "deletedLinkId":

			out.Values[i] = ec._DeleteLinkPayload_deletedLinkId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteSessionPayloadImplementors = []string{"DeleteSessionPayload"}

func (ec *executionContext) _DeleteSessionPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteSessionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteSessionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteSessionPayload")
		case "clientMutationId":

			out.Values[i] = ec._DeleteSessionPayload_clientMutationId(ctx, field, obj)

		case "deletedSessionId":

			out.Values[i] = ec._DeleteSessionPayload_deletedSessionId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteTopicPayloadImplementors = []string{"DeleteTopicPayload"}

func (ec *executionContext) _DeleteTopicPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteTopicPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteTopicPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteTopicPayload")
		case "clientMutationId":

			out.Values[i] = ec._DeleteTopicPayload_clientMutationId(ctx, field, obj)

		case "deletedTopicId":

			out.Values[i] = ec._DeleteTopicPayload_deletedTopicId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteTopicTimeRangePayloadImplementors = []string{"DeleteTopicTimeRangePayload"}

func (ec *executionContext) _DeleteTopicTimeRangePayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteTopicTimeRangePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteTopicTimeRangePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteTopicTimeRangePayload")
		case "clientMutationId":

			out.Values[i] = ec._DeleteTopicTimeRangePayload_clientMutationId(ctx, field, obj)

		case "deletedTimeRangeId":

			out.Values[i] = ec._DeleteTopicTimeRangePayload_deletedTimeRangeId(ctx, field, obj)

		case "topic":

			out.Values[i] = ec._DeleteTopicTimeRangePayload_topic(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var linkImplementors = []string{"Link", "ResourceIdentifiable", "Namespaceable", "SearchResultItem"}

func (ec *executionContext) _Link(ctx context.Context, sel ast.SelectionSet, obj *LinkValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Link")
		case "availableParentTopics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_availableParentTopics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._Link_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "loading":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_loading(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "newlyAdded":

			out.Values[i] = ec._Link_newlyAdded(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "organization":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_organization(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "parentTopics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_parentTopics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "repository":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_repository(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "resourcePath":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_resourcePath(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "sha1":

			out.Values[i] = ec._Link_sha1(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":

			out.Values[i] = ec._Link_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "url":

			out.Values[i] = ec._Link_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "viewerReview":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Link_viewerReview(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var linkConnectionImplementors = []string{"LinkConnection"}

func (ec *executionContext) _LinkConnection(ctx context.Context, sel ast.SelectionSet, obj *LinkConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkConnection")
		case "edges":

			out.Values[i] = ec._LinkConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._LinkConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._LinkConnection_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var linkEdgeImplementors = []string{"LinkEdge"}

func (ec *executionContext) _LinkEdge(ctx context.Context, sel ast.SelectionSet, obj *LinkEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkEdge")
		case "cursor":

			out.Values[i] = ec._LinkEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._LinkEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var linkReviewImplementors = []string{"LinkReview"}

func (ec *executionContext) _LinkReview(ctx context.Context, sel ast.SelectionSet, obj *LinkReview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkReviewImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkReview")
		case "reviewedAt":

			out.Values[i] = ec._LinkReview_reviewedAt(ctx, field, obj)

		case "user":

			out.Values[i] = ec._LinkReview_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createGithubSession":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGithubSession(ctx, field)
			})

		case "createGoogleSession":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGoogleSession(ctx, field)
			})

		case "deleteAccount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAccount(ctx, field)
			})

		case "deleteLink":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLink(ctx, field)
			})

		case "deleteSession":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSession(ctx, field)
			})

		case "deleteTopic":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTopic(ctx, field)
			})

		case "deleteTopicTimeRange":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTopicTimeRange(ctx, field)
			})

		case "reviewLink":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reviewLink(ctx, field)
			})

		case "selectRepository":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_selectRepository(ctx, field)
			})

		case "updateLinkTopics":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLinkTopics(ctx, field)
			})

		case "updateSynonyms":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSynonyms(ctx, field)
			})

		case "updateTopic":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTopic(ctx, field)
			})

		case "updateTopicParentTopics":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTopicParentTopics(ctx, field)
			})

		case "upsertLink":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_upsertLink(ctx, field)
			})

		case "upsertTopic":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_upsertTopic(ctx, field)
			})

		case "upsertTopicTimeRange":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_upsertTopicTimeRange(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationImplementors = []string{"Organization", "ResourceIdentifiable"}

func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "defaultRepository":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_defaultRepository(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._Organization_id(ctx, field, obj)

		case "login":

			out.Values[i] = ec._Organization_login(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Organization_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "public":

			out.Values[i] = ec._Organization_public(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "resourcePath":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_resourcePath(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":

			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":

			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":

			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)

		case "endCursor":

			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "alerts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alerts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "fakeError":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fakeError(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "view":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_view(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryInfoImplementors = []string{"QueryInfo"}

func (ec *executionContext) _QueryInfo(ctx context.Context, sel ast.SelectionSet, obj *QueryInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QueryInfo")
		case "topics":

			out.Values[i] = ec._QueryInfo_topics(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stringTokens":

			out.Values[i] = ec._QueryInfo_stringTokens(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reorderSynonymsPayloadImplementors = []string{"ReorderSynonymsPayload"}

func (ec *executionContext) _ReorderSynonymsPayload(ctx context.Context, sel ast.SelectionSet, obj *ReorderSynonymsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reorderSynonymsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReorderSynonymsPayload")
		case "clientMutationId":

			out.Values[i] = ec._ReorderSynonymsPayload_clientMutationId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryImplementors = []string{"Repository"}

func (ec *executionContext) _Repository(ctx context.Context, sel ast.SelectionSet, obj *Repository) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Repository")
		case "displayColor":

			out.Values[i] = ec._Repository_displayColor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "displayName":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_displayName(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "fullName":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_fullName(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._Repository_id(ctx, field, obj)

		case "isPrivate":

			out.Values[i] = ec._Repository_isPrivate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Repository_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "organization":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_organization(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "owner":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_owner(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "rootTopic":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_rootTopic(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryConnectionImplementors = []string{"RepositoryConnection"}

func (ec *executionContext) _RepositoryConnection(ctx context.Context, sel ast.SelectionSet, obj *RepositoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryConnection")
		case "edges":

			out.Values[i] = ec._RepositoryConnection_edges(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryEdgeImplementors = []string{"RepositoryEdge"}

func (ec *executionContext) _RepositoryEdge(ctx context.Context, sel ast.SelectionSet, obj *RepositoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryEdge")
		case "cursor":

			out.Values[i] = ec._RepositoryEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._RepositoryEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isSelected":

			out.Values[i] = ec._RepositoryEdge_isSelected(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reviewLinkPayloadImplementors = []string{"ReviewLinkPayload"}

func (ec *executionContext) _ReviewLinkPayload(ctx context.Context, sel ast.SelectionSet, obj *ReviewLinkPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewLinkPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewLinkPayload")
		case "link":

			out.Values[i] = ec._ReviewLinkPayload_link(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var searchResultItemConnectionImplementors = []string{"SearchResultItemConnection"}

func (ec *executionContext) _SearchResultItemConnection(ctx context.Context, sel ast.SelectionSet, obj *SearchResultItemConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchResultItemConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchResultItemConnection")
		case "edges":

			out.Values[i] = ec._SearchResultItemConnection_edges(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var searchResultItemEdgeImplementors = []string{"SearchResultItemEdge"}

func (ec *executionContext) _SearchResultItemEdge(ctx context.Context, sel ast.SelectionSet, obj *SearchResultItemEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchResultItemEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchResultItemEdge")
		case "node":

			out.Values[i] = ec._SearchResultItemEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var selectRepositoryPayloadImplementors = []string{"SelectRepositoryPayload"}

func (ec *executionContext) _SelectRepositoryPayload(ctx context.Context, sel ast.SelectionSet, obj *SelectRepositoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, selectRepositoryPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SelectRepositoryPayload")
		case "repository":

			out.Values[i] = ec._SelectRepositoryPayload_repository(ctx, field, obj)

		case "viewer":

			out.Values[i] = ec._SelectRepositoryPayload_viewer(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionImplementors = []string{"Session"}

func (ec *executionContext) _Session(ctx context.Context, sel ast.SelectionSet, obj *Session) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Session")
		case "id":

			out.Values[i] = ec._Session_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionEdgeImplementors = []string{"SessionEdge"}

func (ec *executionContext) _SessionEdge(ctx context.Context, sel ast.SelectionSet, obj *SessionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SessionEdge")
		case "cursor":

			out.Values[i] = ec._SessionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._SessionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var synonymImplementors = []string{"Synonym"}

func (ec *executionContext) _Synonym(ctx context.Context, sel ast.SelectionSet, obj *Synonym) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, synonymImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Synonym")
		case "locale":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Synonym_locale(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._Synonym_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timeRangeImplementors = []string{"TimeRange"}

func (ec *executionContext) _TimeRange(ctx context.Context, sel ast.SelectionSet, obj *TimeRange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeRangeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeRange")
		case "startsAt":

			out.Values[i] = ec._TimeRange_startsAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endsAt":

			out.Values[i] = ec._TimeRange_endsAt(ctx, field, obj)

		case "prefixFormat":

			out.Values[i] = ec._TimeRange_prefixFormat(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timeRangeEdgeImplementors = []string{"TimeRangeEdge"}

func (ec *executionContext) _TimeRangeEdge(ctx context.Context, sel ast.SelectionSet, obj *TimeRangeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeRangeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeRangeEdge")
		case "cursor":

			out.Values[i] = ec._TimeRangeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._TimeRangeEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicImplementors = []string{"Topic", "SearchResultItem", "ResourceIdentifiable", "Namespaceable"}

func (ec *executionContext) _Topic(ctx context.Context, sel ast.SelectionSet, obj *TopicValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Topic")
		case "activity":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_activity(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "availableParentTopics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_availableParentTopics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "childTopics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_childTopics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "description":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_description(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "displayName":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_displayName(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._Topic_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "links":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_links(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "loading":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_loading(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._Topic_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "newlyAdded":

			out.Values[i] = ec._Topic_newlyAdded(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "organization":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_organization(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "parentTopics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_parentTopics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "repository":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_repository(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "resourcePath":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_resourcePath(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "search":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_search(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "synonyms":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_synonyms(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "timeRange":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_timeRange(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "viewerCanDeleteSynonyms":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_viewerCanDeleteSynonyms(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "viewerCanUpdate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_viewerCanUpdate(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicConnectionImplementors = []string{"TopicConnection"}

func (ec *executionContext) _TopicConnection(ctx context.Context, sel ast.SelectionSet, obj *TopicConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicConnection")
		case "edges":

			out.Values[i] = ec._TopicConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._TopicConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicEdgeImplementors = []string{"TopicEdge"}

func (ec *executionContext) _TopicEdge(ctx context.Context, sel ast.SelectionSet, obj *TopicEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicEdge")
		case "cursor":

			out.Values[i] = ec._TopicEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._TopicEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateLinkTopicsPayloadImplementors = []string{"UpdateLinkTopicsPayload"}

func (ec *executionContext) _UpdateLinkTopicsPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateLinkTopicsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateLinkTopicsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateLinkTopicsPayload")
		case "link":

			out.Values[i] = ec._UpdateLinkTopicsPayload_link(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateSynonymsPayloadImplementors = []string{"UpdateSynonymsPayload"}

func (ec *executionContext) _UpdateSynonymsPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateSynonymsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateSynonymsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateSynonymsPayload")
		case "alerts":

			out.Values[i] = ec._UpdateSynonymsPayload_alerts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientMutationId":

			out.Values[i] = ec._UpdateSynonymsPayload_clientMutationId(ctx, field, obj)

		case "topic":

			out.Values[i] = ec._UpdateSynonymsPayload_topic(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateTopicParentTopicsPayloadImplementors = []string{"UpdateTopicParentTopicsPayload", "Alertable"}

func (ec *executionContext) _UpdateTopicParentTopicsPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateTopicParentTopicsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateTopicParentTopicsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateTopicParentTopicsPayload")
		case "alerts":

			out.Values[i] = ec._UpdateTopicParentTopicsPayload_alerts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic":

			out.Values[i] = ec._UpdateTopicParentTopicsPayload_topic(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateTopicPayloadImplementors = []string{"UpdateTopicPayload"}

func (ec *executionContext) _UpdateTopicPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateTopicPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateTopicPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateTopicPayload")
		case "alerts":

			out.Values[i] = ec._UpdateTopicPayload_alerts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic":

			out.Values[i] = ec._UpdateTopicPayload_topic(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var upsertLinkPayloadImplementors = []string{"UpsertLinkPayload", "Alertable"}

func (ec *executionContext) _UpsertLinkPayload(ctx context.Context, sel ast.SelectionSet, obj *UpsertLinkPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, upsertLinkPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpsertLinkPayload")
		case "alerts":

			out.Values[i] = ec._UpsertLinkPayload_alerts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linkEdge":

			out.Values[i] = ec._UpsertLinkPayload_linkEdge(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var upsertTopicPayloadImplementors = []string{"UpsertTopicPayload", "Alertable"}

func (ec *executionContext) _UpsertTopicPayload(ctx context.Context, sel ast.SelectionSet, obj *UpsertTopicPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, upsertTopicPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpsertTopicPayload")
		case "alerts":

			out.Values[i] = ec._UpsertTopicPayload_alerts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topicEdge":

			out.Values[i] = ec._UpsertTopicPayload_topicEdge(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var upsertTopicTimeRangePayloadImplementors = []string{"UpsertTopicTimeRangePayload", "Alertable"}

func (ec *executionContext) _UpsertTopicTimeRangePayload(ctx context.Context, sel ast.SelectionSet, obj *UpsertTopicTimeRangePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, upsertTopicTimeRangePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpsertTopicTimeRangePayload")
		case "alerts":

			out.Values[i] = ec._UpsertTopicTimeRangePayload_alerts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeRangeEdge":

			out.Values[i] = ec._UpsertTopicTimeRangePayload_timeRangeEdge(ctx, field, obj)

		case "topic":

			out.Values[i] = ec._UpsertTopicTimeRangePayload_topic(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "avatarUrl":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_avatarUrl(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "defaultRepository":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_defaultRepository(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

		case "isGuest":

			out.Values[i] = ec._User_isGuest(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._User_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "primaryEmail":

			out.Values[i] = ec._User_primaryEmail(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "repositories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_repositories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "selectedRepository":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_selectedRepository(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEdgeImplementors = []string{"UserEdge"}

func (ec *executionContext) _UserEdge(ctx context.Context, sel ast.SelectionSet, obj *UserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEdge")
		case "cursor":

			out.Values[i] = ec._UserEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._UserEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var viewImplementors = []string{"View"}

func (ec *executionContext) _View(ctx context.Context, sel ast.SelectionSet, obj *View) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, viewImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("View")
		case "activity":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_activity(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "currentRepository":

			out.Values[i] = ec._View_currentRepository(ctx, field, obj)

		case "defaultOrganization":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_defaultOrganization(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "link":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_link(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "linkCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_linkCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "links":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_links(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryInfo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_queryInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "searchString":

			out.Values[i] = ec._View_searchString(ctx, field, obj)

		case "topic":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_topic(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "topicCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_topicCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "topicGraph":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_topicGraph(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "topics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_topics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "viewer":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._View_viewer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNActivityLineItem2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItem(ctx context.Context, sel ast.SelectionSet, v *ActivityLineItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActivityLineItem(ctx, sel, v)
}

func (ec *executionContext) marshalNActivityLineItemConnection2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItemConnection(ctx context.Context, sel ast.SelectionSet, v ActivityLineItemConnection) graphql.Marshaler {
	return ec._ActivityLineItemConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivityLineItemConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItemConnection(ctx context.Context, sel ast.SelectionSet, v *ActivityLineItemConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActivityLineItemConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNAlert2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertᚄ(ctx context.Context, sel ast.SelectionSet, v []*Alert) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlert2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlert(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAlert2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlert(ctx context.Context, sel ast.SelectionSet, v *Alert) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Alert(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAlertType2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertType(ctx context.Context, v interface{}) (AlertType, error) {
	var res AlertType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlertType2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐAlertType(ctx context.Context, sel ast.SelectionSet, v AlertType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNColor2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNColor2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCreateGithubSessionInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐCreateGithubSessionInput(ctx context.Context, v interface{}) (CreateGithubSessionInput, error) {
	res, err := ec.unmarshalInputCreateGithubSessionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateGoogleSessionInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐCreateGoogleSessionInput(ctx context.Context, v interface{}) (CreateGoogleSessionInput, error) {
	res, err := ec.unmarshalInputCreateGoogleSessionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeleteAccountInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteAccountInput(ctx context.Context, v interface{}) (DeleteAccountInput, error) {
	res, err := ec.unmarshalInputDeleteAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteLinkInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteLinkInput(ctx context.Context, v interface{}) (DeleteLinkInput, error) {
	res, err := ec.unmarshalInputDeleteLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteSessionInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteSessionInput(ctx context.Context, v interface{}) (DeleteSessionInput, error) {
	res, err := ec.unmarshalInputDeleteSessionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteTopicInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteTopicInput(ctx context.Context, v interface{}) (DeleteTopicInput, error) {
	res, err := ec.unmarshalInputDeleteTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteTopicTimeRangeInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteTopicTimeRangeInput(ctx context.Context, v interface{}) (DeleteTopicTimeRangeInput, error) {
	res, err := ec.unmarshalInputDeleteTopicTimeRangeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLink2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkValue(ctx context.Context, sel ast.SelectionSet, v *LinkValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Link(ctx, sel, v)
}

func (ec *executionContext) marshalNLinkConnection2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkConnection(ctx context.Context, sel ast.SelectionSet, v LinkConnection) graphql.Marshaler {
	return ec._LinkConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLinkConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkConnection(ctx context.Context, sel ast.SelectionSet, v *LinkConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LinkConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLocaleIdentifier2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLocaleIdentifier(ctx context.Context, v interface{}) (LocaleIdentifier, error) {
	var res LocaleIdentifier
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLocaleIdentifier2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLocaleIdentifier(ctx context.Context, sel ast.SelectionSet, v LocaleIdentifier) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOrganization2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐOrganization(ctx context.Context, sel ast.SelectionSet, v Organization) graphql.Marshaler {
	return ec._Organization(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganization2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *Organization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNQueryInfo2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐQueryInfo(ctx context.Context, sel ast.SelectionSet, v QueryInfo) graphql.Marshaler {
	return ec._QueryInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNQueryInfo2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐQueryInfo(ctx context.Context, sel ast.SelectionSet, v *QueryInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QueryInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNRepository2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx context.Context, sel ast.SelectionSet, v Repository) graphql.Marshaler {
	return ec._Repository(ctx, sel, &v)
}

func (ec *executionContext) marshalNRepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx context.Context, sel ast.SelectionSet, v *Repository) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Repository(ctx, sel, v)
}

func (ec *executionContext) marshalNRepositoryConnection2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepositoryConnection(ctx context.Context, sel ast.SelectionSet, v RepositoryConnection) graphql.Marshaler {
	return ec._RepositoryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRepositoryConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepositoryConnection(ctx context.Context, sel ast.SelectionSet, v *RepositoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RepositoryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReviewLinkInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐReviewLinkInput(ctx context.Context, v interface{}) (ReviewLinkInput, error) {
	res, err := ec.unmarshalInputReviewLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSearchResultItem2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItem(ctx context.Context, sel ast.SelectionSet, v SearchResultItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchResultItem(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchResultItemConnection2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItemConnection(ctx context.Context, sel ast.SelectionSet, v SearchResultItemConnection) graphql.Marshaler {
	return ec._SearchResultItemConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNSearchResultItemConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItemConnection(ctx context.Context, sel ast.SelectionSet, v *SearchResultItemConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchResultItemConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSelectRepositoryInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSelectRepositoryInput(ctx context.Context, v interface{}) (SelectRepositoryInput, error) {
	res, err := ec.unmarshalInputSelectRepositoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSession2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSession(ctx context.Context, sel ast.SelectionSet, v *Session) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Session(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSynonym2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSynonymᚄ(ctx context.Context, sel ast.SelectionSet, v []*Synonym) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSynonym2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSynonym(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSynonym2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSynonym(ctx context.Context, sel ast.SelectionSet, v *Synonym) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Synonym(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSynonymInput2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSynonymInputᚄ(ctx context.Context, v interface{}) ([]*SynonymInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*SynonymInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSynonymInput2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSynonymInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSynonymInput2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSynonymInput(ctx context.Context, v interface{}) (*SynonymInput, error) {
	res, err := ec.unmarshalInputSynonymInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimeRange2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRange(ctx context.Context, sel ast.SelectionSet, v *TimeRange) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TimeRange(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTimeRangePrefixFormat2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRangePrefixFormat(ctx context.Context, v interface{}) (TimeRangePrefixFormat, error) {
	var res TimeRangePrefixFormat
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimeRangePrefixFormat2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRangePrefixFormat(ctx context.Context, sel ast.SelectionSet, v TimeRangePrefixFormat) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTopic2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx context.Context, sel ast.SelectionSet, v TopicValue) graphql.Marshaler {
	return ec._Topic(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx context.Context, sel ast.SelectionSet, v *TopicValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) marshalNTopicConnection2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx context.Context, sel ast.SelectionSet, v TopicConnection) graphql.Marshaler {
	return ec._TopicConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopicConnection2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicConnection(ctx context.Context, sel ast.SelectionSet, v *TopicConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopicConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateLinkTopicsInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateLinkTopicsInput(ctx context.Context, v interface{}) (UpdateLinkTopicsInput, error) {
	res, err := ec.unmarshalInputUpdateLinkTopicsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSynonymsInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateSynonymsInput(ctx context.Context, v interface{}) (UpdateSynonymsInput, error) {
	res, err := ec.unmarshalInputUpdateSynonymsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateTopicInput(ctx context.Context, v interface{}) (UpdateTopicInput, error) {
	res, err := ec.unmarshalInputUpdateTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicParentTopicsInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateTopicParentTopicsInput(ctx context.Context, v interface{}) (UpdateTopicParentTopicsInput, error) {
	res, err := ec.unmarshalInputUpdateTopicParentTopicsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpsertLinkInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertLinkInput(ctx context.Context, v interface{}) (UpsertLinkInput, error) {
	res, err := ec.unmarshalInputUpsertLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpsertTopicInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertTopicInput(ctx context.Context, v interface{}) (UpsertTopicInput, error) {
	res, err := ec.unmarshalInputUpsertTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpsertTopicTimeRangeInput2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertTopicTimeRangeInput(ctx context.Context, v interface{}) (UpsertTopicTimeRangeInput, error) {
	res, err := ec.unmarshalInputUpsertTopicTimeRangeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNView2githubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐView(ctx context.Context, sel ast.SelectionSet, v View) graphql.Marshaler {
	return ec._View(ctx, sel, &v)
}

func (ec *executionContext) marshalNView2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐView(ctx context.Context, sel ast.SelectionSet, v *View) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._View(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOActivityLineItemEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItemEdge(ctx context.Context, sel ast.SelectionSet, v []*ActivityLineItemEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOActivityLineItemEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItemEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOActivityLineItemEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐActivityLineItemEdge(ctx context.Context, sel ast.SelectionSet, v *ActivityLineItemEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActivityLineItemEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCreateSessionPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐCreateSessionPayload(ctx context.Context, sel ast.SelectionSet, v *CreateSessionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateSessionPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalODateTime2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalODeleteAccountPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteAccountPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteAccountPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteAccountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteLinkPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteLinkPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteLinkPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteLinkPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteSessionPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteSessionPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteSessionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteSessionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteTopicPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteTopicPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteTopicPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteTopicPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteTopicTimeRangePayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐDeleteTopicTimeRangePayload(ctx context.Context, sel ast.SelectionSet, v *DeleteTopicTimeRangePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteTopicTimeRangePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOLink2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkValue(ctx context.Context, sel ast.SelectionSet, v *LinkValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Link(ctx, sel, v)
}

func (ec *executionContext) marshalOLinkEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkEdge(ctx context.Context, sel ast.SelectionSet, v []*LinkEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLinkEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLinkEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkEdge(ctx context.Context, sel ast.SelectionSet, v *LinkEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LinkEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOLinkReview2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐLinkReview(ctx context.Context, sel ast.SelectionSet, v *LinkReview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LinkReview(ctx, sel, v)
}

func (ec *executionContext) marshalORepository2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepository(ctx context.Context, sel ast.SelectionSet, v *Repository) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Repository(ctx, sel, v)
}

func (ec *executionContext) marshalORepositoryEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepositoryEdge(ctx context.Context, sel ast.SelectionSet, v []*RepositoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepositoryEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepositoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORepositoryEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐRepositoryEdge(ctx context.Context, sel ast.SelectionSet, v *RepositoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOReviewLinkPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐReviewLinkPayload(ctx context.Context, sel ast.SelectionSet, v *ReviewLinkPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReviewLinkPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOSearchResultItemEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItemEdge(ctx context.Context, sel ast.SelectionSet, v []*SearchResultItemEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSearchResultItemEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItemEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSearchResultItemEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSearchResultItemEdge(ctx context.Context, sel ast.SelectionSet, v *SearchResultItemEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SearchResultItemEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOSelectRepositoryPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSelectRepositoryPayload(ctx context.Context, sel ast.SelectionSet, v *SelectRepositoryPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SelectRepositoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOSessionEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐSessionEdge(ctx context.Context, sel ast.SelectionSet, v *SessionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SessionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTimeRange2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRange(ctx context.Context, sel ast.SelectionSet, v *TimeRange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimeRange(ctx, sel, v)
}

func (ec *executionContext) marshalOTimeRangeEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTimeRangeEdge(ctx context.Context, sel ast.SelectionSet, v *TimeRangeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimeRangeEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOTopic2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicValue(ctx context.Context, sel ast.SelectionSet, v *TopicValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) marshalOTopicEdge2ᚕᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicEdge(ctx context.Context, sel ast.SelectionSet, v []*TopicEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTopicEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTopicEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐTopicEdge(ctx context.Context, sel ast.SelectionSet, v *TopicEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TopicEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateLinkTopicsPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateLinkTopicsPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateLinkTopicsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateLinkTopicsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateSynonymsPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateSynonymsPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateSynonymsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateSynonymsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateTopicParentTopicsPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateTopicParentTopicsPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateTopicParentTopicsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateTopicParentTopicsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateTopicPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpdateTopicPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateTopicPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateTopicPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpsertLinkPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertLinkPayload(ctx context.Context, sel ast.SelectionSet, v *UpsertLinkPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpsertLinkPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpsertTopicPayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertTopicPayload(ctx context.Context, sel ast.SelectionSet, v *UpsertTopicPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpsertTopicPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpsertTopicTimeRangePayload2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUpsertTopicTimeRangePayload(ctx context.Context, sel ast.SelectionSet, v *UpsertTopicTimeRangePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpsertTopicTimeRangePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUserEdge2ᚖgithubᚗcomᚋemwalkerᚋdigraphᚋgolangᚋinternalᚋmodelsᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v *UserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserEdge(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
