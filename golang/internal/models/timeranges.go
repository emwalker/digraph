// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Timerange is an object representing the database table.
type Timerange struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	StartsAt     time.Time `boil:"starts_at" json:"starts_at" toml:"starts_at" yaml:"starts_at"`
	FinishesAt   null.Time `boil:"finishes_at" json:"finishes_at,omitempty" toml:"finishes_at" yaml:"finishes_at,omitempty"`
	PrefixFormat string    `boil:"prefix_format" json:"prefix_format" toml:"prefix_format" yaml:"prefix_format"`

	R *timerangeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L timerangeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TimerangeColumns = struct {
	ID           string
	StartsAt     string
	FinishesAt   string
	PrefixFormat string
}{
	ID:           "id",
	StartsAt:     "starts_at",
	FinishesAt:   "finishes_at",
	PrefixFormat: "prefix_format",
}

var TimerangeTableColumns = struct {
	ID           string
	StartsAt     string
	FinishesAt   string
	PrefixFormat string
}{
	ID:           "timeranges.id",
	StartsAt:     "timeranges.starts_at",
	FinishesAt:   "timeranges.finishes_at",
	PrefixFormat: "timeranges.prefix_format",
}

// Generated where

var TimerangeWhere = struct {
	ID           whereHelperstring
	StartsAt     whereHelpertime_Time
	FinishesAt   whereHelpernull_Time
	PrefixFormat whereHelperstring
}{
	ID:           whereHelperstring{field: "\"timeranges\".\"id\""},
	StartsAt:     whereHelpertime_Time{field: "\"timeranges\".\"starts_at\""},
	FinishesAt:   whereHelpernull_Time{field: "\"timeranges\".\"finishes_at\""},
	PrefixFormat: whereHelperstring{field: "\"timeranges\".\"prefix_format\""},
}

// TimerangeRels is where relationship names are stored.
var TimerangeRels = struct {
	Topics string
}{
	Topics: "Topics",
}

// timerangeR is where relationships are stored.
type timerangeR struct {
	Topics TopicSlice `boil:"Topics" json:"Topics" toml:"Topics" yaml:"Topics"`
}

// NewStruct creates a new relationship struct
func (*timerangeR) NewStruct() *timerangeR {
	return &timerangeR{}
}

func (r *timerangeR) GetTopics() TopicSlice {
	if r == nil {
		return nil
	}
	return r.Topics
}

// timerangeL is where Load methods for each relationship are stored.
type timerangeL struct{}

var (
	timerangeAllColumns            = []string{"id", "starts_at", "finishes_at", "prefix_format"}
	timerangeColumnsWithoutDefault = []string{"starts_at"}
	timerangeColumnsWithDefault    = []string{"id", "finishes_at", "prefix_format"}
	timerangePrimaryKeyColumns     = []string{"id"}
	timerangeGeneratedColumns      = []string{}
)

type (
	// TimerangeSlice is an alias for a slice of pointers to Timerange.
	// This should almost always be used instead of []Timerange.
	TimerangeSlice []*Timerange

	timerangeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	timerangeType                 = reflect.TypeOf(&Timerange{})
	timerangeMapping              = queries.MakeStructMapping(timerangeType)
	timerangePrimaryKeyMapping, _ = queries.BindMapping(timerangeType, timerangeMapping, timerangePrimaryKeyColumns)
	timerangeInsertCacheMut       sync.RWMutex
	timerangeInsertCache          = make(map[string]insertCache)
	timerangeUpdateCacheMut       sync.RWMutex
	timerangeUpdateCache          = make(map[string]updateCache)
	timerangeUpsertCacheMut       sync.RWMutex
	timerangeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single timerange record from the query.
func (q timerangeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Timerange, error) {
	o := &Timerange{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for timeranges")
	}

	return o, nil
}

// All returns all Timerange records from the query.
func (q timerangeQuery) All(ctx context.Context, exec boil.ContextExecutor) (TimerangeSlice, error) {
	var o []*Timerange

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Timerange slice")
	}

	return o, nil
}

// Count returns the count of all Timerange records in the query.
func (q timerangeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count timeranges rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q timerangeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if timeranges exists")
	}

	return count > 0, nil
}

// Topics retrieves all the topic's Topics with an executor.
func (o *Timerange) Topics(mods ...qm.QueryMod) topicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"topics\".\"timerange_id\"=?", o.ID),
	)

	return Topics(queryMods...)
}

// LoadTopics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (timerangeL) LoadTopics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTimerange interface{}, mods queries.Applicator) error {
	var slice []*Timerange
	var object *Timerange

	if singular {
		object = maybeTimerange.(*Timerange)
	} else {
		slice = *maybeTimerange.(*[]*Timerange)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &timerangeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &timerangeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`topics`),
		qm.WhereIn(`topics.timerange_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load topics")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice topics")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if singular {
		object.R.Topics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &topicR{}
			}
			foreign.R.Timerange = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TimerangeID) {
				local.R.Topics = append(local.R.Topics, foreign)
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.Timerange = local
				break
			}
		}
	}

	return nil
}

// AddTopics adds the given related objects to the existing relationships
// of the timerange, optionally inserting them as new records.
// Appends related to o.R.Topics.
// Sets related.R.Timerange appropriately.
func (o *Timerange) AddTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TimerangeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"topics\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"timerange_id"}),
				strmangle.WhereClause("\"", "\"", 2, topicPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TimerangeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &timerangeR{
			Topics: related,
		}
	} else {
		o.R.Topics = append(o.R.Topics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &topicR{
				Timerange: o,
			}
		} else {
			rel.R.Timerange = o
		}
	}
	return nil
}

// SetTopics removes all previously related items of the
// timerange replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Timerange's Topics accordingly.
// Replaces o.R.Topics with related.
// Sets related.R.Timerange's Topics accordingly.
func (o *Timerange) SetTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	query := "update \"topics\" set \"timerange_id\" = null where \"timerange_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Topics {
			queries.SetScanner(&rel.TimerangeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Timerange = nil
		}
		o.R.Topics = nil
	}

	return o.AddTopics(ctx, exec, insert, related...)
}

// RemoveTopics relationships from objects passed in.
// Removes related items from R.Topics (uses pointer comparison, removal does not keep order)
// Sets related.R.Timerange.
func (o *Timerange) RemoveTopics(ctx context.Context, exec boil.ContextExecutor, related ...*Topic) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TimerangeID, nil)
		if rel.R != nil {
			rel.R.Timerange = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("timerange_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Topics {
			if rel != ri {
				continue
			}

			ln := len(o.R.Topics)
			if ln > 1 && i < ln-1 {
				o.R.Topics[i] = o.R.Topics[ln-1]
			}
			o.R.Topics = o.R.Topics[:ln-1]
			break
		}
	}

	return nil
}

// Timeranges retrieves all the records using an executor.
func Timeranges(mods ...qm.QueryMod) timerangeQuery {
	mods = append(mods, qm.From("\"timeranges\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"timeranges\".*"})
	}

	return timerangeQuery{q}
}

// FindTimerange retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTimerange(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Timerange, error) {
	timerangeObj := &Timerange{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"timeranges\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, timerangeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from timeranges")
	}

	return timerangeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Timerange) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no timeranges provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(timerangeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	timerangeInsertCacheMut.RLock()
	cache, cached := timerangeInsertCache[key]
	timerangeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			timerangeAllColumns,
			timerangeColumnsWithDefault,
			timerangeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(timerangeType, timerangeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(timerangeType, timerangeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"timeranges\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"timeranges\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into timeranges")
	}

	if !cached {
		timerangeInsertCacheMut.Lock()
		timerangeInsertCache[key] = cache
		timerangeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Timerange.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Timerange) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	timerangeUpdateCacheMut.RLock()
	cache, cached := timerangeUpdateCache[key]
	timerangeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			timerangeAllColumns,
			timerangePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update timeranges, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"timeranges\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, timerangePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(timerangeType, timerangeMapping, append(wl, timerangePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update timeranges row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for timeranges")
	}

	if !cached {
		timerangeUpdateCacheMut.Lock()
		timerangeUpdateCache[key] = cache
		timerangeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q timerangeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for timeranges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for timeranges")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TimerangeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timerangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"timeranges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, timerangePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in timerange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all timerange")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Timerange) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no timeranges provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(timerangeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	timerangeUpsertCacheMut.RLock()
	cache, cached := timerangeUpsertCache[key]
	timerangeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			timerangeAllColumns,
			timerangeColumnsWithDefault,
			timerangeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			timerangeAllColumns,
			timerangePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert timeranges, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(timerangePrimaryKeyColumns))
			copy(conflict, timerangePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"timeranges\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(timerangeType, timerangeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(timerangeType, timerangeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert timeranges")
	}

	if !cached {
		timerangeUpsertCacheMut.Lock()
		timerangeUpsertCache[key] = cache
		timerangeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Timerange record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Timerange) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Timerange provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), timerangePrimaryKeyMapping)
	sql := "DELETE FROM \"timeranges\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from timeranges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for timeranges")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q timerangeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no timerangeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from timeranges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for timeranges")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TimerangeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timerangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"timeranges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, timerangePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from timerange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for timeranges")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Timerange) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTimerange(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TimerangeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TimerangeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timerangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"timeranges\".* FROM \"timeranges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, timerangePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TimerangeSlice")
	}

	*o = slice

	return nil
}

// TimerangeExists checks if the Timerange row exists.
func TimerangeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"timeranges\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if timeranges exists")
	}

	return exists, nil
}
