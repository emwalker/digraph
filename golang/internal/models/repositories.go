// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Repository is an object representing the database table.
type Repository struct {
	ID             string `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID string `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	Name           string `boil:"name" json:"name" toml:"name" yaml:"name"`
	OwnerID        string `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	System         bool   `boil:"system" json:"system" toml:"system" yaml:"system"`

	R *repositoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L repositoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepositoryColumns = struct {
	ID             string
	OrganizationID string
	Name           string
	OwnerID        string
	System         string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	Name:           "name",
	OwnerID:        "owner_id",
	System:         "system",
}

var RepositoryTableColumns = struct {
	ID             string
	OrganizationID string
	Name           string
	OwnerID        string
	System         string
}{
	ID:             "repositories.id",
	OrganizationID: "repositories.organization_id",
	Name:           "repositories.name",
	OwnerID:        "repositories.owner_id",
	System:         "repositories.system",
}

// Generated where

var RepositoryWhere = struct {
	ID             whereHelperstring
	OrganizationID whereHelperstring
	Name           whereHelperstring
	OwnerID        whereHelperstring
	System         whereHelperbool
}{
	ID:             whereHelperstring{field: "\"repositories\".\"id\""},
	OrganizationID: whereHelperstring{field: "\"repositories\".\"organization_id\""},
	Name:           whereHelperstring{field: "\"repositories\".\"name\""},
	OwnerID:        whereHelperstring{field: "\"repositories\".\"owner_id\""},
	System:         whereHelperbool{field: "\"repositories\".\"system\""},
}

// RepositoryRels is where relationship names are stored.
var RepositoryRels = struct {
	Organization            string
	Owner                   string
	Links                   string
	Topics                  string
	UserLinks               string
	SelectedRepositoryUsers string
}{
	Organization:            "Organization",
	Owner:                   "Owner",
	Links:                   "Links",
	Topics:                  "Topics",
	UserLinks:               "UserLinks",
	SelectedRepositoryUsers: "SelectedRepositoryUsers",
}

// repositoryR is where relationships are stored.
type repositoryR struct {
	Organization            *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	Owner                   *User         `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Links                   LinkSlice     `boil:"Links" json:"Links" toml:"Links" yaml:"Links"`
	Topics                  TopicSlice    `boil:"Topics" json:"Topics" toml:"Topics" yaml:"Topics"`
	UserLinks               UserLinkSlice `boil:"UserLinks" json:"UserLinks" toml:"UserLinks" yaml:"UserLinks"`
	SelectedRepositoryUsers UserSlice     `boil:"SelectedRepositoryUsers" json:"SelectedRepositoryUsers" toml:"SelectedRepositoryUsers" yaml:"SelectedRepositoryUsers"`
}

// NewStruct creates a new relationship struct
func (*repositoryR) NewStruct() *repositoryR {
	return &repositoryR{}
}

func (r *repositoryR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *repositoryR) GetOwner() *User {
	if r == nil {
		return nil
	}
	return r.Owner
}

func (r *repositoryR) GetLinks() LinkSlice {
	if r == nil {
		return nil
	}
	return r.Links
}

func (r *repositoryR) GetTopics() TopicSlice {
	if r == nil {
		return nil
	}
	return r.Topics
}

func (r *repositoryR) GetUserLinks() UserLinkSlice {
	if r == nil {
		return nil
	}
	return r.UserLinks
}

func (r *repositoryR) GetSelectedRepositoryUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.SelectedRepositoryUsers
}

// repositoryL is where Load methods for each relationship are stored.
type repositoryL struct{}

var (
	repositoryAllColumns            = []string{"id", "organization_id", "name", "owner_id", "system"}
	repositoryColumnsWithoutDefault = []string{"organization_id", "name", "owner_id"}
	repositoryColumnsWithDefault    = []string{"id", "system"}
	repositoryPrimaryKeyColumns     = []string{"id"}
	repositoryGeneratedColumns      = []string{}
)

type (
	// RepositorySlice is an alias for a slice of pointers to Repository.
	// This should almost always be used instead of []Repository.
	RepositorySlice []*Repository

	repositoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repositoryType                 = reflect.TypeOf(&Repository{})
	repositoryMapping              = queries.MakeStructMapping(repositoryType)
	repositoryPrimaryKeyMapping, _ = queries.BindMapping(repositoryType, repositoryMapping, repositoryPrimaryKeyColumns)
	repositoryInsertCacheMut       sync.RWMutex
	repositoryInsertCache          = make(map[string]insertCache)
	repositoryUpdateCacheMut       sync.RWMutex
	repositoryUpdateCache          = make(map[string]updateCache)
	repositoryUpsertCacheMut       sync.RWMutex
	repositoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single repository record from the query.
func (q repositoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Repository, error) {
	o := &Repository{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for repositories")
	}

	return o, nil
}

// All returns all Repository records from the query.
func (q repositoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (RepositorySlice, error) {
	var o []*Repository

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Repository slice")
	}

	return o, nil
}

// Count returns the count of all Repository records in the query.
func (q repositoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count repositories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repositoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if repositories exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *Repository) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// Owner pointed to by the foreign key.
func (o *Repository) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Links retrieves all the link's Links with an executor.
func (o *Repository) Links(mods ...qm.QueryMod) linkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"links\".\"repository_id\"=?", o.ID),
	)

	return Links(queryMods...)
}

// Topics retrieves all the topic's Topics with an executor.
func (o *Repository) Topics(mods ...qm.QueryMod) topicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"topics\".\"repository_id\"=?", o.ID),
	)

	return Topics(queryMods...)
}

// UserLinks retrieves all the user_link's UserLinks with an executor.
func (o *Repository) UserLinks(mods ...qm.QueryMod) userLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_links\".\"repository_id\"=?", o.ID),
	)

	return UserLinks(queryMods...)
}

// SelectedRepositoryUsers retrieves all the user's Users with an executor via selected_repository_id column.
func (o *Repository) SelectedRepositoryUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"selected_repository_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repositoryL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		object = maybeRepository.(*Repository)
	} else {
		slice = *maybeRepository.(*[]*Repository)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Repositories = append(foreign.R.Repositories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Repositories = append(foreign.R.Repositories, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repositoryL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		object = maybeRepository.(*Repository)
	} else {
		slice = *maybeRepository.(*[]*Repository)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerRepositories = append(foreign.R.OwnerRepositories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerRepositories = append(foreign.R.OwnerRepositories, local)
				break
			}
		}
	}

	return nil
}

// LoadLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repositoryL) LoadLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		object = maybeRepository.(*Repository)
	} else {
		slice = *maybeRepository.(*[]*Repository)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`links`),
		qm.WhereIn(`links.repository_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load links")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if singular {
		object.R.Links = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &linkR{}
			}
			foreign.R.Repository = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepositoryID {
				local.R.Links = append(local.R.Links, foreign)
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.Repository = local
				break
			}
		}
	}

	return nil
}

// LoadTopics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repositoryL) LoadTopics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		object = maybeRepository.(*Repository)
	} else {
		slice = *maybeRepository.(*[]*Repository)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`topics`),
		qm.WhereIn(`topics.repository_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load topics")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice topics")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if singular {
		object.R.Topics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &topicR{}
			}
			foreign.R.Repository = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepositoryID {
				local.R.Topics = append(local.R.Topics, foreign)
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.Repository = local
				break
			}
		}
	}

	return nil
}

// LoadUserLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repositoryL) LoadUserLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		object = maybeRepository.(*Repository)
	} else {
		slice = *maybeRepository.(*[]*Repository)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_links`),
		qm.WhereIn(`user_links.repository_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_links")
	}

	var resultSlice []*UserLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_links")
	}

	if singular {
		object.R.UserLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userLinkR{}
			}
			foreign.R.Repository = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepositoryID {
				local.R.UserLinks = append(local.R.UserLinks, foreign)
				if foreign.R == nil {
					foreign.R = &userLinkR{}
				}
				foreign.R.Repository = local
				break
			}
		}
	}

	return nil
}

// LoadSelectedRepositoryUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repositoryL) LoadSelectedRepositoryUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		object = maybeRepository.(*Repository)
	} else {
		slice = *maybeRepository.(*[]*Repository)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.selected_repository_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if singular {
		object.R.SelectedRepositoryUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.SelectedRepository = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SelectedRepositoryID) {
				local.R.SelectedRepositoryUsers = append(local.R.SelectedRepositoryUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SelectedRepository = local
				break
			}
		}
	}

	return nil
}

// SetOrganization of the repository to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Repositories.
func (o *Repository) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"repositories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, repositoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &repositoryR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Repositories: RepositorySlice{o},
		}
	} else {
		related.R.Repositories = append(related.R.Repositories, o)
	}

	return nil
}

// SetOwner of the repository to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerRepositories.
func (o *Repository) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"repositories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, repositoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &repositoryR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerRepositories: RepositorySlice{o},
		}
	} else {
		related.R.OwnerRepositories = append(related.R.OwnerRepositories, o)
	}

	return nil
}

// AddLinks adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Links.
// Sets related.R.Repository appropriately.
func (o *Repository) AddLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepositoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repository_id"}),
				strmangle.WhereClause("\"", "\"", 2, linkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepositoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			Links: related,
		}
	} else {
		o.R.Links = append(o.R.Links, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &linkR{
				Repository: o,
			}
		} else {
			rel.R.Repository = o
		}
	}
	return nil
}

// AddTopics adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Topics.
// Sets related.R.Repository appropriately.
func (o *Repository) AddTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepositoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"topics\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repository_id"}),
				strmangle.WhereClause("\"", "\"", 2, topicPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepositoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			Topics: related,
		}
	} else {
		o.R.Topics = append(o.R.Topics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &topicR{
				Repository: o,
			}
		} else {
			rel.R.Repository = o
		}
	}
	return nil
}

// AddUserLinks adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.UserLinks.
// Sets related.R.Repository appropriately.
func (o *Repository) AddUserLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepositoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repository_id"}),
				strmangle.WhereClause("\"", "\"", 2, userLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepositoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			UserLinks: related,
		}
	} else {
		o.R.UserLinks = append(o.R.UserLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userLinkR{
				Repository: o,
			}
		} else {
			rel.R.Repository = o
		}
	}
	return nil
}

// AddSelectedRepositoryUsers adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.SelectedRepositoryUsers.
// Sets related.R.SelectedRepository appropriately.
func (o *Repository) AddSelectedRepositoryUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SelectedRepositoryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"selected_repository_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SelectedRepositoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			SelectedRepositoryUsers: related,
		}
	} else {
		o.R.SelectedRepositoryUsers = append(o.R.SelectedRepositoryUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				SelectedRepository: o,
			}
		} else {
			rel.R.SelectedRepository = o
		}
	}
	return nil
}

// SetSelectedRepositoryUsers removes all previously related items of the
// repository replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SelectedRepository's SelectedRepositoryUsers accordingly.
// Replaces o.R.SelectedRepositoryUsers with related.
// Sets related.R.SelectedRepository's SelectedRepositoryUsers accordingly.
func (o *Repository) SetSelectedRepositoryUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"selected_repository_id\" = null where \"selected_repository_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SelectedRepositoryUsers {
			queries.SetScanner(&rel.SelectedRepositoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SelectedRepository = nil
		}
		o.R.SelectedRepositoryUsers = nil
	}

	return o.AddSelectedRepositoryUsers(ctx, exec, insert, related...)
}

// RemoveSelectedRepositoryUsers relationships from objects passed in.
// Removes related items from R.SelectedRepositoryUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.SelectedRepository.
func (o *Repository) RemoveSelectedRepositoryUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SelectedRepositoryID, nil)
		if rel.R != nil {
			rel.R.SelectedRepository = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("selected_repository_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SelectedRepositoryUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.SelectedRepositoryUsers)
			if ln > 1 && i < ln-1 {
				o.R.SelectedRepositoryUsers[i] = o.R.SelectedRepositoryUsers[ln-1]
			}
			o.R.SelectedRepositoryUsers = o.R.SelectedRepositoryUsers[:ln-1]
			break
		}
	}

	return nil
}

// Repositories retrieves all the records using an executor.
func Repositories(mods ...qm.QueryMod) repositoryQuery {
	mods = append(mods, qm.From("\"repositories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"repositories\".*"})
	}

	return repositoryQuery{q}
}

// FindRepository retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepository(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Repository, error) {
	repositoryObj := &Repository{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"repositories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, repositoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from repositories")
	}

	return repositoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Repository) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no repositories provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(repositoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repositoryInsertCacheMut.RLock()
	cache, cached := repositoryInsertCache[key]
	repositoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repositoryAllColumns,
			repositoryColumnsWithDefault,
			repositoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repositoryType, repositoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"repositories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"repositories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into repositories")
	}

	if !cached {
		repositoryInsertCacheMut.Lock()
		repositoryInsertCache[key] = cache
		repositoryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Repository.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Repository) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	repositoryUpdateCacheMut.RLock()
	cache, cached := repositoryUpdateCache[key]
	repositoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repositoryAllColumns,
			repositoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update repositories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"repositories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, repositoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, append(wl, repositoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update repositories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for repositories")
	}

	if !cached {
		repositoryUpdateCacheMut.Lock()
		repositoryUpdateCache[key] = cache
		repositoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q repositoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for repositories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepositorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"repositories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, repositoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in repository slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all repository")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Repository) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no repositories provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repositoryUpsertCacheMut.RLock()
	cache, cached := repositoryUpsertCache[key]
	repositoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			repositoryAllColumns,
			repositoryColumnsWithDefault,
			repositoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repositoryAllColumns,
			repositoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert repositories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(repositoryPrimaryKeyColumns))
			copy(conflict, repositoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"repositories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repositoryType, repositoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert repositories")
	}

	if !cached {
		repositoryUpsertCacheMut.Lock()
		repositoryUpsertCache[key] = cache
		repositoryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Repository record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Repository) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Repository provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repositoryPrimaryKeyMapping)
	sql := "DELETE FROM \"repositories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for repositories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repositoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no repositoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for repositories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepositorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"repositories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repositoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from repository slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for repositories")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Repository) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRepository(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepositorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepositorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"repositories\".* FROM \"repositories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repositoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RepositorySlice")
	}

	*o = slice

	return nil
}

// RepositoryExists checks if the Repository row exists.
func RepositoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"repositories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if repositories exists")
	}

	return exists, nil
}
