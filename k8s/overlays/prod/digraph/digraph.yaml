---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: digraph-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: prod-digraph-client
spec:
  ports:
    - name: prod-digraph-client-http
      port: 80
      protocol: TCP
      targetPort: 3000
    - name: prod-digraph-client-https
      port: 443
      protocol: TCP
      targetPort: 3000
  selector:
    app: digraph
    tier: prod-client
  type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: digraph
    tier: prod-client
  name: prod-digraph-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: digraph
      tier: prod-client
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: digraph
        tier: prod-client
    spec:
      restartPolicy: Always
      containers:
        - name: node
          envFrom:
            - secretRef:
                name: digraph-secrets
          image: emwalker/digraph-node:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          resources:
            requests:
              memory: 150Mi
            limits:
              memory: 400Mi

---
apiVersion: v1
kind: Service
metadata:
  name: prod-digraph-api
spec:
  ports:
    - name: prod-digraph-client-http
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: prod-digraph-api-http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: digraph
    tier: prod-api
  type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: digraph
    tier: prod-api
  name: prod-digraph-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: digraph
      tier: prod-api
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: digraph
        tier: prod-api
    spec:
      restartPolicy: Always
      containers:
        - name: prod-api
          envFrom:
            - secretRef:
                name: digraph-secrets
          image: emwalker/digraph-api:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          # resources:
          #   requests:
          #     memory: 100Mi
          #   limits:
          #     memory: 600Mi
          volumeMounts:
            - mountPath: /var/lib/digraph
              name: digraph-data
      volumes:
        - name: digraph-data
          persistentVolumeClaim:
            claimName: digraph-data

# What follows is temporary and will eventually go away
---
apiVersion: v1
kind: Service
metadata:
  name: next-digraph-client
spec:
  ports:
    - name: next-digraph-client-http
      port: 80
      protocol: TCP
      targetPort: 3002
    - name: next-digraph-client-https
      port: 443
      protocol: TCP
      targetPort: 3002
  selector:
    app: digraph
    tier: next-client
  type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: digraph
    tier: next-client
  name: next-digraph-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: digraph
      tier: next-client
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: digraph
        tier: next-client
    spec:
      restartPolicy: Always
      containers:
        - name: node
          envFrom:
            - secretRef:
                name: digraph-secrets
          image: emwalker/digraph-node:next
          imagePullPolicy: Always
          ports:
            - containerPort: 3002
              name: http
              protocol: TCP
