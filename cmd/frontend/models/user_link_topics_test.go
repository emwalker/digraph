// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserLinkTopics(t *testing.T) {
	t.Parallel()

	query := UserLinkTopics()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserLinkTopicsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinkTopicsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserLinkTopics().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinkTopicsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserLinkTopicSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinkTopicsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserLinkTopicExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserLinkTopic exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserLinkTopicExists to return true, but got false.")
	}
}

func testUserLinkTopicsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userLinkTopicFound, err := FindUserLinkTopic(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userLinkTopicFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserLinkTopicsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserLinkTopics().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserLinkTopicsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserLinkTopics().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserLinkTopicsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLinkTopicOne := &UserLinkTopic{}
	userLinkTopicTwo := &UserLinkTopic{}
	if err = randomize.Struct(seed, userLinkTopicOne, userLinkTopicDBTypes, false, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}
	if err = randomize.Struct(seed, userLinkTopicTwo, userLinkTopicDBTypes, false, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userLinkTopicOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userLinkTopicTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserLinkTopics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserLinkTopicsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userLinkTopicOne := &UserLinkTopic{}
	userLinkTopicTwo := &UserLinkTopic{}
	if err = randomize.Struct(seed, userLinkTopicOne, userLinkTopicDBTypes, false, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}
	if err = randomize.Struct(seed, userLinkTopicTwo, userLinkTopicDBTypes, false, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userLinkTopicOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userLinkTopicTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testUserLinkTopicsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserLinkTopicsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userLinkTopicColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserLinkTopicToOneTopicUsingTopic(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserLinkTopic
	var foreign Topic

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userLinkTopicDBTypes, false, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, topicDBTypes, false, topicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Topic struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TopicID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Topic().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserLinkTopicSlice{&local}
	if err = local.L.LoadTopic(ctx, tx, false, (*[]*UserLinkTopic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Topic == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Topic = nil
	if err = local.L.LoadTopic(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Topic == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserLinkTopicToOneUserLinkUsingUserLink(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserLinkTopic
	var foreign UserLink

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userLinkTopicDBTypes, false, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserLinkID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserLink().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserLinkTopicSlice{&local}
	if err = local.L.LoadUserLink(ctx, tx, false, (*[]*UserLinkTopic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserLink == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserLink = nil
	if err = local.L.LoadUserLink(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserLink == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserLinkTopicToOneSetOpTopicUsingTopic(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserLinkTopic
	var b, c Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userLinkTopicDBTypes, false, strmangle.SetComplement(userLinkTopicPrimaryKeyColumns, userLinkTopicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Topic{&b, &c} {
		err = a.SetTopic(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Topic != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserLinkTopics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TopicID != x.ID {
			t.Error("foreign key was wrong value", a.TopicID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TopicID))
		reflect.Indirect(reflect.ValueOf(&a.TopicID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TopicID != x.ID {
			t.Error("foreign key was wrong value", a.TopicID, x.ID)
		}
	}
}
func testUserLinkTopicToOneSetOpUserLinkUsingUserLink(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserLinkTopic
	var b, c UserLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userLinkTopicDBTypes, false, strmangle.SetComplement(userLinkTopicPrimaryKeyColumns, userLinkTopicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userLinkDBTypes, false, strmangle.SetComplement(userLinkPrimaryKeyColumns, userLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userLinkDBTypes, false, strmangle.SetComplement(userLinkPrimaryKeyColumns, userLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserLink{&b, &c} {
		err = a.SetUserLink(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserLink != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserLinkTopics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserLinkID != x.ID {
			t.Error("foreign key was wrong value", a.UserLinkID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserLinkID))
		reflect.Indirect(reflect.ValueOf(&a.UserLinkID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserLinkID != x.ID {
			t.Error("foreign key was wrong value", a.UserLinkID, x.ID)
		}
	}
}

func testUserLinkTopicsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserLinkTopicsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserLinkTopicSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserLinkTopicsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserLinkTopics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userLinkTopicDBTypes = map[string]string{`ID`: `uuid`, `UserLinkID`: `uuid`, `Action`: `enum.topic_action('topic_added','topic_removed')`, `TopicID`: `uuid`}
	_                    = bytes.MinRead
)

func testUserLinkTopicsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userLinkTopicPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userLinkTopicAllColumns) == len(userLinkTopicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserLinkTopicsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userLinkTopicAllColumns) == len(userLinkTopicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserLinkTopic{}
	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userLinkTopicDBTypes, true, userLinkTopicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userLinkTopicAllColumns, userLinkTopicPrimaryKeyColumns) {
		fields = userLinkTopicAllColumns
	} else {
		fields = strmangle.SetComplement(
			userLinkTopicAllColumns,
			userLinkTopicPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserLinkTopicSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserLinkTopicsUpsert(t *testing.T) {
	t.Parallel()

	if len(userLinkTopicAllColumns) == len(userLinkTopicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserLinkTopic{}
	if err = randomize.Struct(seed, &o, userLinkTopicDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserLinkTopic: %s", err)
	}

	count, err := UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userLinkTopicDBTypes, false, userLinkTopicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLinkTopic struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserLinkTopic: %s", err)
	}

	count, err = UserLinkTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
