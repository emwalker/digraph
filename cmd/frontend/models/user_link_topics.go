// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserLinkTopic is an object representing the database table.
type UserLinkTopic struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserLinkID string `boil:"user_link_id" json:"user_link_id" toml:"user_link_id" yaml:"user_link_id"`
	Action     string `boil:"action" json:"action" toml:"action" yaml:"action"`
	TopicID    string `boil:"topic_id" json:"topic_id" toml:"topic_id" yaml:"topic_id"`

	R *userLinkTopicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLinkTopicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLinkTopicColumns = struct {
	ID         string
	UserLinkID string
	Action     string
	TopicID    string
}{
	ID:         "id",
	UserLinkID: "user_link_id",
	Action:     "action",
	TopicID:    "topic_id",
}

var UserLinkTopicTableColumns = struct {
	ID         string
	UserLinkID string
	Action     string
	TopicID    string
}{
	ID:         "user_link_topics.id",
	UserLinkID: "user_link_topics.user_link_id",
	Action:     "user_link_topics.action",
	TopicID:    "user_link_topics.topic_id",
}

// Generated where

var UserLinkTopicWhere = struct {
	ID         whereHelperstring
	UserLinkID whereHelperstring
	Action     whereHelperstring
	TopicID    whereHelperstring
}{
	ID:         whereHelperstring{field: "\"user_link_topics\".\"id\""},
	UserLinkID: whereHelperstring{field: "\"user_link_topics\".\"user_link_id\""},
	Action:     whereHelperstring{field: "\"user_link_topics\".\"action\""},
	TopicID:    whereHelperstring{field: "\"user_link_topics\".\"topic_id\""},
}

// UserLinkTopicRels is where relationship names are stored.
var UserLinkTopicRels = struct {
	Topic    string
	UserLink string
}{
	Topic:    "Topic",
	UserLink: "UserLink",
}

// userLinkTopicR is where relationships are stored.
type userLinkTopicR struct {
	Topic    *Topic    `boil:"Topic" json:"Topic" toml:"Topic" yaml:"Topic"`
	UserLink *UserLink `boil:"UserLink" json:"UserLink" toml:"UserLink" yaml:"UserLink"`
}

// NewStruct creates a new relationship struct
func (*userLinkTopicR) NewStruct() *userLinkTopicR {
	return &userLinkTopicR{}
}

// userLinkTopicL is where Load methods for each relationship are stored.
type userLinkTopicL struct{}

var (
	userLinkTopicAllColumns            = []string{"id", "user_link_id", "action", "topic_id"}
	userLinkTopicColumnsWithoutDefault = []string{"user_link_id", "action", "topic_id"}
	userLinkTopicColumnsWithDefault    = []string{"id"}
	userLinkTopicPrimaryKeyColumns     = []string{"id"}
	userLinkTopicGeneratedColumns      = []string{}
)

type (
	// UserLinkTopicSlice is an alias for a slice of pointers to UserLinkTopic.
	// This should almost always be used instead of []UserLinkTopic.
	UserLinkTopicSlice []*UserLinkTopic

	userLinkTopicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLinkTopicType                 = reflect.TypeOf(&UserLinkTopic{})
	userLinkTopicMapping              = queries.MakeStructMapping(userLinkTopicType)
	userLinkTopicPrimaryKeyMapping, _ = queries.BindMapping(userLinkTopicType, userLinkTopicMapping, userLinkTopicPrimaryKeyColumns)
	userLinkTopicInsertCacheMut       sync.RWMutex
	userLinkTopicInsertCache          = make(map[string]insertCache)
	userLinkTopicUpdateCacheMut       sync.RWMutex
	userLinkTopicUpdateCache          = make(map[string]updateCache)
	userLinkTopicUpsertCacheMut       sync.RWMutex
	userLinkTopicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userLinkTopic record from the query.
func (q userLinkTopicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserLinkTopic, error) {
	o := &UserLinkTopic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_link_topics")
	}

	return o, nil
}

// All returns all UserLinkTopic records from the query.
func (q userLinkTopicQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserLinkTopicSlice, error) {
	var o []*UserLinkTopic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserLinkTopic slice")
	}

	return o, nil
}

// Count returns the count of all UserLinkTopic records in the query.
func (q userLinkTopicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_link_topics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userLinkTopicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_link_topics exists")
	}

	return count > 0, nil
}

// Topic pointed to by the foreign key.
func (o *UserLinkTopic) Topic(mods ...qm.QueryMod) topicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TopicID),
	}

	queryMods = append(queryMods, mods...)

	return Topics(queryMods...)
}

// UserLink pointed to by the foreign key.
func (o *UserLinkTopic) UserLink(mods ...qm.QueryMod) userLinkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserLinkID),
	}

	queryMods = append(queryMods, mods...)

	return UserLinks(queryMods...)
}

// LoadTopic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLinkTopicL) LoadTopic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLinkTopic interface{}, mods queries.Applicator) error {
	var slice []*UserLinkTopic
	var object *UserLinkTopic

	if singular {
		object = maybeUserLinkTopic.(*UserLinkTopic)
	} else {
		slice = *maybeUserLinkTopic.(*[]*UserLinkTopic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userLinkTopicR{}
		}
		args = append(args, object.TopicID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLinkTopicR{}
			}

			for _, a := range args {
				if a == obj.TopicID {
					continue Outer
				}
			}

			args = append(args, obj.TopicID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`topics`),
		qm.WhereIn(`topics.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Topic")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Topic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Topic = foreign
		if foreign.R == nil {
			foreign.R = &topicR{}
		}
		foreign.R.UserLinkTopics = append(foreign.R.UserLinkTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TopicID == foreign.ID {
				local.R.Topic = foreign
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.UserLinkTopics = append(foreign.R.UserLinkTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadUserLink allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLinkTopicL) LoadUserLink(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLinkTopic interface{}, mods queries.Applicator) error {
	var slice []*UserLinkTopic
	var object *UserLinkTopic

	if singular {
		object = maybeUserLinkTopic.(*UserLinkTopic)
	} else {
		slice = *maybeUserLinkTopic.(*[]*UserLinkTopic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userLinkTopicR{}
		}
		args = append(args, object.UserLinkID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLinkTopicR{}
			}

			for _, a := range args {
				if a == obj.UserLinkID {
					continue Outer
				}
			}

			args = append(args, obj.UserLinkID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_links`),
		qm.WhereIn(`user_links.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserLink")
	}

	var resultSlice []*UserLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserLink")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_links")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserLink = foreign
		if foreign.R == nil {
			foreign.R = &userLinkR{}
		}
		foreign.R.UserLinkTopics = append(foreign.R.UserLinkTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserLinkID == foreign.ID {
				local.R.UserLink = foreign
				if foreign.R == nil {
					foreign.R = &userLinkR{}
				}
				foreign.R.UserLinkTopics = append(foreign.R.UserLinkTopics, local)
				break
			}
		}
	}

	return nil
}

// SetTopic of the userLinkTopic to the related item.
// Sets o.R.Topic to related.
// Adds o to related.R.UserLinkTopics.
func (o *UserLinkTopic) SetTopic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Topic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_link_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"topic_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLinkTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TopicID = related.ID
	if o.R == nil {
		o.R = &userLinkTopicR{
			Topic: related,
		}
	} else {
		o.R.Topic = related
	}

	if related.R == nil {
		related.R = &topicR{
			UserLinkTopics: UserLinkTopicSlice{o},
		}
	} else {
		related.R.UserLinkTopics = append(related.R.UserLinkTopics, o)
	}

	return nil
}

// SetUserLink of the userLinkTopic to the related item.
// Sets o.R.UserLink to related.
// Adds o to related.R.UserLinkTopics.
func (o *UserLinkTopic) SetUserLink(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserLink) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_link_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_link_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLinkTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserLinkID = related.ID
	if o.R == nil {
		o.R = &userLinkTopicR{
			UserLink: related,
		}
	} else {
		o.R.UserLink = related
	}

	if related.R == nil {
		related.R = &userLinkR{
			UserLinkTopics: UserLinkTopicSlice{o},
		}
	} else {
		related.R.UserLinkTopics = append(related.R.UserLinkTopics, o)
	}

	return nil
}

// UserLinkTopics retrieves all the records using an executor.
func UserLinkTopics(mods ...qm.QueryMod) userLinkTopicQuery {
	mods = append(mods, qm.From("\"user_link_topics\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_link_topics\".*"})
	}

	return userLinkTopicQuery{q}
}

// FindUserLinkTopic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLinkTopic(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserLinkTopic, error) {
	userLinkTopicObj := &UserLinkTopic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_link_topics\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userLinkTopicObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_link_topics")
	}

	return userLinkTopicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserLinkTopic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_link_topics provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(userLinkTopicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userLinkTopicInsertCacheMut.RLock()
	cache, cached := userLinkTopicInsertCache[key]
	userLinkTopicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userLinkTopicAllColumns,
			userLinkTopicColumnsWithDefault,
			userLinkTopicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userLinkTopicType, userLinkTopicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLinkTopicType, userLinkTopicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_link_topics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_link_topics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_link_topics")
	}

	if !cached {
		userLinkTopicInsertCacheMut.Lock()
		userLinkTopicInsertCache[key] = cache
		userLinkTopicInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserLinkTopic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserLinkTopic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	userLinkTopicUpdateCacheMut.RLock()
	cache, cached := userLinkTopicUpdateCache[key]
	userLinkTopicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userLinkTopicAllColumns,
			userLinkTopicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_link_topics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_link_topics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userLinkTopicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLinkTopicType, userLinkTopicMapping, append(wl, userLinkTopicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_link_topics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_link_topics")
	}

	if !cached {
		userLinkTopicUpdateCacheMut.Lock()
		userLinkTopicUpdateCache[key] = cache
		userLinkTopicUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userLinkTopicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_link_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_link_topics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLinkTopicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_link_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userLinkTopicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userLinkTopic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userLinkTopic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserLinkTopic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_link_topics provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(userLinkTopicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLinkTopicUpsertCacheMut.RLock()
	cache, cached := userLinkTopicUpsertCache[key]
	userLinkTopicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userLinkTopicAllColumns,
			userLinkTopicColumnsWithDefault,
			userLinkTopicColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userLinkTopicAllColumns,
			userLinkTopicPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_link_topics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userLinkTopicPrimaryKeyColumns))
			copy(conflict, userLinkTopicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_link_topics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userLinkTopicType, userLinkTopicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLinkTopicType, userLinkTopicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_link_topics")
	}

	if !cached {
		userLinkTopicUpsertCacheMut.Lock()
		userLinkTopicUpsertCache[key] = cache
		userLinkTopicUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserLinkTopic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLinkTopic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserLinkTopic provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLinkTopicPrimaryKeyMapping)
	sql := "DELETE FROM \"user_link_topics\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_link_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_link_topics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userLinkTopicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userLinkTopicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_link_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_link_topics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLinkTopicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_link_topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLinkTopicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userLinkTopic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_link_topics")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLinkTopic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserLinkTopic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLinkTopicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserLinkTopicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_link_topics\".* FROM \"user_link_topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLinkTopicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserLinkTopicSlice")
	}

	*o = slice

	return nil
}

// UserLinkTopicExists checks if the UserLinkTopic row exists.
func UserLinkTopicExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_link_topics\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_link_topics exists")
	}

	return exists, nil
}
