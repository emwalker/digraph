// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GithubAccount is an object representing the database table.
type GithubAccount struct {
	ID           string `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Username     string `boil:"username" json:"username" toml:"username" yaml:"username"`
	Name         string `boil:"name" json:"name" toml:"name" yaml:"name"`
	PrimaryEmail string `boil:"primary_email" json:"primary_email" toml:"primary_email" yaml:"primary_email"`
	AvatarURL    string `boil:"avatar_url" json:"avatar_url" toml:"avatar_url" yaml:"avatar_url"`

	R *githubAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L githubAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GithubAccountColumns = struct {
	ID           string
	UserID       string
	Username     string
	Name         string
	PrimaryEmail string
	AvatarURL    string
}{
	ID:           "id",
	UserID:       "user_id",
	Username:     "username",
	Name:         "name",
	PrimaryEmail: "primary_email",
	AvatarURL:    "avatar_url",
}

var GithubAccountTableColumns = struct {
	ID           string
	UserID       string
	Username     string
	Name         string
	PrimaryEmail string
	AvatarURL    string
}{
	ID:           "github_accounts.id",
	UserID:       "github_accounts.user_id",
	Username:     "github_accounts.username",
	Name:         "github_accounts.name",
	PrimaryEmail: "github_accounts.primary_email",
	AvatarURL:    "github_accounts.avatar_url",
}

// Generated where

var GithubAccountWhere = struct {
	ID           whereHelperstring
	UserID       whereHelperstring
	Username     whereHelperstring
	Name         whereHelperstring
	PrimaryEmail whereHelperstring
	AvatarURL    whereHelperstring
}{
	ID:           whereHelperstring{field: "\"github_accounts\".\"id\""},
	UserID:       whereHelperstring{field: "\"github_accounts\".\"user_id\""},
	Username:     whereHelperstring{field: "\"github_accounts\".\"username\""},
	Name:         whereHelperstring{field: "\"github_accounts\".\"name\""},
	PrimaryEmail: whereHelperstring{field: "\"github_accounts\".\"primary_email\""},
	AvatarURL:    whereHelperstring{field: "\"github_accounts\".\"avatar_url\""},
}

// GithubAccountRels is where relationship names are stored.
var GithubAccountRels = struct {
	User string
}{
	User: "User",
}

// githubAccountR is where relationships are stored.
type githubAccountR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*githubAccountR) NewStruct() *githubAccountR {
	return &githubAccountR{}
}

// githubAccountL is where Load methods for each relationship are stored.
type githubAccountL struct{}

var (
	githubAccountAllColumns            = []string{"id", "user_id", "username", "name", "primary_email", "avatar_url"}
	githubAccountColumnsWithoutDefault = []string{"user_id", "username", "name", "primary_email", "avatar_url"}
	githubAccountColumnsWithDefault    = []string{"id"}
	githubAccountPrimaryKeyColumns     = []string{"id"}
	githubAccountGeneratedColumns      = []string{}
)

type (
	// GithubAccountSlice is an alias for a slice of pointers to GithubAccount.
	// This should almost always be used instead of []GithubAccount.
	GithubAccountSlice []*GithubAccount

	githubAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	githubAccountType                 = reflect.TypeOf(&GithubAccount{})
	githubAccountMapping              = queries.MakeStructMapping(githubAccountType)
	githubAccountPrimaryKeyMapping, _ = queries.BindMapping(githubAccountType, githubAccountMapping, githubAccountPrimaryKeyColumns)
	githubAccountInsertCacheMut       sync.RWMutex
	githubAccountInsertCache          = make(map[string]insertCache)
	githubAccountUpdateCacheMut       sync.RWMutex
	githubAccountUpdateCache          = make(map[string]updateCache)
	githubAccountUpsertCacheMut       sync.RWMutex
	githubAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single githubAccount record from the query.
func (q githubAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GithubAccount, error) {
	o := &GithubAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for github_accounts")
	}

	return o, nil
}

// All returns all GithubAccount records from the query.
func (q githubAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (GithubAccountSlice, error) {
	var o []*GithubAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GithubAccount slice")
	}

	return o, nil
}

// Count returns the count of all GithubAccount records in the query.
func (q githubAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count github_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q githubAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if github_accounts exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *GithubAccount) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (githubAccountL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGithubAccount interface{}, mods queries.Applicator) error {
	var slice []*GithubAccount
	var object *GithubAccount

	if singular {
		object = maybeGithubAccount.(*GithubAccount)
	} else {
		slice = *maybeGithubAccount.(*[]*GithubAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &githubAccountR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &githubAccountR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.GithubAccounts = append(foreign.R.GithubAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.GithubAccounts = append(foreign.R.GithubAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the githubAccount to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GithubAccounts.
func (o *GithubAccount) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"github_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, githubAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &githubAccountR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			GithubAccounts: GithubAccountSlice{o},
		}
	} else {
		related.R.GithubAccounts = append(related.R.GithubAccounts, o)
	}

	return nil
}

// GithubAccounts retrieves all the records using an executor.
func GithubAccounts(mods ...qm.QueryMod) githubAccountQuery {
	mods = append(mods, qm.From("\"github_accounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"github_accounts\".*"})
	}

	return githubAccountQuery{q}
}

// FindGithubAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGithubAccount(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GithubAccount, error) {
	githubAccountObj := &GithubAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"github_accounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, githubAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from github_accounts")
	}

	return githubAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GithubAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no github_accounts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(githubAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	githubAccountInsertCacheMut.RLock()
	cache, cached := githubAccountInsertCache[key]
	githubAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			githubAccountAllColumns,
			githubAccountColumnsWithDefault,
			githubAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(githubAccountType, githubAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(githubAccountType, githubAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"github_accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"github_accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into github_accounts")
	}

	if !cached {
		githubAccountInsertCacheMut.Lock()
		githubAccountInsertCache[key] = cache
		githubAccountInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GithubAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GithubAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	githubAccountUpdateCacheMut.RLock()
	cache, cached := githubAccountUpdateCache[key]
	githubAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			githubAccountAllColumns,
			githubAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update github_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"github_accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, githubAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(githubAccountType, githubAccountMapping, append(wl, githubAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update github_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for github_accounts")
	}

	if !cached {
		githubAccountUpdateCacheMut.Lock()
		githubAccountUpdateCache[key] = cache
		githubAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q githubAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for github_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for github_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GithubAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), githubAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"github_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, githubAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in githubAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all githubAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GithubAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no github_accounts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(githubAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	githubAccountUpsertCacheMut.RLock()
	cache, cached := githubAccountUpsertCache[key]
	githubAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			githubAccountAllColumns,
			githubAccountColumnsWithDefault,
			githubAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			githubAccountAllColumns,
			githubAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert github_accounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(githubAccountPrimaryKeyColumns))
			copy(conflict, githubAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"github_accounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(githubAccountType, githubAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(githubAccountType, githubAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert github_accounts")
	}

	if !cached {
		githubAccountUpsertCacheMut.Lock()
		githubAccountUpsertCache[key] = cache
		githubAccountUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GithubAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GithubAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GithubAccount provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), githubAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"github_accounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from github_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for github_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q githubAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no githubAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from github_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for github_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GithubAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), githubAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"github_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, githubAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from githubAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for github_accounts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GithubAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGithubAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GithubAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GithubAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), githubAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"github_accounts\".* FROM \"github_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, githubAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GithubAccountSlice")
	}

	*o = slice

	return nil
}

// GithubAccountExists checks if the GithubAccount row exists.
func GithubAccountExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"github_accounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if github_accounts exists")
	}

	return exists, nil
}
